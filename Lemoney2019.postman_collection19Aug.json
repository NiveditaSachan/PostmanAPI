{
	"info": {
		"_postman_id": "2e7b4656-8b4e-4f68-a891-e7b2933e326d",
		"name": "Lemoney2019",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setCollection",
			"item": [
				{
					"name": "setEnvVarInCollection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a8a45bba-4588-45ac-9c4f-69ab31037c1c",
								"exec": [
									"pm.environment.clear();",
									"pm.environment.set(\"respTime\",1700);",
									"pm.environment.set(\"statusCode\",200);",
									"pm.environment.set(\"BaseURL\",\"ec2-13-235-96-224.ap-south-1.compute.amazonaws.com:3000\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ae034ef-2822-48d6-b5ac-88bcb15f41bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/countries",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"countries"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Common",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listAllCountries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8af6d9d7-4561-414a-ab5a-773ad7e91632",
										"exec": [
											"console.log(\"-------- \" +JSON.stringify(pm.request.url))",
											"pm.test(\" Verify expected protocol is http \", function () { ",
											"    pm.expect(JSON.stringify(pm.request.url.protocol)).to.include(\"http\")",
											"",
											"})",
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"countries\"",
											"  ],",
											"  \"properties\": {",
											"    \"countries\": {",
											"      \"$id\": \"#/properties/countries\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Countries Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/countries/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"country_name\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"country_name\": {",
											"            \"$id\": \"#/properties/countries/items/properties/country_name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Country_name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"string\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"id\": {",
											"            \"$id\": \"#/properties/countries/items/properties/id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              0",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"}",
											");",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                }",
											"                    );",
											"        }",
											"       ",
											"       if(errors.length>1){",
											"        for(i=0;i<errors.length;i++)   {",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                })  ",
											"        } ",
											"       }",
											"    ",
											"}",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"",
											"if(tv4.validate(pm.response.json(), schema))",
											"{",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"    pm.test(\"JSON response Body contains country: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"countries\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"JSON response Body contains country name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"country_name\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"JSON response Body contains id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"id\");",
											"    });",
											"    ",
											"    //6. JSON value check in reponse body",
											"    ",
											"    var size= pm.response.json().countries.length",
											"   ",
											"    for (i=0;i<size;i++){",
											"        ",
											"        var jsonData = pm.response.json().countries[i]",
											"    ",
											"    tests[\"Validate Id is not null.  For i equals to : \" + i +\" Value of Id is: \" +jsonData.id ] = ",
											"        jsonData.id !== null && ",
											"        jsonData.id !== ' ' && ",
											"        jsonData.id !== 0;",
											"        ",
											"    tests[\"Validate country name is not null. For i equals to : \" + i +\"  Value of country name is \" + jsonData.country_name] = ",
											"        jsonData.country_name !== null && ",
											"        jsonData.country_name !== ' ' && ",
											"        jsonData.country_name !== 0;",
											"    }",
											"}",
											"// 7. To print Application content type as JSON",
											"",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b3fa02d-5dcd-4e7c-8f71-5853fe8f39a0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/countries",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"countries"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllStates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79db1218-0577-4c2f-b8d7-dfa2b75b8b7a",
										"exec": [
											"var  country_id= pm.environment.get(\"country_id\")",
											"var  countryId= pm.environment.get(\"countryId\")",
											"",
											"if(countryId.length>0)",
											"{",
											"    tests[\"Validating the response for negative scenario of country Id : \" + countryId ]=",
											"        (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"        ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"    ",
											"    postman.setNextRequest(\"getAllStates\");",
											"}",
											"else",
											"{",
											"    pm.environment.clear();",
											"        ",
											"    // 1. JSON schema validation",
											"        ",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"states\"",
											"      ],",
											"      \"properties\": {",
											"        \"states\": {",
											"          \"$id\": \"#/properties/states\",",
											"          \"type\": \"array\",",
											"          \"title\": \"The States Schema\",",
											"          \"items\": {",
											"            \"$id\": \"#/properties/states/items\",",
											"            \"type\": \"object\",",
											"            \"title\": \"The Items Schema\",",
											"            \"required\": [",
											"              \"state_name\",",
											"              \"state_code\",",
											"              \"id\"",
											"            ],",
											"            \"properties\": {",
											"              \"state_name\": {",
											"                \"$id\": \"#/properties/states/items/properties/state_name\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The State_name Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"Andhra Pradesh\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"state_code\": {",
											"                \"$id\": \"#/properties/states/items/properties/state_code\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The State_code Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"AP\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"id\": {",
											"                \"$id\": \"#/properties/states/items/properties/id\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Id Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  1",
											"                ]",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"    ",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++){",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"                } ",
											"           }",
											"    }",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"    ",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"    ",
											"    if (tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var size= pm.response.json().states.length",
											"        ",
											"        // 5. Verify response body contain string",
											"        pm.test(\"JSON response Body contains state: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"state\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains state name: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"state_name\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains state code: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"state_code\");",
											"        });",
											"        ",
											"        ",
											"        //6. JSON value check in reponse body",
											"        // Verify Keys are Not Null",
											"        for(i=0;i<size; i++)",
											"        {",
											"            var jsonData = pm.response.json().states[i]",
											"            tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
											"                jsonData.id !== null && ",
											"                jsonData.id !== ' ' && ",
											"                jsonData.id !== 0;",
											"                ",
											"            tests[\"Validate state_name is not null. Value of state_name is \" + jsonData.state_name] = ",
											"                jsonData.state_name !== null && ",
											"                jsonData.state_name !== ' ' && ",
											"                jsonData.state_name !== 0;",
											"            ",
											"            tests[\"Validate state code is not null. Value of state code is: \" +jsonData.state_code ] = ",
											"                jsonData.state_code !== null && ",
											"                jsonData.state_code !== ' ' && ",
											"                jsonData.state_code !== 0 &&",
											"                jsonData.state_code.length == 2;",
											"        }",
											"    }",
											"    ",
											"    // 7.To print Application content type as JSON",
											"    ",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"    function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa980971-e3e9-4a60-898e-28797c1fe341",
										"exec": [
											"var countryId = pm.environment.get(\"countryId\")",
											"",
											"if(!countryId || countryId==null)",
											"{",
											"    countryId=[\"\",null,\"Str\",8888,1];",
											"}",
											"",
											"currentCountryId=countryId.shift();",
											"pm.environment.set(\"country_id\",currentCountryId);",
											"pm.environment.set(\"countryId\",countryId)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/countries/{{country_id}}/states",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"{{country_id}}",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCurrencyList",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80bffad0-5622-436b-b397-d8a26673aa2b",
										"exec": [
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"currencies\"",
											"  ],",
											"  \"properties\": {",
											"    \"currencies\": {",
											"      \"$id\": \"#/properties/currencies\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Currencies Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/currencies/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"currency_name\",",
											"          \"alpha_code\",",
											"          \"symbol\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"currency_name\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/currency_name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Currency_name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"Indian Rupee\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"alpha_code\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/alpha_code\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Alpha_code Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"INR\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"symbol\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/symbol\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Symbol Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"₹\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"id\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              3",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                }",
											"                    );",
											"        }",
											"       ",
											"       if(errors.length>1)",
											"       {",
											"        for(i=0;i<errors.length;i++){",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                })  ",
											"            } ",
											"        }",
											"    ",
											"}",
											"",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"",
											"if(tv4.validate(pm.response.json(), schema))",
											"{",
											"    var size= pm.response.json().currencies.length",
											"",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"    pm.test(\"JSON response Body contains currencies: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"currencies\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"JSON response Body contains id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"id\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains currency_name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"currency_name\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains alpha code: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"alpha_code\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains symbol: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"symbol\");",
											"    });",
											"",
											"    //6. JSON value check in reponse body",
											"    ",
											"    for (i=0;i<size;i++){",
											"        ",
											"        var jsonData = pm.response.json().currencies[i]",
											"    ",
											"    tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
											"        jsonData.id !== null && ",
											"        jsonData.id !== ' ' && ",
											"        jsonData.id>0;",
											"        ",
											"    tests[\"Validate country name is not null. Value of country name is \" + jsonData.country_name] = ",
											"        jsonData.country_name !== null && ",
											"        jsonData.country_name !== ' ' && ",
											"        jsonData.country_name.length>=3;",
											"    ",
											"    tests[\"Validate alpha_code is not null. Value of alpha_code is: \" +jsonData.alpha_code ] = ",
											"        jsonData.alpha_code == \"INR\" || jsonData.alpha_code == \"USD\" || jsonData.alpha_code == \"AUD\" ",
											"",
											"    tests[\"Validate symbol is not null. Value of symbol is: \" +jsonData.symbol ] = ",
											"        jsonData.symbol !== null && ",
											"        jsonData.symbol !== ' ' && ",
											"        jsonData.symbol == \"₹\"  || jsonData.symbol == \"$\" || jsonData.symbol == \"A$\" ;",
											"    }",
											"}",
											"",
											"// 7. To print Application content type as JSON",
											"",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/currencies",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "getGSTRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "accf9f30-11f4-45d4-ab20-5cc15da54c2e",
										"exec": [
											"var sacCode=pm.environment.get(\"sacCode\");",
											"",
											"if(!sacCode || sacCode==null){",
											"    sacCode=[\"\", null,\"Str\", -1211, 1211, 1.2, 992123 ]",
											"}",
											"",
											"currentSacCode=sacCode.shift();",
											"pm.environment.set(\"sac_code\", currentSacCode)",
											"pm.environment.set(\"sacCode\", sacCode)",
											"",
											"//pm.variables.set('sac_code',\"992123\")",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ecdcaed8-7bc1-41bd-81a6-42d694522af5",
										"exec": [
											"var sacCode= pm.environment.get(\"sacCode\")",
											"var sac_code= pm.environment.get(\"sac_code\")",
											"",
											"if(sacCode.length>0){",
											"   tests[\"Validating the response for negative scenario of sac code : \" + sac_code ]=",
											"        (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"        ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"             ",
											"    postman.setNextRequest(\"getGSTRate\")",
											"}",
											"else{",
											"    pm.environment.clear();",
											"    ",
											"    // 1. JSON schema validation",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"rate\"",
											"      ],",
											"      \"properties\": {",
											"        \"rate\": {",
											"          \"$id\": \"#/properties/rate\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Rate Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            18",
											"          ]",
											"        }",
											"      }",
											"    };",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"    ",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains rate: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"rate\");",
											"        });",
											"        ",
											"    //6. Validation of response data ",
											"    ",
											"         var rate=pm.response.json().rate",
											"             tests[\"Validate rate is not null, blank or 0. For sac_code: \"+sac_code+ \" GST rate equals to : \" + rate]=",
											"                 rate!==\"\" &&",
											"                 rate!==null &&",
											"                 rate>0;",
											"         ",
											"    //7. Verification of content type",
											"    ",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"} ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/gst_rates/{{sac_code}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"gst_rates",
										"{{sac_code}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Invoices",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "createInvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a99094e6-8622-49c5-a494-3b89b49db421",
										"exec": [
											"var companyId=pm.environment.get(\"companyId\")",
											"var companyUserId=pm.environment.get(\"companyUserId\")",
											"var companyGST=pm.environment.get(\"companyGST\")",
											"var currencyCode=pm.environment.get(\"currencyCode\")",
											"var customerId=pm.environment.get(\"customerId\")",
											"var customerGSTIN=pm.environment.get(\"customerGSTIN\")",
											"var contactEmailId=pm.environment.get(\"contactEmailId\")",
											"var cntry=pm.environment.get(\"cntry\")",
											"var states=pm.environment.get(\"states\")",
											"var cities=pm.environment.get(\"cities\")",
											"var zipCode=pm.environment.get(\"zipCode\")",
											"//var subTotl=pm.environment.get(\"subTotl\")",
											"var discountValue=pm.environment.get(\"discountValue\")",
											"var hsnSacCode=pm.environment.get(\"hsnSacCode\")",
											"var gstPercentage=pm.environment.get(\"gstPercentage\")",
											"var invoiceDueOptionId=pm.environment.get(\"invoiceDueOptionId\")",
											"var signatureId=pm.environment.get(\"signatureId\")",
											"var signatoryName=pm.environment.get(\"signatoryName\");",
											"var signatoryDesignation=pm.environment.get(\"signatoryDesignation\");",
											"var companyBankAccountId=pm.environment.get(\"companyBankAccountId\")",
											"var creatorName=pm.environment.get(\"creatorName\");",
											"var customerLegalName=pm.environment.get(\"customerLegalName\");",
											"var itm=pm.environment.get(\"itm\")",
											"var itemPrice=pm.environment.get(\"itemPrice\")",
											"var itemHsnSacCode=pm.environment.get(\"itemHsnSacCode\")",
											"var itemQuantity=pm.environment.get(\"itemQuantity\")",
											"var discounts=pm.environment.get(\"discounts\")",
											"var itemGSTPercentage=pm.environment.get(\"itemGSTPercentage\")",
											"var fileUrl=pm.environment.get(\"fileUrl\")",
											"",
											"if(!companyId || !companyUserId  || !companyGST || !currencyCode || !customerId || !customerGSTIN || !contactEmailId || !cntry || !states || !cities || !zipCode || !discountValue || !hsnSacCode || !gstPercentage  || !invoiceDueOptionId || !signatureId || !signatoryName || !signatoryDesignation || !companyBankAccountId || !creatorName || !customerLegalName || !itm || !itemPrice || !itemHsnSacCode || !itemQuantity || !discounts || !itemGSTPercentage || !fileUrl)",
											"{",
											"    companyId=[\"\", null,\"a\",  1,1,1,  1,1,1,100,1,1];",
											"    companyUserId=[1,1,1,  \"\",null,\"a\", -1,   1,1,1,100,1];",
											"    companyGST=[\"97KMSQS0123QAY7\",\"97KMSQS0123QAY7\",\"97KMSQS0123QAY7\",  \"\",\"a\",\"12312123AAAAAAA\",\"11KMSQS0000QAY7\", \"97KMSQS0123QAY7\",\"97KMSQS0123QAY7\",\"67DMSPS0123QAZ9\",\"67DMSPS0123QAZ9\",\"67DMSPS0123QAZ9\"]",
											"    currencyCode=[\"356\",\"356\",\"356\",  \"\", null, \"a\", \"999\",\"-2\",   \"356\",1,1,1];",
											"    customerId=[1,1,1,   \"\",null,\"a\",-1,  1,1,1,100,1];",
											"    customerGSTIN=[\"57DMSQS0123QAZ7\",\"57DMSQS0123QAZ7\",\"57DMSQS0123QAZ7\",   \"\",\"a\",\"12312123AAAAAAA\",\"11KMSQS0000QAY7\", \"57DMSQS0123QAZ7\",\"57DMSQS0123QAZ7\",\"87DMSPS0123QAZ9\",\"87DMSPS0123QAZ9\",\"87DMSPS0123QAZ9\"];",
											"    contactEmailId=[\"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\",  \"\",null,\"aa.com\",  \"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\",\"NIV@GMAIL.COM\"];",
											"    cntry=[1, 1, 1,  \"\", null, \"a\",  -1, 0.1, 19999, 1, 1, 1];",
											"    states=[\"1\",\"1\",\"1\",  \"\",null,\"a\",  \"1\",\"1\",\"1\",\"1\",\"1000\",\"1\"];",
											"    cities=[\"MUMBAI\",\"MUMBAI\",\"MUMBAI\",  \"\",null,\"a\",  \"MUMBAI\",\"MUMBAI\",\"MUMBAI\",\"@@\",\"abc\",\"MUMBAI\"];",
											"    zipCode=[\"400005\",\"400005\",\"400005\"  , \"\", null, \"a\",\"AAAAAA\", \"400005123112\",\"400005\",\"400005\",\"400005\",\"400005\"];",
											"    discountValue=[50,50,50,  \"\", null, \"a\",-1,  50,50,50,5000,50];",
											"    hsnSacCode=[\"989894\",\"989894\",\"989894\",  \"\",null,\"a\",\"123456\",\"123\",   \"989894\",\"989894\",   \"9898942323\",\"989894\"];",
											"    gstPercentage=[12.5,12.5,12.5,  \"\",null,\"a\",100,-2.5,  12.5,0.2,  125,12.5];",
											"    invoiceDueOptionId=[2,2,2, \"\",null,\"a\",200,-2,0.2,2,2,2];",
											"    signatureId=[1,1,1,  \"\",null,\"a\",1,-1,   1,1,   100,1];",
											"    signatoryName=[\"ZEE\",\"ZEE\",\"ZEE\",\"\",null,\"a\",1,\"@\",\"ZEE\",\"ZEE\",\"ZEE\",\"ZEE\"];",
											"    signatoryDesignation=[\"ADMIN\",\"ADMIN\",\"ADMIN\",\"\",null,\"a\",1,\"@\",\"ADMIN\",\"ADMIN\",\"ADMIN\",\"ADMIN\"];",
											"    companyBankAccountId=[1,1,1,  \"\",null,\"a\",1,-1,  1,1,  100,1];",
											"    creatorName=[\"Zeeshan Keval\",\"Zeeshan Keval\",\"Zeeshan Keval\",\"\",null,\"a\",1,\"@\",\"Zeeshan Keval\",\"Zeeshan Keval\",\"Zeeshan Keval\",\"Zeeshan Keval\"];",
											"    customerLegalName=[\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\",\"\",null,\"a\",1,\"@\",\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\"];",
											"    itm=[\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",  \"\",null,   \"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\"];",
											"    itemPrice=[10000,10000,10000,  \"\",null,\"a\",10000,-1, 10000, 10000, 10000, 10000];",
											"    itemHsnSacCode=[123456,123456,123456, \"\",null,\"a\",999999, -1, 123456, 123456, 123456, 123456];",
											"    itemQuantity=[10,10,10,  \"\",null,\"a\", 0.5,-1,   10,10,   10,10 ];",
											"    discounts=[1000,1000,1000,  \"\",null,\"a\",0.00005,-1,   1000,1000,   1000,1000];",
											"    itemGSTPercentage=[18.5,18.5,18.5,  \"\",null,\"a\",0.005,-1,   18.5,18.5,   185,18.5];",
											"    fileUrl=[ \"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",  \"\",null,\"any String\", \"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\"];",
											"}",
											"",
											"currentCompanyId=companyId.shift();",
											"pm.environment.set(\"company_Id\",currentCompanyId);",
											"pm.environment.set(\"companyId\",companyId);",
											"",
											"currentCompanyUserId=companyUserId.shift();",
											"pm.environment.set(\"company_user_id\",currentCompanyUserId);",
											"pm.environment.set(\"companyUserId\",companyUserId);",
											"",
											"currentCompanyGST=companyGST.shift();",
											"pm.environment.set(\"company_gst\",currentCompanyGST);",
											"pm.environment.set(\"companyGST\",companyGST);",
											"",
											"currentinvoiceDueOptionId=invoiceDueOptionId.shift();",
											"pm.environment.set(\"invoice_due_option_id\",currentinvoiceDueOptionId);",
											"pm.environment.set(\"invoiceDueOptionId\",invoiceDueOptionId);",
											"",
											"",
											"currentCurrencyCode=currencyCode.shift();",
											"pm.environment.set(\"currency_code\",currentCurrencyCode);",
											"pm.environment.set(\"currencyCode\",currencyCode);",
											"",
											"",
											"currentCustomerId=customerId.shift();",
											"pm.environment.set(\"customer_id\",currentCustomerId);",
											"pm.environment.set(\"customerId\",customerId);",
											"",
											"currentCustomerGSTIN=customerGSTIN.shift();",
											"pm.environment.set(\"customer_gstin\",currentCustomerGSTIN);",
											"pm.environment.set(\"customerGSTIN\",customerGSTIN);",
											"",
											"currentContactEmailId=contactEmailId.shift();",
											"pm.environment.set(\"contact_email_id\",currentContactEmailId);",
											"pm.environment.set(\"contactEmailId\",contactEmailId);",
											"",
											"currentCountry=cntry.shift();",
											"pm.environment.set(\"country_id\",currentCountry);",
											"pm.environment.set(\"cntry\",cntry);",
											"",
											"currentState=states.shift();",
											"pm.environment.set(\"state_id\",currentState);",
											"pm.environment.set(\"states\",states);",
											"",
											"currentCity=cities.shift();",
											"pm.environment.set(\"city\",currentCity);",
											"pm.environment.set(\"cities\",cities);",
											"",
											"currentZipCode=zipCode.shift();",
											"pm.environment.set(\"zip_code\",currentZipCode);",
											"pm.environment.set(\"zipCode\",zipCode);",
											"",
											"currentDiscountValue=discountValue.shift();",
											"pm.environment.set(\"discount_value\",currentDiscountValue);",
											"pm.environment.set(\"discountValue\",discountValue);",
											"",
											"currentHSNSacCode=hsnSacCode.shift();",
											"pm.environment.set(\"hsn_sac_code\",currentHSNSacCode);",
											"pm.environment.set(\"hsnSacCode\",hsnSacCode);",
											"",
											"currentGSTPercentage=gstPercentage.shift();",
											"pm.environment.set(\"gst_percentage\",currentGSTPercentage);",
											"pm.environment.set(\"gstPercentage\",gstPercentage);",
											"",
											"currentSignatureId=signatureId.shift();",
											"pm.environment.set(\"signature_id\",currentSignatureId);",
											"pm.environment.set(\"signatureId\",signatureId);",
											"",
											"currentSignatoryName=signatoryName.shift();",
											"pm.environment.set(\"signatory_name\",currentSignatoryName);",
											"pm.environment.set(\"signatoryName\",signatoryName);",
											"",
											"currentSignatoryDesignation=signatoryDesignation.shift();",
											"pm.environment.set(\"signatoryDesignation\",signatoryDesignation);",
											"pm.environment.set(\"signatory_designation\",currentSignatoryDesignation);",
											"",
											"currentCompanyBankAccountId=companyBankAccountId.shift();",
											"pm.environment.set(\"company_bank_account_id\",currentCompanyBankAccountId);",
											"pm.environment.set(\"companyBankAccountId\",companyBankAccountId);",
											"",
											"currentCreatorName=creatorName.shift();",
											"pm.environment.set(\"creatorName\",creatorName);",
											"pm.environment.set(\"creator_name\",currentCreatorName);",
											"",
											"currentCustomerLegalName=customerLegalName.shift();",
											"pm.environment.set(\"customer_legal_name\",currentCustomerLegalName);",
											"pm.environment.set(\"customerLegalName\",customerLegalName);",
											"",
											"currentItem=itm.shift();",
											"pm.environment.set(\"items_item\",currentItem);",
											"pm.environment.set(\"itm\",itm);",
											"",
											"currentItemPrice=itemPrice.shift();",
											"pm.environment.set(\"items_price\",currentItemPrice);",
											"pm.environment.set(\"itemPrice\",itemPrice);",
											"",
											"currentItemHsnSacCode=itemHsnSacCode.shift();",
											"pm.environment.set(\"items_hsn_sac_code\",currentItemHsnSacCode);",
											"pm.environment.set(\"itemHsnSacCode\",itemHsnSacCode);",
											"",
											"currentItemQuantity=itemQuantity.shift();",
											"pm.environment.set(\"quantity\",currentItemQuantity);",
											"pm.environment.set(\"itemQuantity\",itemQuantity);",
											"",
											"currentDiscounts=discounts.shift();",
											"pm.environment.set(\"items_discount\",currentDiscounts);",
											"pm.environment.set(\"discounts\",discounts);",
											"",
											"currentItemGSTPercentage=itemGSTPercentage.shift();",
											"pm.environment.set(\"items_gst_percentage\",currentItemGSTPercentage);",
											"pm.environment.set(\"itemGSTPercentage\",itemGSTPercentage);",
											"",
											"currentFileUrl=fileUrl.shift();",
											"pm.environment.set(\"file_url\",currentFileUrl);",
											"pm.environment.set(\"fileUrl\",fileUrl);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c11911f-9ee5-4b21-8300-63e2fa53f872",
										"exec": [
											"var companyId= pm.environment.get(\"companyId\")",
											"var company_Id= pm.environment.get(\"company_Id\")",
											"",
											"if(companyId.length>0){",
											"   tests[\"Validating the response for negative scenario of company Id : \" + company_Id ]=",
											"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"             ((pm.response.json().error ==\"Unprocessable Entity\") ||(pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\") || (pm.response.json().error==\"Forbidden\")) &&",
											"             ((pm.response.json().message==\"Unprocessable Entity\") || (pm.response.json().message==\"Not Found\") || (pm.response.json().message==\"Bad Request\") || (pm.response.json().message==\"Forbidden\"))",
											"    postman.setNextRequest(\"createInvoice\")",
											"}",
											"else{",
											"",
											"    pm.environment.clear();",
											"    ",
											"    // 1. JSON schema validation",
											"    var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"invoice\"",
											"  ],",
											"  \"properties\": {",
											"    \"invoice\": {",
											"      \"$id\": \"#/properties/invoice\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Invoice Schema\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"invoice_nbr\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"$id\": \"#/properties/invoice/properties/id\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Id Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            10",
											"          ]",
											"        },",
											"        \"invoice_nbr\": {",
											"          \"$id\": \"#/properties/invoice/properties/invoice_nbr\",",
											"          \"type\": \"string\",",
											"          \"title\": \"The Invoice_nbr Schema\",",
											"          \"default\": \"\",",
											"          \"examples\": [",
											"            \"DRAFT_INV_LA_1\"",
											"          ],",
											"          \"pattern\": \"^(.*)$\"",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(201);",
											"        pm.response.to.be.success;",
											"    });",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"    ",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"        ",
											"        pm.test(\"JSON response Body contains invoice: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"invoice\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains invoice_nbr: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
											"        });",
											"        ",
											"       ",
											"    //6. Validation of response data ",
											"    ",
											"         var invoiceJson=pm.response.json().invoice",
											"         ",
											"             tests[\"Validate id is not null, blank or 0. Value of id is : \" + invoiceJson.id]=",
											"                 invoiceJson.id!==\"\" &&",
											"                 invoiceJson.id!==null &&",
											"                 invoiceJson.id>0;",
											"             ",
											"            tests[\"Validate invoice_nbr is not null, blank or 0. Value of invoice_nbr is : \" + invoiceJson.invoice_nbr]=",
											"                 invoiceJson.invoice_nbr!==\"\" &&",
											"                 invoiceJson.invoice_nbr!==null &&",
											"                 invoiceJson.invoice_nbr.includes(\"DRAFT_INV_LA_\");",
											"                 ",
											"           ",
											"    //7. Verification of content type",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"} ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"company_user_id\": \"{{company_user_id}}\",\n  \"company_gst\": \"{{company_gst}}\",\n  \"currency_code\": \"{{currency_code}}\",\n  \"customer_id\": \"{{customer_id}}\",\n  \"bill_to\": \"SRVT\",\n  \"customer_gstin\": \"{{customer_gstin}}\",\n  \"contact_person\": \"Niv\",\n  \"contact_email_id\": \"{{contact_email_id}}\",\n  \"country_id\": \"{{country_id}}\",\n  \"address\": \"Design Capital\",\n  \"state_id\": \"{{state_id}}\",\n  \"city\": \"{{city}}\",\n  \"zip_code\": \"{{zip_code}}\",\n  \"discount_value\": \"{{discount_value}}\",\n  \"hsn_sac_code\": \"{{hsn_sac_code}}\",\n  \"gst_percentage\": \"{{gst_percentage}}\",\n  \"invoice_due_option_id\": \"{{invoice_due_option_id}}\",\n  \"notes\": \"Hello, this is my first invoice.\",\n  \"references_notes\": \"REF ID 123\",\n  \"signature_id\": \"{{signature_id}}\",\n  \"signatory_name\": \"{{signatory_name}}\",\n  \"signatory_designation\": \"{{signatory_designation}}\",\n  \"company_bank_account_id\": \"{{company_bank_account_id}}\",\n  \"creator_name\": \"{{creator_name}}\",\n  \"customer_legal_name\": \"{{customer_legal_name}}\",\n  \"items\": [\n    {\n      \"item\": \"SWX Renewal\",\n      \"price\": \"{{items_price}}\",\n      \"hsn_sac_code\": \"{{items_hsn_sac_code}}\",\n      \"quantity\": \"{{quantity}}\",\n      \"discount\": \"{{items_discount}}\",\n      \"gst_percentage\": \"{{items_gst_percentage}}\"\n    }\n  ],\n  \"attachments\": [\n    {\n      \"file_url\": \"{{file_url}}\"\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{company_Id}}/invoices",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{company_Id}}",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "addInvoicePayment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0fc64bc-b25c-4120-9b2e-c7e0538c6492",
										"exec": [
											"var companyId=pm.environment.get(\"companyId\")",
											"var invoiceId=pm.environment.get(\"invoiceId\")",
											"var customerId=pm.environment.get(\"customerId\")",
											"var paymentAmount=pm.environment.get(\"paymentAmount\")",
											"",
											"if(!companyId || !invoiceId || !customerId || !paymentAmount){",
											"    companyId=[\"\",null,\"a\", 1,1,1,1 ];",
											"    invoiceId=[\"\",null,\"a\", 1,1,1,1 ];",
											"    customerId=[1,1,1, \"\",null,\"a\", 1];",
											"    paymentAmount=[1,1,1, \"\",null,\"a\",599];",
											"}",
											"",
											"currentcompanyId=companyId.shift();",
											"pm.environment.set(\"company_id\",currentcompanyId);",
											"pm.environment.set(\"companyId\",companyId);",
											"",
											"currentinvoiceId=invoiceId.shift();",
											"pm.environment.set(\"invoice_id\",currentinvoiceId);",
											"pm.environment.set(\"invoiceId\",invoiceId);",
											"",
											"currentcustomerId=customerId.shift();",
											"pm.environment.set(\"customer_id\",currentcustomerId);",
											"pm.environment.set(\"customerId\",customerId);",
											"",
											"currentpaymentAmount=paymentAmount.shift();",
											"pm.environment.set(\"amount\",currentpaymentAmount);",
											"pm.environment.set(\"paymentAmount\",paymentAmount);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "984acdf2-cfd0-4c40-944f-0be109cce775",
										"exec": [
											"var company_id=pm.environment.get(\"company_id\");",
											"var invoice_id=pm.environment.get(\"invoice_id\");",
											"var customer_id=pm.environment.get(\"customer_id\");",
											"var paymentAmount=pm.environment.get(\"paymentAmount\");",
											"",
											"if(paymentAmount.length>0){",
											"   tests[\"Validating the response for negative scenario of company_id: \" + company_id + \" invoice_id \" + invoice_id +\" customer_id \" +customer_id]=",
											"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"     ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"     ((pm.response.json().message==\"Unprocessable Entity\") || (pm.response.json().message==\"Not Found\") || (pm.response.json().message==\"Bad Request\") ) ;",
											"    ",
											"    postman.setNextRequest(\"addInvoicePayment\");",
											"    ",
											"}",
											"else{",
											"    pm.environment.clear();",
											"    ",
											"    // 1. JSON schema validation",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"payment\"",
											"      ],",
											"      \"properties\": {",
											"        \"payment\": {",
											"          \"$id\": \"#/properties/payment\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Payment Schema\",",
											"          \"required\": [",
											"            \"id\"",
											"          ],",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"$id\": \"#/properties/payment/properties/id\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Id Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                15",
											"              ]",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"    }",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(201);",
											"        pm.response.to.be.success;",
											"    });",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"    pm.test(\"JSON response Body contains payment: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"payment\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"id\");",
											"    });",
											"    ",
											"    //6. Validation of response data ",
											"    var Json=pm.response.json().payment",
											"         ",
											"    tests[\"Validate id is not null, blank or 0. Value of id is : \" + Json.id]=",
											"         Json.id!==\"\" &&",
											"         Json.id!==null &&",
											"         Json.id>0;",
											"           ",
											"    //7. Verification of content type",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customer_id\": \"{{customer_id}}\",\n  \"amount\": \"{{amount}}\"\n}"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{company_id}}/invoices/{{invoice_id}}/payments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{company_id}}",
										"invoices",
										"{{invoice_id}}",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "updateInvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "965d1246-0373-404b-936d-d1628eceec88",
										"exec": [
											"var companyId=pm.environment.get(\"companyId\");",
											"var invoiceId=pm.environment.get(\"invoiceId\");",
											"",
											"var companyUserId=pm.environment.get(\"companyUserId\");",
											"",
											"var company_gst=pm.environment.get(\"company_gst\");",
											"var currency_code_id=pm.environment.get(\"currency_code_id\");",
											"var item_selection=pm.environment.get(\"item_selection\");",
											"var bill_to=pm.environment.get(\"bill_to\");",
											"var customer_gstin=pm.environment.get(\"customer_gstin\");",
											"var contact_person=pm.environment.get(\"contact_person\");",
											"var contact_email_id=pm.environment.get(\"contact_email_id\");",
											"var country_id=pm.environment.get(\"country_id\");",
											"var address=pm.environment.get(\"address\");",
											"var state_id=pm.environment.get(\"state_id\");",
											"var city=pm.environment.get(\"city\");",
											"var zip_code=pm.environment.get(\"zip_code\");",
											"var discount_value=pm.environment.get(\"discount_value\");",
											"var hsn_sac_code=pm.environment.get(\"hsn_sac_code\");",
											"var gst_percentage=pm.environment.get(\"gst_percentage\");",
											"var invoice_due_option_id=pm.environment.get(\"invoice_due_option_id\");",
											"var notes=pm.environment.get(\"notes\");",
											"var references_notes=pm.environment.get(\"references_notes\");",
											"var signature_id=pm.environment.get(\"signature_id\");",
											"var signatory_name=pm.environment.get(\"signatory_name\");",
											"var signatory_designation=pm.environment.get(\"signatory_designation\");",
											"var company_bank_account_id=pm.environment.get(\"company_bank_account_id\");",
											"var creator_name=pm.environment.get(\"creator_name\");",
											"var customer_legal_name=pm.environment.get(\"customer_legal_name\");",
											"var items_id=pm.environment.get(\"items_id\");",
											"var item=pm.environment.get(\"item\");",
											"var price=pm.environment.get(\"price\");",
											"var items_hsn_sac_code=pm.environment.get(\"items_hsn_sac_code\");",
											"var quantity=pm.environment.get(\"quantity\");",
											"var discount=pm.environment.get(\"discount\");",
											"var gst_percentage=pm.environment.get(\"gst_percentage\");",
											"var attachment_id=pm.environment.get(\"attachment_id\");",
											"var file_url=pm.environment.get(\"file_url\");",
											"",
											"if(!companyId || !invoiceId || !companyUserId || !company_gst || !currency_code_id || !item_selection || !bill_to || !customer_gstin || !contact_person || !contact_email_id || !country_id || !address || !state_id || !city || !zip_code || !discount_value || !hsn_sac_code || !gst_percentage || !invoice_due_option_id || !notes || !references_notes || !signature_id || !signatory_name || !signatory_designation || !company_bank_account_id || !creator_name  || !customer_legal_name  || !items_id  || !item  || !price  || !items_hsn_sac_code  || !quantity  || !discount  || !gst_percentage  || !attachment_id  || !file_url){",
											"    ",
											"    companyId=[\"\",null,\"a\",-1,1000,0.1,1,1,1];",
											"    invoiceId =[1,null,\"a\",-1,1000,10];",
											"    companyUserId=[1,null,\"a\",-1,1000,0.1 ,1 ];",
											"    company_gst =[\"67DMSPS0123QAZ9\",\"67DMSPS0123QAZ9\",\"67DMSPS0123QAZ9\",\"\",null,\"a\",\"11DMSPS0000QAZ9\",\"67D\",\"67DMSPS0123QAZ91111\",\"67DMSPS0123QAZ9\"   ]",
											"    currency_code_id =[1,1,1,\"\",null,\"a\" ,1,1, -1,1000 ]",
											"    item_selection =[\"basic\",\"basic\",\"basic\",\"\",null,\"a\" , \"@#\" ,\"basic\",\"basic\",\"basic\",\"basic\",\"basic\"     ]",
											"    bill_to =[\"SRVT\",\"SRVT\",\"SRVT\",\"\",null,\"a\"     ]",
											"    customer_gstin =[\"87DMSPS0123QAZ9\",\"87DMSPS0123QAZ9\",\"87DMSPS0123QAZ9\",\"\",null,\"a\"     ]",
											"    contact_person =[\"VIDD\",\"VIDD\",\"VIDD\",\"\",null,\"a\"      ]",
											"    contact_email_id =[\"VIDD@GMAIL.COM\",\"VIDD@GMAIL.COM\",\"VIDD@GMAIL.COM\",\"\",null,\"a\"     ]",
											"    country_id =[1,1,1,\"\",null,\"a\" , -1, 1000    ]",
											"    address =[\"COLABA MARKET, MUMBAI\",\"COLABA MARKET, MUMBAI\",\"COLABA MARKET, MUMBAI\",\"\",null,\"a\"   ]",
											"    state_id =[1,1,1,\"\",null,\"a\" ,-1, 1000    ]",
											"    city =[\"MUMBAI\",\"MUMBAI\",\"MUMBAI\",\"\",null,\"a\"     ]",
											"    zip_code=[\"400005\",\"400005\",\"400005\",\"\",null,\"a\" ,-1,\"12\"   ]",
											"    discount_value =[50,50,50,\"\",null,\"a\" ,-1    ]",
											"    hsn_sac_code =[\"989894\",\"989894\",\"989894\",\"\",null,\"a\" , -1, 1000    ]",
											"    gst_percentage =[12.5,12.5,12.5,\"\",null,\"a\" ,-1 ,120    ]",
											"    invoice_due_option_id =[2,2,2,\"\",null,\"a\" , -1, 1000    ]",
											"    notes =[\"Hello,my first invoice.\",\"Hello,my first invoice.\",\"Hello,my first invoice.\",\"\",null,\"a\"   ]",
											"    references_notes =[\"REF ID 123\",\"REF ID 123\",\"REF ID 123\",\"\",null,\"a\"   ]",
											"    signature_id =[1,1,1,\"\",null,\"a\" ,-1,1000   ]",
											"    signatory_name =[\"ZEE\",\"ZEE\",\"ZEE\",\"\",null,\"a\"    ]",
											"    signatory_designation =[\"ADMIN\",\"ADMIN\",\"ADMIN\",\"\",null,\"a\"     ]",
											"    company_bank_account_id =[1,1,1,\"\",null,\"a\",-1,1000   ]",
											"    creator_name  =[\"Zeeshan Keval\",\"Zeeshan Keval\",\"Zeeshan Keval\",\"\",null,\"a\"     ]",
											"    customer_legal_name  =[\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\",\"Sarvatra Technology Pvt Ltd\",\"\",null,\"a\"     ]",
											"    items_id  =[1,1,1,\"\",null,\"a\",-1,1000     ]",
											"    item  =[\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"\",null,\"a\"    ]",
											"    price  =[10000,10000,10000,\"\",null,\"a\"       ]",
											"    items_hsn_sac_code  =[123456,123456,123456,\"\",null,\"a\",-1,1000    ]",
											"    quantity  =[10,10,10,\"\",null,\"a\",-1   ]",
											"    discount =[1000,1000,1000,\"\",null,\"a\"    ]",
											"    gst_percentage  =[18.5,18.5,18.5,\"\",null,\"a\",-1,120   ]",
											"    attachment_id  =[1,1,1,\"\",null,\"a\",-1,1000  ]",
											"    file_url=[\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"\",null,\"a\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\",\"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\"   ]",
											"    console.log(\"Before picking value from if \\n companyId : \" +companyId + \" invoiceId: \"+ invoiceId+ \" companyUserId: \"+ companyUserId)",
											"}",
											"else{",
											"    console.log(\"else block\")",
											"}",
											"",
											"console.log(\"companyId : \" + companyId)",
											"currentCompanyId=companyId.shift();",
											"console.log(\"companyId : \" + companyId)",
											"",
											"currentInvoiceId=invoiceId.shift();",
											"currentCompanyUserId=companyUserId.shift();",
											"//      currentCompanyGST=companyGST.shift();",
											"",
											"pm.environment.set(\"company_id\",currentCompanyId);",
											"pm.environment.set(\"companyId\",companyId);",
											"",
											"pm.environment.set(\"invoice_id\",currentInvoiceId);",
											"pm.environment.set(\"invoiceId\",invoiceId);",
											"",
											"pm.environment.set(\"company_user_id\",currentCompanyUserId);",
											"pm.environment.set(\"companyUserId\",companyUserId);",
											"",
											"console.log(\"Pre request Script ### \\n currentCompanyId: \" +currentCompanyId + \"\\n\"+\"currentInvoiceId: \" +currentInvoiceId + \"\\n\"+\"currentCompanyUserId: \" + currentCompanyUserId)",
											"",
											"console.log(\"Pre request Script ### \\ncompanyId: \" +companyId + \"\\n\"+\"invoiceId: \" +invoiceId + \"\\n\"+\"companyUserId: \" + companyUserId)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "428a9169-d6e6-419e-9cc6-aa1efe76bc67",
										"exec": [
											"var companyId=pm.environment.get(\"companyId\");",
											"var invoiceId=pm.environment.get(\"invoiceId\");",
											"var companyUserId=pm.environment.get(\"companyUserId\");",
											"",
											"console.log(\"Test Script -  ##### \\ncompanyId: \" +companyId + \"\\n\"+\"invoiceId: \" +invoiceId + \"\\n\"+\"companyUserId: \" + companyUserId)",
											"",
											"if(companyId.length>0 || invoiceId.length>0 || companyUserId.length>0){",
											"    console.log(\"+++++++++++++++++++++++++++++++++++++++++++++++\");",
											"    postman.setNextRequest(\"updateInvoice\");",
											"    console.log(\"+++++++++++++++++++++++++++++++++++++++++++\");",
											"    ",
											"}",
											"else{",
											"    console.log(\"********************\")",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"company_user_id\": {{company_user_id}},\n  \"company_gst\": \"67DMSPS0123QAZ9\",\n  \"currency_code_id\": 1,\n  \"item_selection\": \"basic\",\n  \"customer_id\": 1,\n  \"bill_to\": \"SRVT\",\n  \"customer_gstin\": \"87DMSPS0123QAZ9\",\n  \"contact_person\": \"VIDD\",\n  \"contact_email_id\": \"VIDD@GMAIL.COM\",\n  \"country_id\": 1,\n  \"address\": \"COLABA MARKET, MUMBAI\",\n  \"state_id\": 1,\n  \"city\": \"MUMBAI\",\n  \"zip_code\": \"400005\",\n  \"discount_value\": 50,\n  \"hsn_sac_code\": \"989894\",\n  \"gst_percentage\": 12.5,\n  \"invoice_due_option_id\": 2,\n  \"notes\": \"Hello, this is my first invoice.\",\n  \"references_notes\": \"REF ID 123\",\n  \"signature_id\": 1,\n  \"signatory_name\": \"ZEE\",\n  \"signatory_designation\": \"ADMIN\",\n  \"company_bank_account_id\": 1,\n  \"creator_name\": \"Zeeshan Keval\",\n  \"customer_legal_name\": \"Sarvatra Technology Pvt Ltd\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"item\": \"SWX Renewal\",\n      \"price\": 10000,\n      \"hsn_sac_code\": 123456,\n      \"quantity\": 10,\n      \"discount\": 1000,\n      \"gst_percentage\": 18.5\n    }\n  ],\n  \"attachments\": [\n    {\n      \"id\": 1,\n      \"file_url\": \"http://localhost:3000/doc/static/index.html#/Invoices_brochure.pdf\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{company_id}}/invoices/{{invoice_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{company_id}}",
										"invoices",
										"{{invoice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateInvoiceTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2727a12-1514-4adc-9e81-a46ee46b0365",
										"exec": [
											"",
											"",
											"// All the Ids in request body",
											"",
											"var companyId=pm.environment.get(\"companyId\");",
											"var invoiceId=pm.environment.get(\"invoiceId\");",
											"var companyUserId=pm.environment.get(\"companyUserId\");",
											"var currencyCodeId=pm.environment.get(\"currencyCodeId\");",
											"var customerId=pm.environment.get(\"customerId\");",
											"var countryId=pm.environment.get(\"countryId\");",
											"var stateId=pm.environment.get(\"stateId\");",
											"var invoiceDueOptionId=pm.environment.get(\"invoiceDueOptionId\");",
											"var signatureId=pm.environment.get(\"signatureId\");",
											"var companyBankAccountId=pm.environment.get(\"companyBankAccountId\");",
											"var itemId=pm.environment.get(\"itemId\");",
											"var attachmentId=pm.environment.get(\"attachmentId\");",
											"",
											"var negativeIds=[\"\",null,\"a\",0,-1,0.1,99999];",
											"var negativeGSTs=[\"\",null,\"123as\",\"123456789012345\",\"abcdefghijklmno\",\"284HSAHSGSGGGSG\",\"00ABABA123AAA0\"];",
											"var negativeFixedValueStrings=[null,\"abc\",\"@@\"]",
											"var negativeEmails=[null,\"abc\",\"@.com\",\"a@b.com.com\"];",
											"var negativeNumbers=[null,\"a\",-1,0.1,1111];",
											"var negativePrices=[\"\",null,\"a\",-1];",
											"",
											"ids=[\"companyId\",\"invoiceId\", \"companyUserId\", \"currencyCodeId\",\"customerId\",\"countryId\",\"stateId\",\"invoiceDueOptionId\",\"signatureId\",\"companyBankAccountId\",\"itemId\",\"attachmentId\"];",
											"gSTs=[\"company_gst\", \"customer_gstin\"];",
											"fixedValueStrings=[\"item_selection\",  \"city\", \"items_item\"];",
											"//strings=[\"bill_to\",\"contact_person\",\"address\",\"signatory_name\", \"signatory_designation\",\"creator_name\", \"customer_legal_name\"]",
											"emails= [\"contact_email_id\"];",
											"numbers=[\"zip_code\",\"hsn_sac_code\", \"items_hsn_sac_code\"]    ",
											"prices=[\"discount_value\", \"gst_percentage\", \"items_price\", \"items_quantity\", \"items_discount\", \"items_gst_percentage\"]",
											"",
											"type=[\"ids\",\"gSTs\",\"fixedValueStrings\",\"strings\",\"emails\",\"numbers\",\"price\"];",
											"",
											"",
											"if(!companyId || !invoiceId  || !companyUserId  || !currencyCodeId )",
											"{",
											"    companyId=[];",
											"    invoiceId=[];",
											"    companyUserId=[];",
											"    currencyCodeId=[];",
											"    customerId=[];",
											"    countryId=[];",
											"    stateId=[];",
											"    invoiceDueOptionId=[];",
											"    signatureId=[];",
											"    companyBankAccountId=[];",
											"    itemId=[];",
											"    attachmentId=[];",
											"    ",
											"    ids=[\"companyId\",\"invoiceId\", \"companyUserId\", \"currencyCodeId\",\"customerId\",\"countryId\",\"stateId\",\"invoiceDueOptionId\",\"signatureId\",\"companyBankAccountId\",\"itemId\",\"attachmentId\"];",
											"    noofIds=ids.length;",
											"    ",
											"    var size=negativeIds.length",
											"    companyId=negativeIds;",
											"    ",
											"    for(j=0;j<=noofIds*size;j++){",
											"        companyId=companyId.concat(1)",
											"    ",
											"        if(j==size){",
											"           invoiceId=invoiceId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            invoiceId=invoiceId.concat(10);",
											"        }",
											"        if(j==2*size)",
											"        {",
											"           companyUserId=companyUserId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            companyUserId=companyUserId.concat(1)",
											"        }",
											"        if(j==3*size)",
											"        {",
											"           currencyCodeId=currencyCodeId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            currencyCodeId=currencyCodeId.concat(1)",
											"        }",
											"        if(j==4*size)",
											"        {",
											"           customerId=customerId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            customerId=customerId.concat(1)",
											"        }",
											"        if(j==5*size)",
											"        {",
											"           countryId=countryId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            countryId=countryId.concat(1)",
											"        }",
											"        if(j==6*size)",
											"        {",
											"           stateId=stateId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            stateId=stateId.concat(1)",
											"        }",
											"        if(j==7*size)",
											"        {",
											"           invoiceDueOptionId=invoiceDueOptionId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            invoiceDueOptionId=invoiceDueOptionId.concat(1)",
											"        }",
											"        if(j==8*size)",
											"        {",
											"           signatureId=signatureId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            signatureId=signatureId.concat(1)",
											"        }",
											"        if(j==9*size)",
											"        {",
											"           companyBankAccountId=companyBankAccountId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            companyBankAccountId=companyBankAccountId.concat(1)",
											"        }",
											"        if(j==10*size)",
											"        {",
											"           itemId=itemId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            itemId=itemId.concat(1)",
											"        }",
											"        if(j==11*size)",
											"        {",
											"           attachmentId=attachmentId.concat(negativeIds) ",
											"        }",
											"        else{",
											"            attachmentId=attachmentId.concat(1)",
											"        }",
											"    }",
											"     console.log(\"companyId : \"  + companyId +\"\\n\" +\"invoiceId : \"  + invoiceId +\"\\n\" +\"companyUserId : \"  + companyUserId +\"\\n\")",
											"}",
											"",
											"currentCompanyId=companyId.shift();",
											"pm.environment.set(\"company_Id\",currentCompanyId);",
											"pm.environment.set(\"companyId\",companyId);",
											"",
											"currentCompanyUserId=companyUserId.shift();",
											"pm.environment.set(\"company_user_id\",currentCompanyUserId);",
											"pm.environment.set(\"companyUserId\",companyUserId);",
											"",
											"currentInvoiceId=invoiceId.shift();",
											"pm.environment.set(\"invoice_id\",currentInvoiceId);",
											"pm.environment.set(\"invoiceId\",invoiceId);",
											"",
											"currentCurrencyCodeId=currencyCodeId.shift();",
											"pm.environment.set(\"currency_code_id\",currentCurrencyCodeId);",
											"pm.environment.set(\"currencyCodeId\",currencyCodeId);",
											"",
											"currentCustomerId=customerId.shift();",
											"pm.environment.set(\"customer_id\",currentCustomerId);",
											"pm.environment.set(\"customerId\",customerId);",
											"",
											"currentCountryId=countryId.shift();",
											"pm.environment.set(\"country_id\",currentCountryId);",
											"pm.environment.set(\"countryId\",countryId);",
											"",
											"currentStateId=stateId.shift();",
											"pm.environment.set(\"state_id\",currentStateId);",
											"pm.environment.set(\"stateId\",stateId);",
											"",
											"currentInvoiceDueOptionId=invoiceDueOptionId.shift();",
											"pm.environment.set(\"invoice_due_option_id\",currentInvoiceDueOptionId);",
											"pm.environment.set(\"invoiceDueOptionId\",invoiceDueOptionId);",
											"",
											"currentSignatureId=signatureId.shift();",
											"pm.environment.set(\"signature_id\",currentSignatureId);",
											"pm.environment.set(\"signatureId\",signatureId);",
											"",
											"currentCompanyBankAccountId=companyBankAccountId.shift();",
											"pm.environment.set(\"company_bank_account_id\",currentCompanyBankAccountId);",
											"pm.environment.set(\"companyBankAccountId\",companyBankAccountId);  ",
											"",
											"currentItemId=itemId.shift();",
											"pm.environment.set(\"items_id\",currentItemId);",
											"pm.environment.set(\"itemId\",itemId);",
											"",
											"currentAttachmentId=attachmentId.shift();",
											"pm.environment.set(\"attachments_id\",currentAttachmentId);",
											"pm.environment.set(\"attachmentId\",attachmentId);",
											"",
											"/*",
											"var company_Id= pm.environment.get(\"company_Id\");",
											"var invoice_id= pm.environment.get(\"invoice_id\");",
											"var company_user_id= pm.environment.get(\"company_user_id\");",
											"",
											"*/",
											"",
											"// GST values in request body",
											"var companyGst=pm.environment.get(\"companyGst\");",
											"var customerGstin=pm.environment.get(\"customerGstin\")",
											"",
											"if (!companyGst || !customerGstin){",
											"    companyGst=[\"\",null,\"123456789012345\",\"abcdefghijklmno\",\"284HSAHSGSGGGSG\",\"00ABABA123AAA0\",\"67DMSPS0123QAZ9\"];",
											"    customerGstin=[\"\",null,\"123456789012345\",\"abcdefghijklmno\",\"284HSAHSGSGGGSG\",\"00ABABA123AAA0\",\"87DMSPS0123QAZ9\"];",
											"}",
											"",
											"jsonBody={",
											"  \"company_user_id\": 1,",
											"  \"company_gst\": \"67DMSPS0123QAZ9\",",
											"  \"currency_code_id\": \"1\",",
											"  \"item_selection\": \"basic\",",
											"  \"customer_id\": 1,",
											"  \"bill_to\": \"SRVT\",",
											"  \"customer_gstin\": \"87DMSPS0123QAZ9\",",
											"  \"contact_person\": \"VIDD\",",
											"  \"contact_email_id\": \"VIDD@GMAIL.COM\",",
											"  \"country_id\": 1,",
											"  \"address\": \"COLABA MARKET, MUMBAI\",",
											"  \"state_id\": 1,",
											"  \"city\": \"MUMBAI\",",
											"  \"zip_code\": \"400005\",",
											"  \"discount_value\": 50,",
											"  \"hsn_sac_code\": \"989894\",",
											"  \"gst_percentage\": 12.5,",
											"  \"invoice_due_option_id\": 2,",
											"  \"notes\": \"Hello, this is my first invoice.\",",
											"  \"references_notes\": \"REF ID 123\",",
											"  \"signature_id\": 1,",
											"  \"signatory_name\": \"ZEE\",",
											"  \"signatory_designation\": \"ADMIN\",",
											"  \"company_bank_account_id\": 1,",
											"  \"creator_name\": \"Zeeshan Keval\",",
											"  \"customer_legal_name\": \"Sarvatra Technology Pvt Ltd\",",
											"  \"items\": [",
											"    {",
											"      \"id\": 1,",
											"      \"item\": \"SWX Renewal\",",
											"      \"price\": 10000,",
											"      \"hsn_sac_code\": 123456,",
											"      \"quantity\": 10,",
											"      \"discount\": 1000,",
											"      \"gst_percentage\": 18.5",
											"    }",
											"  ],",
											"  \"attachments\": [",
											"    {",
											"      \"id\": 1,",
											"      \"file_id\": \"20abd228-9b19-47b8-ab0e-b4aeac42706a\"",
											"    }",
											"  ]",
											"}",
											"",
											"for(key in jsonBody)",
											"{",
											"   ",
											"   var negativeValue=getValueType(jsonBody.key);",
											"   if(negativeValue==0)",
											"   {",
											"       body=jsonBody",
											"   }",
											"   else{",
											"       var size=negativeValue.length;",
											"        body=jsonBody",
											"",
											"        for(i=0; i<size; i++){",
											"           if(negativeValue.length>0){",
											"               body.key=negativeValue.shift();",
											"               negativeValue=negativeValue;",
											"               var body_str = JSON.stringify(body);",
											"               pm.environment.set('request_body', body_str);",
											"              }",
											"            }   ",
											"       }",
											"   ",
											"}",
											"",
											"function getValueType(value){",
											"    var negativeValue",
											"    if(ids.includes(value)){",
											"        negativeValue=negativeIds",
											"    }",
											"    else if(gSTs.includes(value)){",
											"        negativeValue=negativeGSTs",
											"    }",
											"    else if(fixedValueStrings.includes(value)){",
											"        negativeValue=negativeFixedValueStrings",
											"    }",
											"    else if(emails.includes(value)){",
											"        negativeValue=negativeEmails",
											"    }",
											"    else if(numbers.includes(value)){",
											"        negativeValue=negativeNumbers",
											"    }",
											"    else if(prices.includes(value)){",
											"        negativeValue=negativePrices",
											"    }",
											"    else{",
											"        negativeValue=0;",
											"    }",
											"    return negativeValue;",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1cd5200d-fea0-40ee-9818-72fcb1137173",
										"exec": [
											"var companyId= pm.environment.get(\"companyId\")",
											"var invoiceId= pm.environment.get(\"invoiceId\")",
											"var companyUserId= pm.environment.get(\"companyUserId\")",
											"",
											"           ",
											"postman.setNextRequest(\"updateInvoiceTest\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"{{request_body}}\""
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{company_Id}}/invoices/{{invoice_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{company_Id}}",
										"invoices",
										"{{invoice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateInvoiceTest Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2727a12-1514-4adc-9e81-a46ee46b0365",
										"exec": [
											"",
											"",
											"// All the Ids in request body",
											"",
											"var companyId=pm.environment.get(\"companyId\");",
											"var invoiceId=pm.environment.get(\"invoiceId\");",
											"var companyUserId=pm.environment.get(\"companyUserId\");",
											"var currencyCodeId=pm.environment.get(\"currencyCodeId\");",
											"var customerId=pm.environment.get(\"customerId\");",
											"var countryId=pm.environment.get(\"countryId\");",
											"var stateId=pm.environment.get(\"stateId\");",
											"var invoiceDueOptionId=pm.environment.get(\"invoiceDueOptionId\");",
											"var signatureId=pm.environment.get(\"signatureId\");",
											"var companyBankAccountId=pm.environment.get(\"companyBankAccountId\");",
											"var itemId=pm.environment.get(\"itemId\");",
											"var attachmentId=pm.environment.get(\"attachmentId\");",
											"",
											"var negativeIds=[\"\",null,\"a\",0,-1,0.1,99999];",
											"var negativeGSTs=[\"\",null,\"123as\",\"123456789012345\",\"abcdefghijklmno\",\"284HSAHSGSGGGSG\",\"00ABABA123AAA0\"];",
											"var negativeFixedValueStrings=[null,\"abc\",\"@@\"]",
											"var negativeEmails=[null,\"abc\",\"@.com\",\"a@b.com.com\"];",
											"var negativeNumbers=[null,\"a\",-1,0.1,1111];",
											"var negativePrices=[\"\",null,\"a\",-1];",
											"",
											"ids=[\"company_Id\",\"invoice_id\", \"company_user_id\", \"currency_code_id\",\"customer_id\",\"country_id\",\"state_id\",\"invoice_due_option_id\",\"signature_id\",\"company_bank_account_id\",\"items.id\",\"attachments.id\"];",
											"gSTs=[\"company_gst\", \"customer_gstin\"];",
											"fixedValueStrings=[\"item_selection\",  \"city\", \"items_item\"];",
											"//strings=[\"bill_to\",\"contact_person\",\"address\",\"signatory_name\", \"signatory_designation\",\"creator_name\", \"customer_legal_name\"]",
											"emails= [\"contact_email_id\"];",
											"numbers=[\"zip_code\",\"hsn_sac_code\", \"items_hsn_sac_code\"]    ",
											"prices=[\"discount_value\", \"gst_percentage\", \"items_price\", \"items_quantity\", \"items_discount\", \"items_gst_percentage\"]",
											"",
											"type=[\"ids\",\"gSTs\",\"fixedValueStrings\",\"strings\",\"emails\",\"numbers\",\"price\"];",
											"",
											"",
											"",
											"    ",
											"//ids=[\"companyId\",\"invoiceId\", \"companyUserId\", \"currencyCodeId\",\"customerId\",\"countryId\",\"stateId\",\"invoiceDueOptionId\",\"signatureId\",\"companyBankAccountId\",\"itemId\",\"attachmentId\"];",
											"jsonBody={",
											"  \"company_user_id\": 1,",
											"  \"company_gst\": \"67DMSPS0123QAZ9\",",
											"  \"currency_code_id\": \"1\",",
											"  \"item_selection\": \"basic\",",
											"  \"customer_id\": 1,",
											"  \"bill_to\": \"SRVT\",",
											"  \"customer_gstin\": \"87DMSPS0123QAZ9\",",
											"  \"contact_person\": \"VIDD\",",
											"  \"contact_email_id\": \"VIDD@GMAIL.COM\",",
											"  \"country_id\": 1,",
											"  \"address\": \"COLABA MARKET, MUMBAI\",",
											"  \"state_id\": 1,",
											"  \"city\": \"MUMBAI\",",
											"  \"zip_code\": \"400005\",",
											"  \"discount_value\": 50,",
											"  \"hsn_sac_code\": \"989894\",",
											"  \"gst_percentage\": 12.5,",
											"  \"invoice_due_option_id\": 2,",
											"  \"notes\": \"Hello, this is my first invoice.\",",
											"  \"references_notes\": \"REF ID 123\",",
											"  \"signature_id\": 1,",
											"  \"signatory_name\": \"ZEE\",",
											"  \"signatory_designation\": \"ADMIN\",",
											"  \"company_bank_account_id\": 1,",
											"  \"creator_name\": \"Zeeshan Keval\",",
											"  \"customer_legal_name\": \"Sarvatra Technology Pvt Ltd\",",
											"  \"items\": [",
											"    {",
											"      \"id\": 1,",
											"      \"item\": \"SWX Renewal\",",
											"      \"price\": 10000,",
											"      \"hsn_sac_code\": 123456,",
											"      \"quantity\": 10,",
											"      \"discount\": 1000,",
											"      \"gst_percentage\": 18.5",
											"    }",
											"  ],",
											"  \"attachments\": [",
											"    {",
											"      \"id\": 1,",
											"      \"file_id\": \"20abd228-9b19-47b8-ab0e-b4aeac42706a\"",
											"    }",
											"  ]",
											"}",
											"",
											"pm.environment.set(\"jsonBody\",jsonBody);",
											"",
											"var jsonCalculated=pm.environment.get(\"jsonCalculated\");",
											"if(!jsonCalculated)",
											"{",
											"    jsonCalculated=jsonBody;",
											"}",
											"",
											"",
											"for(key in jsonCalculated){",
											"    var negativeVals=getValueType(key)",
											"    console.log(\" Key= \"+key + \"\\n Negative Vals : \" + negativeVals)",
											"    delete jsonCalculated[key];",
											"    console.log(\"***************  jsonCalculated: \" + Object.keys(jsonCalculated))",
											"    pm.environment.set(\"jsonCalculated\",jsonCalculated);",
											"    console.log(\"+++ size: \" + negativeVals.length)",
											"    ",
											"    +++++++ Negative vals should be declared globally if not present and then reduce one by one",
											"    ",
											"    for (i=0;i<negativeVals.length; i++){",
											"        currentValue=negativeVals.shift()",
											"        pm.environment.set(\"negativeVals\",negativeVals)",
											"",
											"        console.log(\"currentValue : \" + currentValue);",
											"        //negativeVals=negativeVals;",
											"        console.log(\"negativeVals : \" + negativeVals)",
											"        jsonCalculated[key]=currentValue;",
											"        break;",
											"    }",
											"    break;",
											"    ",
											"}",
											"",
											"function getValueType(value){",
											"    var negativeValue",
											"    ",
											"    if(ids.includes(value)){",
											"        negativeValue=negativeIds",
											"        pm.environment.set(\"negativeValue\",negativeValue);",
											"        return negativeValue;",
											"    }",
											"    else if(gSTs.includes(value)){",
											"        negativeValue=negativeGSTs",
											"        pm.environment.set(\"negativeValue\",negativeValue);",
											"        return negativeValue;",
											"    }",
											"    else if(fixedValueStrings.includes(value)){",
											"        negativeValue=negativeFixedValueStrings",
											"        return negativeValue;",
											"    }",
											"    else if(emails.includes(value)){",
											"        negativeValue=negativeEmails",
											"        return negativeValue;",
											"    }",
											"    else if(numbers.includes(value)){",
											"        negativeValue=negativeNumbers",
											"        return negativeValue;",
											"    }",
											"    else if(prices.includes(value)){",
											"        negativeValue=negativePrices",
											"        return negativeValue;",
											"    }",
											"    else{",
											"        negativeValue=0;",
											"        return negativeValue;",
											"    }",
											"    ",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1cd5200d-fea0-40ee-9818-72fcb1137173",
										"exec": [
											"/*",
											"for(key in jsonBody)",
											"{",
											"   console.log(\"key \" + key + \" : \" + jsonBody[key] );",
											"   ",
											"   var negativeValue=getValueType(key);",
											"      console.log(\"negativeValue : \" +negativeValue)",
											"",
											"   if(negativeValue==0)",
											"   {",
											"       body=jsonBody",
											"       postman.setNextRequest(\"updateInvoiceTest Copy\")",
											"   }",
											"   else{",
											"       var size=negativeValue.length;",
											"        body=jsonBody",
											"",
											"        for(i=0; i<size; i++){",
											"           if(negativeValue.length>0){",
											"               body.key=negativeValue.shift();",
											"               negativeValue=negativeValue;",
											"               var body_str = JSON.stringify(body);",
											"               pm.environment.set('request_body', body_str);",
											"                //postman.setNextRequest(\"updateInvoiceTest Copy\")",
											"",
											"              }",
											"            }   ",
											"       }",
											"       if(key==\"customer_id\")",
											"       {",
											"           postman.setNextRequest(null);",
											"       }",
											"   ",
											"}",
											"*/",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"{{request_body}}\""
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/1/invoices/10",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"1",
										"invoices",
										"10"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "getInvoiceDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da354fa7-8c20-4195-867e-ec9a13a01ff0",
										"exec": [
											"// Get the value of CompanyId and array compId from pre-request script.",
											"",
											"var CompanyId=pm.environment.get(\"CompanyId\");",
											"var compId=pm.environment.get(\"compId\")",
											"",
											"// Get the value of Invoice_Number and array InvNum from pre-request script.",
											"",
											"var Invoice_Number = pm.environment.get(\"Invoice_Number\")",
											"var InvNum= pm.environment.get(\"InvNum\")",
											"",
											"// Validate Negative scenarios for all posible combination of CompanyId and Invoice_Number",
											"",
											"if(InvNum.length>0 )",
											"{",
											"    tests[\"Validating the response for negative scenario for Invoice number : \" + Invoice_Number + \"Company Id \"+ CompanyId]=",
											"        (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"        ((pm.response.json().error ==\"Unprocessable Entity\") || pm.response.json().message ==\"Resource does not exists\" || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\" || pm.response.json().message ==\"Resource does not exists\");",
											"             ",
											"     postman.setNextRequest(\"getInvoiceDetails\");",
											"",
											"}",
											"else",
											"    {",
											"       // set InvNum array and compId array as \"\"",
											"        pm.environment.clear();",
											"",
											"        // 1. JSON schema validation",
											"        var schema ={",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"invoice\"",
											"      ],",
											"      \"properties\": {",
											"        \"invoice\": {",
											"          \"$id\": \"#/properties/invoice\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Invoice Schema\",",
											"          \"required\": [",
											"            \"id\",",
											"            \"status\",",
											"            \"bill_to\",",
											"            \"invoice_nbr\",",
											"            \"balance_amount\",",
											"            \"total_cost\",",
											"            \"payment_due_date\",",
											"            \"created_at\",",
											"            \"invoice_sent_at\",",
											"            \"signatory_name\",",
											"            \"creator_name\",",
											"            \"sent_by\",",
											"            \"due_days\",",
											"            \"items\",",
											"            \"reminders\",",
											"            \"history\",",
											"            \"attachments\"",
											"          ],",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"$id\": \"#/properties/invoice/properties/id\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Id Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                0",
											"              ]",
											"            },",
											"            \"status\": {",
											"              \"$id\": \"#/properties/invoice/properties/status\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Status Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"bill_to\": {",
											"              \"$id\": \"#/properties/invoice/properties/bill_to\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Bill_to Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"invoice_nbr\": {",
											"              \"$id\": \"#/properties/invoice/properties/invoice_nbr\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Invoice_nbr Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"balance_amount\": {",
											"              \"$id\": \"#/properties/invoice/properties/balance_amount\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Balance_amount Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                0",
											"              ]",
											"            },",
											"            \"total_cost\": {",
											"              \"$id\": \"#/properties/invoice/properties/total_cost\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Total_cost Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                0",
											"              ]",
											"            },",
											"            \"payment_due_date\": {",
											"              \"$id\": \"#/properties/invoice/properties/payment_due_date\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Payment_due_date Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"created_at\": {",
											"              \"$id\": \"#/properties/invoice/properties/created_at\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Created_at Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"invoice_sent_at\": {",
											"              \"$id\": \"#/properties/invoice/properties/invoice_sent_at\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Invoice_sent_at Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"signatory_name\": {",
											"              \"$id\": \"#/properties/invoice/properties/signatory_name\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Signatory_name Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"creator_name\": {",
											"              \"$id\": \"#/properties/invoice/properties/creator_name\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Creator_name Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"sent_by\": {",
											"              \"$id\": \"#/properties/invoice/properties/sent_by\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Sent_by Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"due_days\": {",
											"              \"$id\": \"#/properties/invoice/properties/due_days\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Due_days Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"string\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"items\": {",
											"              \"$id\": \"#/properties/invoice/properties/items\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Items Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/invoice/properties/items/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"id\",",
											"                  \"invoice_id\",",
											"                  \"item\",",
											"                  \"price\"",
											"                ],",
											"                \"properties\": {",
											"                  \"id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/items/items/properties/id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"invoice_id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/items/items/properties/invoice_id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Invoice_id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"item\": {",
											"                    \"$id\": \"#/properties/invoice/properties/items/items/properties/item\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Item Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"string\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"price\": {",
											"                    \"$id\": \"#/properties/invoice/properties/items/items/properties/price\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Price Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  }",
											"                }",
											"              }",
											"            },",
											"            \"reminders\": {",
											"              \"$id\": \"#/properties/invoice/properties/reminders\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Reminders Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/invoice/properties/reminders/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"id\",",
											"                  \"invoice_id\",",
											"                  \"reminded_at\"",
											"                ],",
											"                \"properties\": {",
											"                  \"id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/reminders/items/properties/id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"invoice_id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/reminders/items/properties/invoice_id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Invoice_id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"reminded_at\": {",
											"                    \"$id\": \"#/properties/invoice/properties/reminders/items/properties/reminded_at\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Reminded_at Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"string\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            },",
											"            \"history\": {",
											"              \"$id\": \"#/properties/invoice/properties/history\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The History Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/invoice/properties/history/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"id\",",
											"                  \"invoice_id\",",
											"                  \"company_user_id\",",
											"                  \"created_at\",",
											"                  \"notes\"",
											"                ],",
											"                \"properties\": {",
											"                  \"id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/history/items/properties/id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"invoice_id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/history/items/properties/invoice_id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Invoice_id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"company_user_id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/history/items/properties/company_user_id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Company_user_id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"created_at\": {",
											"                    \"$id\": \"#/properties/invoice/properties/history/items/properties/created_at\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Created_at Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"string\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"notes\": {",
											"                    \"$id\": \"#/properties/invoice/properties/history/items/properties/notes\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Notes Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"string\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            },",
											"            \"attachments\": {",
											"              \"$id\": \"#/properties/invoice/properties/attachments\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Attachments Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/invoice/properties/attachments/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"id\",",
											"                  \"file_url\"",
											"                ],",
											"                \"properties\": {",
											"                  \"id\": {",
											"                    \"$id\": \"#/properties/invoice/properties/attachments/items/properties/id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      0",
											"                    ]",
											"                  },",
											"                  \"file_url\": {",
											"                    \"$id\": \"#/properties/invoice/properties/attachments/items/properties/file_url\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The File_url Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"string\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"        ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    });",
											"                }",
											"        if(errors.length>1)",
											"        {",
											"            for(i=0;i<errors.length;i++){",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                })  ",
											"            } ",
											"        }",
											"    }",
											"",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"",
											"     // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"",
											"    if(tv4.validate(pm.response.json(), schema))",
											"    {",
											"        //5. Verify response body contain string - mandatory keys in reponse",
											"        ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains status: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"status\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains bill_to: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"bill_to\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains invoice_nbr\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains total_cost\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"total_cost\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains payment_due_date\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"payment_due_date\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains created_at\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"created_at\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains invoice_sent_at\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"invoice_sent_at\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains items\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"items\");",
											"        });",
											"        ",
											"        var noOfItems = pm.response.json().invoice.items.length   ",
											"        if (noOfItems>0)",
											"            {",
											"                pm.test(\"JSON response Body contains invoice_id\", function () ",
											"                    {",
											"                        pm.expect(pm.response.text()).to.include(\"invoice_id\");",
											"                    });",
											"                ",
											"                pm.test(\"JSON response Body contains item\", function () ",
											"                    {",
											"                        pm.expect(pm.response.text()).to.include(\"item\");",
											"                    });",
											"                ",
											"                pm.test(\"JSON response Body contains price\", function ()",
											"                    {",
											"                        pm.expect(pm.response.text()).to.include(\"price\");",
											"                    });",
											"            }",
											"",
											"        pm.test(\"JSON response Body contains reminders\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"reminders\");",
											"        });",
											"    ",
											"        var noOfReminders = pm.response.json().invoice.reminders.length",
											"        ",
											"        if(noOfReminders>0)",
											"            {",
											"              pm.test(\"JSON response Body contains reminded_at\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"reminded_at\");",
											"            });",
											"        }",
											"    ",
											"        pm.test(\"JSON response Body contains history\", function () ",
											"            {",
											"                pm.expect(pm.response.text()).to.include(\"history\");",
											"            });",
											"    ",
											"        var history = pm.response.json().invoice.history.length",
											"    ",
											"        if(history>0)",
											"            {",
											"                pm.test(\"JSON response Body contains company_user_id\", function () ",
											"                {",
											"                    pm.expect(pm.response.text()).to.include(\"company_user_id\");",
											"                });",
											"                ",
											"            pm.test(\"JSON response Body contains notes\", function () ",
											"                {",
											"                    pm.expect(pm.response.text()).to.include(\"notes\");",
											"                });",
											"            }",
											"",
											"        pm.test(\"JSON response Body contains attachments\", function () ",
											"            {",
											"                pm.expect(pm.response.text()).to.include(\"attachments\");",
											"            });",
											"        ",
											"        var attachments = pm.response.json().invoice.attachments.length",
											"",
											"        if(attachments>0)",
											"            {",
											"                pm.test(\"JSON response Body contains file_name\", function () {",
											"                    pm.expect(pm.response.text()).to.include(\"file_name\");",
											"                });",
											"                ",
											"                pm.test(\"JSON response Body contains file_url\", function () {",
											"                    pm.expect(pm.response.text()).to.include(\"file_url\");",
											"                });",
											"            }",
											"            ",
											"    //6. JSON value check in reponse body",
											"     ",
											"        var jsonData = pm.response.json().invoice",
											"",
											"        tests[\"Validate id is not null. Value of id is: \" +jsonData.id ] = ",
											"            jsonData.id !== null && ",
											"            jsonData.id !== ' ' &&",
											"            jsonData.id >0;",
											"",
											"        pm.test(\"Validate created_at is not null. Value of created_at is: \" + jsonData.created_at, function(){",
											"                        pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                    });",
											"        ",
											"        tests[\"Validate creator_name is not null. Value of creator_name is: \" + jsonData.creator_name]=",
											"            jsonData.creator_name !==null &&",
											"            jsonData.creator_name !==' ' &&",
											"            jsonData.creator_name.length >=3;",
											"                                ",
											"        if (jsonData.status !=\"draft\") // Invoice should not be Draft ",
											"            {",
											"                tests[\"Validate status is in Invoice Details screen. Value of status is: \" +jsonData.status]= ",
											"                    (jsonData.status ==\"overdue\" ||",
											"                    jsonData.status ==\"paid\" ||",
											"                    jsonData.status ==\"due\") ;",
											"                    ",
											"                tests[\"Validate bill_to is not null. Value of bill_to is: \" +jsonData.bill_to ] = ",
											"                    jsonData.bill_to !== null && ",
											"                    jsonData.bill_to !== ' ';",
											"            ",
											"                pm.test(\"invoice_nbr is equal to \" + jsonData.invoice_nbr, function () ",
											"                    {",
											"                        pm.expect(jsonData.invoice_nbr).to.include(\"INV_NBR_\");",
											"                    ",
											"                    });",
											"               ",
											"                tests[\"Validate total_cost is not null. Value of total_cost is: \" + jsonData.total_cost]=",
											"                    jsonData.total_cost !==null &&",
											"                    jsonData.total_cost !==' ' &&",
											"                    jsonData.total_cost >0;",
											"            ",
											"                pm.test(\"Validate payment_due_date is not null. Value of payment_due_date is: \" + jsonData.payment_due_date, function()",
											"                    {",
											"                        pm.expect(jsonData.payment_due_date).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                    });",
											"                ",
											"                ",
											"                pm.test(\"Validate invoice_sent_at is not null. Value of invoice_sent_at is: \" + jsonData.invoice_sent_at, function()",
											"                    {",
											"                        pm.expect(jsonData.invoice_sent_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                    });",
											"             ",
											"                tests[\"Validate signatory_name is not null. Value of signatory_name is: \" + jsonData.signatory_name]=",
											"                    jsonData.signatory_name !==null &&",
											"                    jsonData.signatory_name !==' '&&",
											"                    jsonData.signatory_name.length>=2;",
											"                    ",
											"                tests[\"Validate sent_by is not null. Value of sent_by is: \" + jsonData.sent_by]=",
											"                    jsonData.sent_by !==null &&",
											"                    jsonData.sent_by !==' ' &&",
											"                    jsonData.sent_by.length >=3;",
											"            ",
											"                tests[\"Validate due_days is not null. Value of due_days is: \" + jsonData.due_days]=",
											"                    jsonData.due_days !==null &&",
											"                    jsonData.due_days !==' ' &&",
											"                    jsonData.due_days >=0;",
											"            ",
											"                var items = pm.response.json().invoice.items",
											"                for(i=0;i<noOfItems; i++)",
											"                    {  ",
											"                        tests[\"Validate id is not null. Value of id is: \" + items[i].id]=",
											"                        items[i].id !== null &&",
											"                        items[i].id !==' ' &&",
											"                        items[i].id >0;",
											"                        ",
											"                        tests[\"Validate invoice_id is not null. Value of invoice_id is: \" + items[i].invoice_id]=",
											"                        items[i].invoice_id !== null &&",
											"                        items[i].invoice_id !==' ' &&",
											"                        items[i].invoice_id >0 && ",
											"                        items[i].invoice_id==pm.response.json().invoice.id;",
											"                        ",
											"                        tests[\"Validate item is not null. Value of item is: \" + items[i].item]=",
											"                        items[i].item !== null &&",
											"                        items[i].item !==' ' &&",
											"                        items[i].item.length >=3;",
											"                        ",
											"                        tests[\"Validate price is not null. Value of price is: \" + items[i].price]=",
											"                        items[i].price !== null &&",
											"                        items[i].price !==' ' &&",
											"                        items[i].price >0;",
											"                    }",
											"                ",
											"                var reminders = pm.response.json().invoice.reminders",
											"                if (noOfReminders>0){",
											"                   for(i=0;i<noOfReminders; i++)",
											"                        {",
											"                            tests[\"Validate id is not null.  For i equals to : \" + i +\" Value of id is: \" + reminders[i].id]=",
											"                                reminders[i].id !== null &&",
											"                                reminders[i].id !==' ' &&",
											"                                reminders[i].id >0;",
											"                            ",
											"                            tests[\"Validate invoice_id is not null. For i equals to : \" + i +\"  Value of invoice_id is: \" + reminders[i].invoice_id]=",
											"                                reminders[i].invoice_id !== null &&",
											"                                reminders[i].invoice_id !==' ' &&",
											"                                reminders[i].invoice_id >0  && ",
											"                                reminders[i].invoice_id==pm.response.json().invoice.id;",
											"                                ",
											"                            pm.test(\"Validate reminded_at is not null. For i equals to : \" + i +\"  Value of reminded_at is: \" + reminders[i].reminded_at, function()",
											"                                {",
											"                                    pm.expect(reminders[i].reminded_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                                });",
											"                        }",
											"                    }",
											"            ",
											"                var history = pm.response.json().invoice.history",
											"                for(i=0;i<history.length; i++)",
											"                    {",
											"                        tests[\"Validate id is not null. For i equals to : \" + i +\"  Value of id is: \" + history[i].id]=",
											"                            history[i].id !== null &&",
											"                            history[i].id !==' ' &&",
											"                            history[i].id >0;",
											"                        ",
											"                        tests[\"Validate invoice_id is not null.  For i equals to : \" + i +\" Value of invoice_id is: \" + history[i].invoice_id]=",
											"                            history[i].invoice_id !== null &&",
											"                            history[i].invoice_id !==' ' &&",
											"                            history[i].invoice_id >0 && ",
											"                            history[i].invoice_id==pm.response.json().invoice.id;",
											"                            ",
											"                        tests[\"Validate company_user_id is not null. For i equals to : \" + i +\"  Value of company_user_id is: \" + history[i].company_user_id ]=",
											"                            history[i].company_user_id !== null &&",
											"                            history[i].company_user_id !==' ' &&",
											"                            history[i].company_user_id >0;",
											"                            ",
											"                        pm.test(\"Validate created_at is not null. For i equals to : \" + i +\"  Value of created_at is: \" + reminders[i].created_at, function()",
											"                            {",
											"                                pm.expect(reminders[i].created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                            });",
											"                    }",
											"                ",
											"                var attachments=pm.response.json().invoice.attachments;",
											"                if (attachments.length>0){",
											"                   for(i=0;i<attachments; i++)",
											"                        {",
											"                            tests[\"Validate id is not null. For i equals to : \" + i +\"  Value of id is: \" + attachments[i].id]=",
											"                                attachments[i].id !== null &&",
											"                                attachments[i].id !==' ' &&",
											"                                attachments[i].id >0;",
											"                            ",
											"                            tests[\"Validate invoice_id is not null. For i equals to : \" + i +\"  Value of invoice_id is: \" + attachments[i].invoice_id]=",
											"                                attachments[i].invoice_id !== null &&",
											"                                attachments[i].invoice_id !==' ' &&",
											"                                attachments[i].invoice_id >0;",
											"                                ",
											"                            tests[\"Validate file_name is not null. For i equals to : \" + i +\"  Value of file_name is: \" + attachments[i].file_name ]=",
											"                                attachments[i].file_name !== null &&",
											"                                attachments[i].file_name !==' ' &&",
											"                                attachments[i].file_name !==0;",
											"                                ",
											"                            tests[\"Validate file_url is not null. For i equals to : \" + i +\"  Value of file_url is: \" + attachments[i].file_url ]=",
											"                                attachments[i].file_url !== null &&",
											"                                attachments[i].file_url !==' ' &&",
											"                                attachments[i].file_url !==0;",
											"                        }",
											"                    }",
											"            }",
											"        else{",
											"                tests[\"Validate status is Draft. Value of status is: \" +jsonData.status]= ",
											"                    jsonData.status ==\"draft\" ;",
											"                    ",
											"                tests[\"Validate bill_to is not null. Value of bill_to is: \" +jsonData.bill_to ] = ",
											"                    jsonData.bill_to !== null && ",
											"                    jsonData.bill_to !== ' ' ;",
											"                    ",
											"                pm.test(\"invoice_nbr is equal to \" + jsonData.invoice_nbr, function () ",
											"                    {",
											"                        pm.expect(jsonData.invoice_nbr).to.include(\"DRAFT_INV_LA_\");",
											"                    ",
											"                    });",
											"            }",
											"    }",
											"        ",
											"    // 7. To print Application content type as JSON",
											"    ",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29eca797-6840-4251-89af-426873b540ad",
										"exec": [
											"var compId=pm.environment.get(\"compId\");",
											"var InvNum=pm.environment.get(\"InvNum\");",
											"",
											"if(!compId || (!InvNum) || compId==null || InvNum==null)",
											"{",
											"    compId=[\"\" ,null, \"a\" , 1,1,1,1]",
											"    InvNum=[\"INV_NBR_22\",\"INV_NBR_22\",\"INV_NBR_22\",\"\",null,  \"a\", \"INV_NBR_10\"];",
											"",
											"}",
											"",
											"currentcomId=compId.shift()",
											"pm.environment.set(\"CompanyId\",currentcomId)",
											"pm.environment.set(\"compId\",compId)",
											"",
											"// validating the response for Negative scenarios of Invoice Id \"\" , null, INV_198",
											"//  and 1 Positive scenario of Invoice Id as : INV_BLR_XX  --- Check if INV_BLR_XX exists in DB",
											"",
											"currentInvNum=InvNum.shift()",
											"pm.environment.set(\"Invoice_Number\",currentInvNum);",
											"pm.environment.set(\"InvNum\",InvNum)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{CompanyId}}/invoices/{{Invoice_Number}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{CompanyId}}",
										"invoices",
										"{{Invoice_Number}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getInvoiceDueOptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30aede8c-adf9-4d88-a9d7-ff72989f2f73",
										"exec": [
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"due_options\"",
											"  ],",
											"  \"properties\": {",
											"    \"due_options\": {",
											"      \"$id\": \"#/properties/due_options\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Due_options Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/due_options/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"nbr_of_days\",",
											"          \"label\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"nbr_of_days\": {",
											"            \"$id\": \"#/properties/due_options/items/properties/nbr_of_days\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Nbr_of_days Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              7",
											"            ]",
											"          },",
											"          \"label\": {",
											"            \"$id\": \"#/properties/due_options/items/properties/label\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Label Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"1 week\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"id\": {",
											"            \"$id\": \"#/properties/due_options/items/properties/id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              1",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                });",
											"        }",
											"       ",
											"       if(errors.length>1){",
											"        for(i=0;i<errors.length;i++)   {",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                }) ",
											"        }",
											"       }",
											"}",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"",
											"//5. Verify response body contain string - mandatory keys in reponse",
											"",
											"if(tv4.validate(pm.response.json(), schema))",
											"{",
											"    pm.test(\"JSON response Body contains due options: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"due_options\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains nbr of days: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"nbr_of_days\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains label\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"label\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"id\");",
											"    });",
											"    ",
											"    //6. JSON value check in reponse body",
											"       ",
											"    var size= pm.response.json().due_options.length",
											"    for (i=0;i<size;i++){",
											"        ",
											"        var jsonData = pm.response.json().due_options[i]",
											"    ",
											"        tests[\"Validate nbr_of_days is not null. For i equals to : \" + i +\"  Value of nbr_of_days is \" + jsonData.nbr_of_days] = ",
											"            jsonData.nbr_of_days == 7 ||jsonData.nbr_of_days == 15 || jsonData.nbr_of_days == 21 || jsonData.nbr_of_days == 30 || jsonData.nbr_of_days == 60;",
											"    ",
											"        tests[\"Validate label is not null.  For i equals to : \" + i +\" Value of label is: \" +jsonData.label ] = ",
											"            jsonData.label == \"1 week\" ||jsonData.label == \"15 days\"||jsonData.label == \"3 weeks\"||jsonData.label == \"1 month\"||jsonData.label == \"2 months\"",
											"    ",
											"         tests[\"Validate Id is not null.  For i equals to : \" + i +\" Value of Id is: \" +jsonData.id] = ",
											"            jsonData.id !== null && ",
											"            jsonData.id !== ' ' && ",
											"            jsonData.id > 0;",
											"    }",
											"}",
											"",
											"// 7. To print Application content type as JSON",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/invoices/due_options",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"invoices",
										"due_options"
									],
									"query": [
										{
											"key": "",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getInvoiceTotals",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58b23cba-c2cb-4e1d-bbd2-073bfda3d2ed",
										"exec": [
											"// Get the value of CompanyId and array compId from pre-request script.",
											"",
											"var compId = pm.environment.get(\"compId\");",
											"var CompanyId = pm.environment.get(\"CompanyId\");",
											"",
											"if(compId.length>0)",
											"{",
											"    tests[\"Validating the response for negative scenario for company Id : \" + CompanyId]=",
											"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"     ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"     (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"     ",
											"    postman.setNextRequest(\"getInvoiceTotals\");",
											"",
											"}",
											"else",
											"{",
											"    pm.environment.clear();",
											"    ",
											"    // 1. JSON schema validation",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"invoice_amounts\"",
											"      ],",
											"      \"properties\": {",
											"        \"invoice_amounts\": {",
											"          \"$id\": \"#/properties/invoice_amounts\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Invoice_amounts Schema\",",
											"          \"required\": [",
											"            \"receivable_amount\",",
											"            \"draft_count\",",
											"            \"received_amount\",",
											"            \"invoiced_amount\"",
											"          ],",
											"          \"properties\": {",
											"            \"receivable_amount\": {",
											"              \"$id\": \"#/properties/invoice_amounts/properties/receivable_amount\",",
											"              \"type\": \"number\",",
											"              \"title\": \"The Receivable_amount Schema\",",
											"              \"default\": 0.0,",
											"              \"examples\": [",
											"                200.5",
											"              ]",
											"            },",
											"            \"draft_count\": {",
											"              \"$id\": \"#/properties/invoice_amounts/properties/draft_count\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Draft_count Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                4",
											"              ]",
											"            },",
											"            \"received_amount\": {",
											"              \"$id\": \"#/properties/invoice_amounts/properties/received_amount\",",
											"              \"type\": \"number\",",
											"              \"title\": \"The Received_amount Schema\",",
											"              \"default\": 0.0,",
											"              \"examples\": [",
											"                199.5",
											"              ]",
											"            },",
											"            \"invoiced_amount\": {",
											"              \"$id\": \"#/properties/invoice_amounts/properties/invoiced_amount\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Invoiced_amount Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                300",
											"              ]",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"",
											"    // 2. Validation of data type of keys in reponse",
											"    if (!tv4.validate(pm.response.json(), schema)){",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    });",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  } ",
											"           }",
											"    }",
											"",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"",
											"",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"",
											"    if(tv4.validate(pm.response.json(),schema))",
											"    {",
											"        //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains invoice_amounts: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"invoice_amounts\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains draft_count: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"draft_count\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains received_amount: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"received_amount\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains invoiced_amount\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"invoiced_amount\");",
											"        });",
											"        ",
											"    ",
											"        //6. JSON value check in reponse body",
											"        var jsonData = pm.response.json().invoice_amounts",
											"         ",
											"        tests[\"Validate receivable amount is not null. Value of receivable amount is: \" +jsonData.receivable_amount ] = ",
											"            jsonData.receivable_amount !== null && ",
											"            jsonData.receivable_amount !== ' ' &&",
											"            jsonData.receivable_amount >= 0;",
											"        ",
											"        tests[\"Validate draft_count is not null. Value of draft_count is \" + jsonData.draft_count] = ",
											"            jsonData.draft_count !== null && ",
											"            jsonData.draft_count !== ' ' &&",
											"            jsonData.draft_count >=0;",
											"    ",
											"        tests[\"Validate received_amount is not null. Value of received_amount is: \" +jsonData.received_amount ] = ",
											"            jsonData.received_amount !== null && ",
											"            jsonData.received_amount !== ' '  && ",
											"            jsonData.received_amount >= 0 ;",
											"        ",
											"        tests[\"Validate invoiced_amount is not null. Value of invoiced_amount is: \" +jsonData.invoiced_amount ] = ",
											"            jsonData.invoiced_amount !== null && ",
											"            jsonData.invoiced_amount !== ' ' && ",
											"            jsonData.invoiced_amount >= 0 ;",
											"    }",
											"    ",
											"    // 7. To print Application content type as JSON",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "016a0f9d-a81b-43a0-8f47-96e902cd506a",
										"exec": [
											"// Running the test 4 times ",
											"// 3 negative scenarios for the companyId ",
											"// 1 positive scenario for correct companyId ",
											"",
											"var compId= pm.environment.get(\"compId\")",
											"if(!compId || compId==null){",
											"   compId=[ \"\",null,\"a\", 1] ;",
											"    ",
											"}",
											"",
											"currentcomId=compId.shift()",
											"pm.environment.set(\"CompanyId\",currentcomId)",
											"pm.environment.set(\"compId\",compId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{CompanyId}}/invoice_totals",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{CompanyId}}",
										"invoice_totals"
									]
								}
							},
							"response": []
						},
						{
							"name": "getInvoicesLists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "314ec82a-1a42-4af1-98f0-08416df94876",
										"exec": [
											"var CompanyId=pm.environment.get(\"CompanyId\")",
											"var ParamStatus = pm.environment.get(\"ParamStatus\")",
											"var statuses = pm.environment.get(\"statuses\");",
											"var year = pm.environment.get(\"year\");",
											"var month = pm.environment.get(\"month\");",
											"var Sort_by = pm.environment.get(\"Sort_by\");",
											"var search = pm.environment.get(\"search\");",
											"",
											"",
											"if(statuses.length>0)",
											"{",
											"    postman.setNextRequest(\"getInvoicesLists\");",
											"}",
											"else",
											"{",
											"    pm.environment.clear();",
											"}",
											"",
											"//   Total 12 Positive scenarios             ",
											"if(statuses.length>11){",
											"    tests[\"Validating the response for negative scenario for company id : \" + CompanyId + \" Status \"+ ParamStatus]=",
											"         (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"         ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\") || (pm.response.json().error ==\"Unprocessable Entity\")) &&",
											"        ( pm.response.json().message==\"Not Found\" ||  pm.response.json().message==\"Bad Request\" || pm.response.json().message==\"Unprocessable Entity\" ) ;",
											"}",
											"else{",
											"       ",
											"    // 1. JSON schema validation",
											"",
											"    var schema;",
											"    ",
											"        var schemaDraft={",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"count\",",
											"        \"total_amount\",",
											"        \"invoices\"",
											"      ],",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"$id\": \"#/properties/count\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Count Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            5",
											"          ]",
											"        },",
											"        \"total_amount\": {",
											"          \"$id\": \"#/properties/total_amount\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Total_amount Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            0",
											"          ]",
											"        },",
											"        \"invoices\": {",
											"          \"$id\": \"#/properties/invoices\",",
											"          \"type\": \"array\",",
											"          \"title\": \"The Invoices Schema\",",
											"          \"items\": {",
											"            \"$id\": \"#/properties/invoices/items\",",
											"            \"type\": \"object\",",
											"            \"title\": \"The Items Schema\",",
											"            \"required\": [",
											"              \"bill_to\",",
											"              \"invoice_nbr\",",
											"              \"total_cost\",",
											"              \"created_at\",",
											"              \"status\",",
											"              \"last_modified_at\",",
											"              \"id\"",
											"            ],",
											"            \"properties\": {",
											"              \"bill_to\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Bill_to Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"SRVT\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"invoice_nbr\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Invoice_nbr Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"DRAFT_INV_LA_1\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"total_cost\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Total_cost Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  26061075",
											"                ]",
											"              },",
											"              \"created_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Created_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-08-08T07:16:02.865Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"status\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/status\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Status Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"draft\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"last_modified_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Last_modified_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"id\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/id\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Id Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  10",
											"                ]",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"",
											"        var schemaPaid= {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"count\",",
											"        \"total_amount\",",
											"        \"invoices\"",
											"      ],",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"$id\": \"#/properties/count\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Count Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            2",
											"          ]",
											"        },",
											"        \"total_amount\": {",
											"          \"$id\": \"#/properties/total_amount\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Total_amount Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            90",
											"          ]",
											"        },",
											"        \"invoices\": {",
											"          \"$id\": \"#/properties/invoices\",",
											"          \"type\": \"array\",",
											"          \"title\": \"The Invoices Schema\",",
											"          \"items\": {",
											"            \"$id\": \"#/properties/invoices/items\",",
											"            \"type\": \"object\",",
											"            \"title\": \"The Items Schema\",",
											"            \"required\": [",
											"              \"bill_to\",",
											"              \"invoice_nbr\",",
											"              \"received_amount\",",
											"              \"total_received_amount\",",
											"              \"total_cost\",",
											"              \"payment_due_date\",",
											"              \"paid_at\",",
											"              \"created_at\",",
											"              \"invoice_sent_at\",",
											"              \"status\",",
											"              \"last_modified_at\",",
											"              \"id\"",
											"            ],",
											"            \"properties\": {",
											"              \"bill_to\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Bill_to Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"NBB\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"invoice_nbr\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Invoice_nbr Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"INV_NBR_10\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"received_amount\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/received_amount\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Received_amount Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  50",
											"                ]",
											"              },",
											"              \"total_received_amount\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/total_received_amount\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Total_received_amount Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  90",
											"                ]",
											"              },",
											"              \"total_cost\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Total_cost Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  400",
											"                ]",
											"              },",
											"              \"payment_due_date\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Payment_due_date Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-08-29T20:17:41.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"paid_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/paid_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Paid_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-06-08T05:00:52.895Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"created_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Created_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2018-06-09T20:51:22.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"invoice_sent_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Invoice_sent_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2018-06-10T20:51:22.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"status\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/status\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Status Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"paid\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"last_modified_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Last_modified_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2018-04-10T20:51:22.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"id\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/id\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Id Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  1",
											"                ]",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"",
											"    var schemaReceivable = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"count\",",
											"        \"invoices\"",
											"      ],",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"$id\": \"#/properties/count\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Count Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            5",
											"          ]",
											"        },",
											"        \"invoices\": {",
											"          \"$id\": \"#/properties/invoices\",",
											"          \"type\": \"array\",",
											"          \"title\": \"The Invoices Schema\",",
											"          \"items\": {",
											"            \"$id\": \"#/properties/invoices/items\",",
											"            \"type\": \"object\",",
											"            \"title\": \"The Items Schema\",",
											"            \"required\": [",
											"              \"bill_to\",",
											"              \"invoice_nbr\",",
											"              \"balance_amount\",",
											"              \"payment_due_date\",",
											"              \"created_at\",",
											"              \"status\",",
											"              \"last_modified_at\"",
											"            ],",
											"            \"properties\": {",
											"              \"bill_to\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Bill_to Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"NBB\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"invoice_nbr\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Invoice_nbr Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"INV_NBR_1\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"balance_amount\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/balance_amount\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Balance_amount Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  300",
											"                ]",
											"              },",
											"              \"payment_due_date\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Payment_due_date Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-06-29T20:17:41.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"created_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Created_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-04-01T20:43:27.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"status\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/status\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Status Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"overdue\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"last_modified_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Last_modified_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-04-01T20:43:27.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"",
											"        var schemaSent={",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"count\",",
											"        \"total_amount\",",
											"        \"invoices\"",
											"      ],",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"$id\": \"#/properties/count\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Count Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            5",
											"          ]",
											"        },",
											"        \"total_amount\": {",
											"          \"$id\": \"#/properties/total_amount\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Total_amount Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            1400",
											"          ]",
											"        },",
											"        \"invoices\": {",
											"          \"$id\": \"#/properties/invoices\",",
											"          \"type\": \"array\",",
											"          \"title\": \"The Invoices Schema\",",
											"          \"items\": {",
											"            \"$id\": \"#/properties/invoices/items\",",
											"            \"type\": \"object\",",
											"            \"title\": \"The Items Schema\",",
											"            \"required\": [",
											"              \"bill_to\",",
											"              \"invoice_nbr\",",
											"              \"total_cost\",",
											"              \"payment_due_date\",",
											"              \"created_at\",",
											"              \"invoice_sent_at\",",
											"              \"status\",",
											"              \"last_modified_at\",",
											"              \"id\"",
											"            ],",
											"            \"properties\": {",
											"              \"bill_to\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Bill_to Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"NBB\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"invoice_nbr\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Invoice_nbr Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"INV_NBR_1\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"total_cost\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Total_cost Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  300",
											"                ]",
											"              },",
											"              \"payment_due_date\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Payment_due_date Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-06-29T20:17:41.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"created_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Created_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-04-01T20:43:27.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"invoice_sent_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Invoice_sent_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-05-01T20:43:27.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"status\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/status\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Status Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"overdue\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"last_modified_at\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Last_modified_at Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"2019-04-01T20:43:27.000Z\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"id\": {",
											"                \"$id\": \"#/properties/invoices/items/properties/id\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Id Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  9",
											"                ]",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"",
											"    if(ParamStatus==\"draft\")",
											"    {",
											"        schema=schemaDraft",
											"       // should be when Issue is fixed      schema=schemaDraft",
											"    }",
											"    ",
											"     if(ParamStatus==\"paid\")",
											"    {",
											"        schema=schemaPaid",
											"    }",
											"    ",
											"     if(ParamStatus==\"receivable\")",
											"    {",
											"        schema=schemaReceivable",
											"    }",
											"    ",
											"     if(ParamStatus==\"sent\")",
											"    {",
											"        schema=schemaSent",
											"    }",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"",
											"    // 2. Validation of data type of keys in reponse",
											"",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"",
											"",
											"   // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"",
											"    // 4. Verify response time is less than 1700ms",
											"",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () ",
											"    {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"",
											"",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"",
											"    pm.test(\"JSON response Body contains count: Verified\", function () ",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"count\");",
											"    });",
											"    ",
											"    if(count>0)",
											"    pm.test(\"JSON response Body contains total_amount: Verified\", function () ",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"total_amount\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains invoices: Verified\", function ()",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"invoices\");",
											"    });",
											"    ",
											"     var size= pm.response.json().invoices.length",
											"        console.log(\"size : \" + size);",
											"    ",
											"    if(size!==0 && size==pm.response.json().count)",
											"    {",
											"        pm.test(\"JSON response Body contains bill_to: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"bill_to\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains invoice_nbr: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
											"        });",
											"        ",
											"        if(ParamStatus==\"receivable\")",
											"        {",
											"            pm.test(\"JSON response Body contains balance_amount: Verified\", function ()",
											"            {",
											"                pm.expect(pm.response.text()).to.include(\"balance_amount\");",
											"            });",
											"        }",
											"        ",
											"        pm.test(\"JSON response Body contains total_cost: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"total_cost\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains status: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"status\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains payment_due_date: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"payment_due_date\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains created_at: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"created_at\");",
											"        });",
											"    }",
											"    else{",
											"        tests[\"Either size of invoice array is zero or size and count dont match. Size is: \" + size + \" count is \" + pm.response.json().count]=",
											"        pm.response.json().count==size;",
											"        ",
											"    }",
											"",
											"    // 6. JSON value check in reponse body",
											"",
											"        tests[\"Validate count is not null. Value of count is: \" +pm.response.json().count]=",
											"            pm.response.json().count !== null &&",
											"            pm.response.json().count !== ' '  &&",
											"            pm.response.json().count >= 0 ;",
											"            ",
											"        tests[\"Validate total_amount is not null. Value of total_amount is: \" +pm.response.json().total_amount]=",
											"            pm.response.json().total_amount !==null &&",
											"            pm.response.json().total_amount !==' '  &&",
											"            pm.response.json().total_amount >=0",
											"     ",
											"        if(size>0){",
											"            for (i=0;i<size;i++)",
											"                {",
											"                    var jsonData = pm.response.json().invoices[i]",
											"                    if (ParamStatus !==\"draft\")",
											"                    {",
											"                    ",
											"                        tests[\"Validate bill_to is not null. For i equals to : \" + i +\" Value of bill_to is: \" +jsonData.bill_to ] = ",
											"                            jsonData.bill_to !== null && ",
											"                            jsonData.bill_to !== ' ' && ",
											"                            jsonData.bill_to !== 0;",
											"                            ",
											"                        pm.test(\"Validate invoice_nbr is not null. For i equals to : \" + i +\"  Value of invoice_nbr is \" + jsonData.invoice_nbr, function()",
											"                        {",
											"                            pm.expect(jsonData.invoice_nbr).to.match(/[INV_NBR_]\\d{1}/);",
											"                        });",
											"                        ",
											"                        tests[\"Validate balance_amount is not null. For i equals to : \" + i +\"  Value of balance_amount is: \" +jsonData.balance_amount ] = ",
											"                            jsonData.balance_amount !== null && ",
											"                            jsonData.balance_amount !== ' '",
											"                            jsonData.balance_amount >=0 ;",
											"                            ",
											"                        tests[\"Validate total_cost is not null.  For i equals to : \" + i +\" Value of total_cost is: \" +jsonData.total_cost ] = ",
											"                            jsonData.total_cost !== null && ",
											"                            jsonData.total_cost !== ' ' && ",
											"                            jsonData.total_cost > 0 ;",
											"                            ",
											"                        tests[\"Validate status is not null.  For i equals to : \" + i +\" Value of status is: \" +jsonData.status ] = ",
											"                            jsonData.status == \"due\" || ",
											"                            jsonData.status == \"overdue\"||",
											"                            jsonData.status == \"paid\" ;    ",
											"                            ",
											"                        pm.test(\"Validate payment_due_date is not null. For i equals to : \" + i +\"  Value of payment_due_date is \" + jsonData.payment_due_date, function()",
											"                        {",
											"                            pm.expect(jsonData.payment_due_date).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                        });",
											"                        ",
											"                        pm.test(\"Validate created_at is not null. For i equals to : \" + i +\"  Value of created_at is \" + jsonData.created_at, function()",
											"                        {",
											"                            pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                        });",
											"                        ",
											"                        pm.test(\"Validate invoice_sent_at is not null.  For i equals to : \" + i +\" Value of invoice_sent_at is \" + jsonData.invoice_sent_at, function()",
											"                        {",
											"                            pm.expect(jsonData.invoice_sent_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
											"                        });",
											"                    }",
											"                    else",
											"                    {",
											"                        tests[\"Validate bill_to is not null. For i equals to : \" + i +\"  Value of bill_to is: \" +jsonData.bill_to ] = ",
											"                            jsonData.bill_to !== null ;",
											"                            ",
											"                        tests[\"Validate invoice_nbr is not null. For i equals to : \" + i +\"  Value of invoice_nbr is \" + jsonData.invoice_nbr] = ",
											"                            jsonData.invoice_nbr !== null && ",
											"                            jsonData.invoice_nbr !== 0;",
											"                        ",
											"                        tests[\"Validate balance_amount is not null.  For i equals to : \" + i +\" Value of balance_amount is: \" +jsonData.balance_amount ] = ",
											"                            jsonData.balance_amount !== null && ",
											"                            jsonData.balance_amount !== ' ';",
											"                            ",
											"                        tests[\"Validate total_cost is not null.  For i equals to : \" + i +\" Value of total_cost is: \" +jsonData.total_cost ] = ",
											"                            jsonData.total_cost !== null ;",
											"                            ",
											"                        tests[\"Validate status is not null.  For i equals to : \" + i +\" Value of status is: \" +jsonData.status + \" i is : \" + i ] = ",
											"                            jsonData.status == \"draft\";    ",
											"                            ",
											"                        tests[\"Validate payment_due_date is NULL.  For i equals to : \" + i +\" Value of payment_due_date is: \" +jsonData.payment_due_date ] = ",
											"                            jsonData.payment_due_date == null;",
											"                            ",
											"                         tests[\"Validate created_at is not null.  For i equals to : \" + i +\" Value of created_at is: \" +jsonData.created_at ] = ",
											"                            jsonData.created_at !== null;",
											"                            ",
											"                         tests[\"Validate invoice_sent_at is not null.  For i equals to : \" + i +\" Value of invoice_sent_at is: \" +jsonData.invoice_sent_at ] = ",
											"                            jsonData.invoice_sent_at !== null ;",
											"                    }",
											"            }",
											"        }",
											"",
											"    // 7. To print Application content type as JSON",
											"",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"    function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c526b989-c4f9-4e0e-b746-58f55915fdac",
										"exec": [
											"// Total Iterations 18",
											"// 6 Negative",
											"// 12 positive",
											"var compId=pm.environment.get(\"compId\");",
											"var statuses=pm.environment.get(\"statuses\");",
											"var yr=pm.environment.get(\"yr\");",
											"var mnth=pm.environment.get(\"mnth\");",
											"var sortBy=pm.environment.get(\"sortBy\");",
											"var srch=pm.environment.get(\"srch\");",
											"",
											"if(!compId || !statuses || compId==null || statuses==null ){",
											"    compId=[null, \"a\" , \"\" , 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1 ,1, 1, 1, 1, 1]",
											"    statuses=[\"draft\", \"paid\",\"receivable\",null, \"a\" , \"\", \"draft\", \"paid\",\"receivable\",\"sent\",\"draft\", \"paid\",\"receivable\",\"sent\",\"draft\", \"paid\",\"receivable\",\"sent\"];",
											"    yr=[\"2020\",\"2020\",\"2020\", null, \"a\" , \"\", \"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\"];",
											"    mnth=[\"\",\"\",\"\", null, \"a\" , \"\", \"08\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"];",
											"    sortBy=[ \"\", \"\", \"\", null, \"a\" , \"\", \"last_modified_at.asc\",\"due_date.desc\",\"invoice_date.asc\",\"invoice_date.desc\",\"last_modified_at.desc\",\"paid_at.desc\",\"due_date.asc\",\"paid_at.desc\",\"last_modified_at.asc\",\"invoice_sent_at.desc\",\"due_date.asc\",\"invoice_sent_at.asc\"];",
											"    srch=[\"\",\"\",\"\", null, \"a\" , \"\", \"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\"];",
											"}",
											"",
											"currentcomId=compId.shift()",
											"currentStatus=statuses.shift();",
											"currentYear=yr.shift();",
											"currentMonth= mnth.shift();",
											"currentSorting=sortBy.shift();",
											"currentsearch= srch.shift();",
											"",
											"pm.environment.set(\"CompanyId\",currentcomId)",
											"pm.environment.set(\"compId\",compId)",
											"",
											"pm.environment.set(\"ParamStatus\", currentStatus)",
											"pm.environment.set(\"statuses\", statuses)",
											"",
											"pm.environment.set(\"yr\", yr)",
											"pm.environment.set(\"year\", currentYear)",
											"",
											"pm.environment.set(\"mnth\", mnth)",
											"pm.environment.set(\"month\", currentMonth)",
											"",
											"pm.environment.set(\"sortBy\", sortBy)",
											"pm.environment.set(\"Sort_by\", currentSorting)",
											"",
											"pm.environment.set(\"srch\", srch)",
											"pm.environment.set(\"search\", currentsearch)",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{CompanyId}}/invoices?status={{ParamStatus}}&year={{year}}&month={{month}}&sort_by={{Sort_by}}&search={{search}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{CompanyId}}",
										"invoices"
									],
									"query": [
										{
											"key": "status",
											"value": "{{ParamStatus}}"
										},
										{
											"key": "year",
											"value": "{{year}}"
										},
										{
											"key": "month",
											"value": "{{month}}"
										},
										{
											"key": "sort_by",
											"value": "{{Sort_by}}"
										},
										{
											"key": "search",
											"value": "{{search}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getInvoiceItemSuggestion",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44b8b6a6-6f49-4439-8f61-223f0a1a34c3",
										"exec": [
											"var compId= pm.environment.get(\"compId\")",
											"var custId= pm.environment.get(\"custId\")",
											"var itmName= pm.environment.get(\"itmName\")",
											"",
											"if(!compId || !custId || !itmName || compId==null || custId==null || itmName==null)",
											"{",
											"    compId=[\"\", null, \"aa\" , \"1\" ,\"1\" , \"1\",\"1\"]",
											"    custId=[\"\", null, \"aa\" , \"1\" , \"1\" ,\"1\" ,\"1\"]",
											"    itmName=[\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"\", null,\"Non Existing\", \"SWX Renewal\"]",
											"}",
											"",
											"currentCompId=compId.shift()",
											"currentCustId=custId.shift()",
											"currentItemName=itmName.shift()",
											"",
											"pm.environment.set(\"CompanyId\",currentCompId)",
											"pm.environment.set(\"compId\",compId)",
											"",
											"pm.environment.set(\"CustomerId\",currentCustId)",
											"pm.environment.set(\"custId\",custId)",
											"",
											"pm.environment.set(\"ItemName\",currentItemName)",
											"pm.environment.set(\"itmName\",itmName)",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ddbc0105-3457-42b1-bcc3-e4d04b1a292e",
										"exec": [
											"var compId = pm.environment.get(\"compId\");",
											"var CompanyId= pm.environment.get(\"CompanyId\");",
											"var custId= pm.environment.get(\"custId\");",
											"var CustomerId=pm.environment.get(\"CustomerId\");",
											"var itmName= pm.environment.get(\"itmName\");",
											"var ItemName= pm.environment.get(\"ItemName\");",
											"",
											" if(compId.length>0 && (ItemName!==\"Non Existing\" && ItemName!==\"\" && ItemName!==null))",
											" {",
											"     tests[\"Validating the response for negative scenario for Company Id : \" + CompanyId + \"Customer Id \"+ CustomerId +\" item name :\" + ItemName]=",
											"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"     ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"     ((pm.response.json().message==\"Unprocessable Entity\") || (pm.response.json().message==\"Not Found\") || (pm.response.json().message==\"Bad Request\") ) ;",
											"    ",
											"    postman.setNextRequest(\"getInvoiceItemSuggestion\");",
											"     ",
											" }",
											" else",
											" ",
											"{        // 1. JSON schema validation",
											"        ",
											"        var schema= {",
											"        \"definitions\": {},",
											"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"        \"$id\": \"http://example.com/root.json\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Root Schema\",",
											"        \"required\": [",
											"            \"item_suggestions\"",
											"        ],",
											"        \"properties\": {",
											"            \"item_suggestions\": {",
											"            \"$id\": \"#/properties/item_suggestions\",",
											"            \"type\": \"array\",",
											"            \"title\": \"The Item_suggestions Schema\",",
											"            \"items\": {",
											"                    \"$id\": \"#/properties/item_suggestions/items\",",
											"                    \"type\": \"object\",",
											"                    \"title\": \"The Items Schema\",",
											"                    \"required\": [",
											"                      \"id\",",
											"                      \"item\"",
											"                    ],",
											"                    \"properties\": {",
											"                      \"id\": {",
											"                        \"$id\": \"#/properties/item_suggestions/items/properties/id\",",
											"                        \"type\": \"string\",",
											"                        \"title\": \"The Id Schema\",",
											"                        \"default\": \"\",",
											"                        \"examples\": [",
											"                          \"2\"",
											"                        ],",
											"                        \"pattern\": \"^(.*)$\"",
											"                      },",
											"                      \"item\": {",
											"                        \"$id\": \"#/properties/item_suggestions/items/properties/item\",",
											"                        \"type\": \"string\",",
											"                        \"title\": \"The Item Schema\",",
											"                        \"default\": \"\",",
											"                        \"examples\": [",
											"                          \"SWX Renewal\"",
											"                        ],",
											"                        \"pattern\": \"^(.*)$\"",
											"                      }",
											"                    }",
											"                  }",
											"                }",
											"              }",
											"            };",
											"            ",
											"            ",
											"        pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"        function() {",
											"            pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"        }",
											"        );",
											"        ",
											"        // 2. Validation of data type of keys in reponse",
											"    ",
											"        if (!tv4.validate(pm.response.json(), schema))",
											"        {",
											"            var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"                if (errors.length==1){",
											"                    pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                        function() {",
											"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                        }",
											"                            );",
											"                }",
											"               ",
											"               if(errors.length>1){",
											"                for(i=0;i<errors.length;i++)   {",
											"                           console.log(errors[i].message)",
											"                           pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                        })  ",
											"                } ",
											"               }",
											"            ",
											"        }",
											"    ",
											"    ",
											"        // 3. Verify Status code is 200",
											"        pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"            pm.response.to.have.status(200);",
											"            pm.response.to.be.ok;",
											"        });",
											"    ",
											"        // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () ",
											"        {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"    ",
											"    ",
											"        //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains item suggestions: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"item_suggestions\");",
											"        });",
											"        ",
											"         if(ItemName==\"Non Existing\")",
											"    {",
											"        ",
											"        tests[\"Validating the response for Non existing item Name. Company Id : \" + CompanyId + \"Customer Id \"+ CustomerId +\" item name :\" + ItemName]=",
											"        pm.response.to.have.status(200) &&",
											"        pm.response.json().item_suggestions.length==0;",
											"        postman.setNextRequest(\"getInvoiceItemSuggestion\")",
											"        ",
											"    }",
											"    else{",
											"        if(ItemName==\"\" || ItemName==null)",
											"        {",
											"            postman.setNextRequest(\"getInvoiceItemSuggestion\")",
											"        }",
											"        else{",
											"            pm.environment.set(\"compId\", null);",
											"            pm.environment.set(\"custId\",null);",
											"            pm.environment.set(\"itmName\",null);",
											"        }",
											"    ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () ",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains item: Verified\", function ()",
											"        {",
											"            pm.expect(pm.response.text()).to.include(\"item\");",
											"        });",
											"        ",
											"        ",
											"        // 6. JSON value check in reponse body",
											"    ",
											"        var jsonData=pm.response.json().item_suggestions",
											"        for(i=0;i<jsonData.length;i++)",
											"        {",
											"            tests[\"Validate id is not null. Value of id is: \" +jsonData[i].id]=",
											"                jsonData[i].id !== null &&",
											"                jsonData[i].id !== ' '  &&",
											"                jsonData[i].id >= 0 ;",
											"                ",
											"            tests[\"Validate item is not null. Value of item is: \" +jsonData[i].item]=",
											"                jsonData[i].item !==null &&",
											"                jsonData[i].item !==' '  &&",
											"                jsonData[i].item.length >=3 ;",
											"        }",
											"        ",
											"        // 7. To print Application content type as JSON",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"    }",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{CompanyId}}/invoice_items?customer_id={{CustomerId}}&item={{ItemName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{CompanyId}}",
										"invoice_items"
									],
									"query": [
										{
											"key": "customer_id",
											"value": "{{CustomerId}}"
										},
										{
											"key": "item",
											"value": "{{ItemName}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "addAccount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b8910e4-012d-4561-a1fe-7aab3cb79d97",
										"exec": [
											"var names=pm.environment.get(\"names\")",
											"var name=pm.environment.get(\"name\")",
											"",
											"if(!names || names==null)",
											"{",
											"    names=[\"\", null, \"{{}}\", \"Design Capital\"];",
											"}",
											"",
											"currentName=names.shift();",
											"",
											"pm.environment.set(\"names\",names);",
											"pm.environment.set(\"name\",currentName);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "451f18f4-039a-46fd-9e67-ffbc136e8ad6",
										"exec": [
											"// Get the value of Invoice_Number and array InvNum from pre-request script.",
											"var names = pm.environment.get(\"names\")",
											"var name = pm.environment.get(\"name\")",
											"",
											"if(names.length>0)",
											"{",
											"    console.log(\"++++++++++++++++++\")",
											"    tests[\"Validating the response for negative scenario for name : \" + name]=",
											"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"            ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"     (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"     ",
											"         postman.setNextRequest(\"addAccount\");",
											"}",
											"else{",
											"    ",
											"    pm.environment.clear();",
											"    ",
											"     // 1. JSON schema validation",
											"        ",
											"         var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"account\"",
											"      ],",
											"      \"properties\": {",
											"        \"account\": {",
											"          \"$id\": \"#/properties/account\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Account Schema\",",
											"          \"required\": [",
											"            \"name\",",
											"            \"owner_id\"",
											"          ],",
											"          \"properties\": {",
											"            \"name\": {",
											"              \"$id\": \"#/properties/account/properties/name\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Name Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"LemoneyNivedita\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"owner_id\": {",
											"              \"$id\": \"#/properties/account/properties/owner_id\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Owner_id Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                6",
											"              ]",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"            ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"",
											"    if(tv4.validate(pm.response.json(), schema))",
											"    {",
											"        //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains account: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"account\");",
											"        });",
											"        ",
											"         pm.test(\"JSON response Body contains name: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"name\");",
											"        });",
											"        ",
											"         pm.test(\"JSON response Body contains owner_id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"owner_id\");",
											"        });",
											"        ",
											"        // 6. Verify response body field values",
											"        var jsonData = pm.response.json().account",
											"        ",
											"        tests[\"Validate name is not null. Value of name is: \" +jsonData.name ] = ",
											"                            jsonData.name !== null && ",
											"                            jsonData.name !== ' ' &&",
											"                            jsonData.name.length >0;",
											"        ",
											"        tests[\"Validate owner_id is not null. Value of owner_id is: \" +jsonData.owner_id ] = ",
											"                            jsonData.owner_id !== null && ",
											"                            jsonData.owner_id !== ' ' &&",
											"                            jsonData.owner_id >0;",
											"    }",
											"    // 7. To print Application content type as JSON",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"    function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/account",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "getListOfAccounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5b37590-6be3-42ee-a886-7a3ce8981be6",
										"exec": [
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"accounts\"",
											"  ],",
											"  \"properties\": {",
											"    \"accounts\": {",
											"      \"$id\": \"#/properties/accounts\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Accounts Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/accounts/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"name\",",
											"          \"owner_id\"",
											"        ],",
											"        \"properties\": {",
											"          \"name\": {",
											"            \"$id\": \"#/properties/accounts/items/properties/name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"string\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"owner_id\": {",
											"            \"$id\": \"#/properties/accounts/items/properties/owner_id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Owner_id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              0",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"}",
											");",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                }",
											"                    );",
											"        }",
											"       ",
											"       if(errors.length>1){",
											"        for(i=0;i<errors.length;i++)   {",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                })  ",
											"        } ",
											"       }",
											"    ",
											"}",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"  ",
											"if(tv4.validate(pm.response.json(),schema))",
											"{",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"    pm.test(\"JSON response Body contains accounts: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"accounts\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"JSON response Body contains name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"name\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"JSON response Body contains owner_id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"owner_id\");",
											"    });",
											"    ",
											"    //6. JSON value check in reponse body",
											"    try{",
											"        var size= pm.response.json().accounts.length",
											"    }",
											"    catch(err){",
											"        console.log(\" Error in accounts.length. Actual error is : \" + err)   ",
											"    }",
											"    for (i=0;i<size;i++){",
											"        ",
											"        var jsonData = pm.response.json().accounts[i]",
											"    ",
											"        tests[\"Validate owner_id is not null.  For i equals to : \" + i +\" Value of owner_id is: \" +jsonData.id ] = ",
											"            jsonData.owner_id !== null && ",
											"            jsonData.owner_id !== ' ' && ",
											"            jsonData.owner_id !== 0;",
											"            ",
											"        tests[\"Validate name is not null. For i equals to : \" + i +\"  Value of name is \" + jsonData.name] = ",
											"            jsonData.name !== null && ",
											"            jsonData.name !== ' ' && ",
											"            jsonData.name !== 0;",
											"    }",
											"}",
											"",
											"// 7. To print Application content type as JSON",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/accounts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAccountDetails",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09563291-4e08-4372-bc82-3e892fd8b3de",
										"exec": [
											"var account_id= pm.environment.get(\"account_id\");",
											"var accountId= pm.environment.get(\"accountId\");",
											"",
											"if(!accountId || accountId==null){",
											"    accountId=[\"\",null,\"a\",1009,1];",
											"}",
											"currentAccountId=accountId.shift();",
											"",
											"pm.environment.set(\"accountId\",accountId)",
											"pm.environment.set(\"account_id\",currentAccountId)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dec50e10-0ae4-4e0f-8acc-8994885f0027",
										"exec": [
											"var account_id= pm.environment.get(\"account_id\");",
											"var accountId= pm.environment.get(\"accountId\");",
											"",
											"if(accountId.length>0){",
											"    tests[\"Validating the response for negative scenario for account id : \" + account_id ]=",
											"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"     ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"    postman.setNextRequest(\"getAccountDetails\")",
											"}",
											"else{",
											"    pm.environment.clear();",
											"",
											"        // 1. JSON schema validation",
											"        ",
											"            var schema = {",
											"          \"definitions\": {},",
											"          \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"          \"$id\": \"http://example.com/root.json\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Root Schema\",",
											"          \"required\": [",
											"            \"companies\"",
											"          ],",
											"          \"properties\": {",
											"            \"companies\": {",
											"              \"$id\": \"#/properties/companies\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Companies Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/companies/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"id\",",
											"                  \"company_name\"",
											"                ],",
											"                \"properties\": {",
											"                  \"id\": {",
											"                    \"$id\": \"#/properties/companies/items/properties/id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      1",
											"                    ]",
											"                  },",
											"                  \"company_name\": {",
											"                    \"$id\": \"#/properties/companies/items/properties/company_name\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Company_name Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"Language\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            }",
											"          }",
											"        };",
											"        ",
											"        ",
											"        pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"        function() {",
											"          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"        }",
											"        );",
											"        ",
											"        // 2. Validation of data type of keys in reponse",
											"        ",
											"        if (!tv4.validate(pm.response.json(), schema))",
											"        {",
											"            var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"                if (errors.length==1){",
											"                    pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                        function() {",
											"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                        }",
											"                            );",
											"                }",
											"               ",
											"               if(errors.length>1){",
											"                for(i=0;i<errors.length;i++)   {",
											"                           console.log(errors[i].message)",
											"                           pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                        })  ",
											"                } ",
											"               }",
											"            ",
											"        }",
											"        ",
											"        // 3. Verify Status code is 200",
											"        pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"            pm.response.to.have.status(200);",
											"            pm.response.to.be.ok;",
											"        });",
											"        ",
											"        ",
											"        // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"        ",
											"            ",
											"            if(tv4.validate(pm.response.json(),schema))",
											"            {",
											"                var jsonData = pm.response.json().companies;",
											"                noOfcompanies=pm.response.json().companies.length",
											"",
											"                // 5. Verify the response body",
											"                pm.test(\"JSON response Body contains companies: Verified\", function ()",
											"                {",
											"                    pm.expect(pm.response.text()).to.include(\"companies\");",
											"                });",
											"                ",
											"                if(noOfcompanies>0)",
											"                {",
											"                    pm.test(\"JSON response Body contains id: Verified\", function ()",
											"                    {",
											"                        pm.expect(pm.response.text()).to.include(\"id\");",
											"                    });",
											"                    ",
											"                    pm.test(\"JSON response Body contains company_name: Verified\", function ()",
											"                    {",
											"                        pm.expect(pm.response.text()).to.include(\"company_name\");",
											"                    });",
											"                }",
											"                ",
											"                //6. Verify the values in the response body",
											"                ",
											"                if(noOfcompanies>0){",
											"                    tests[\"Validate id is not null. Value of id is \" + jsonData[0].id] = ",
											"                        jsonData[0].id !== null && ",
											"                        jsonData[0].id !== ' ' && ",
											"                        jsonData[0].id > 0;",
											"                        ",
											"                    tests[\"Validate company_name is not null. Value of company_name is \" + jsonData[0].company_name] = ",
											"                        jsonData[0].company_name !== null && ",
											"                        jsonData[0].company_name !== ' ' && ",
											"                        jsonData[0].company_name.length>2;",
											"                }",
											"            ",
											"        }",
											"        //7. To print Application content type as JSON",
											"    ",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"    function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/account/{{account_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"account",
										"{{account_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Customers",
			"item": [
				{
					"name": "PUT",
					"item": [
						{
							"name": "updateCustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb3fdeff-2ec6-419d-929b-2abc24022385",
										"exec": [
											"var billTo=pm.environment.get(\"billTo\");",
											"var gstinNum=pm.environment.get(\"gstinNum\");",
											"var cntry=pm.environment.get(\"cntry\");",
											"var addrs=pm.environment.get(\"addrs\");",
											"var stateName=pm.environment.get(\"stateName\");",
											"var cityName=pm.environment.get(\"cityName\");",
											"var pin=pm.environment.get(\"pin\");",
											"var contactPerson=pm.environment.get(\"contactPerson\");",
											"var contactEmail=pm.environment.get(\"contactEmail\");",
											"var contactNumber=pm.environment.get(\"contactNumber\");",
											"var ids= pm.environment.get(\"ids\")",
											"var addressId= pm.environment.get(\"addressId\")",
											"",
											"",
											"if(!billTo || !gstinNum || !cntry || !addrs || !stateName || !cityName || !pin || !contactPerson || !contactEmail || !contactNumber || !ids || !addressId)    ",
											"{",
											"     // id and addressId combination 1. id or addressid does not exist in DB. 2. Id and Address Id exists in DB but combination does not exist.",
											"    ids=[\"\",null,\"a\",500, 200,1,25,25,25];",
											"    addressId=[\"\",null,\"a\",500, 1,200,4,4,4];",
											"    ",
											"    billTo=[\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"\",null,\"NBB\"];",
											"    gstinNum=[\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"\",\"67\",\"23AAKCA2311H1Z8\"];",
											"    cntry=[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"\",null,\"India\"];",
											"    addrs=[\"Design\",\"Design\",\"Design\",\"Design\",\"Design\",\"Design\",\"\",null,\"Design capital , bangalore\"];",
											"    stateName=[\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"\",null,\"Karnataka\"];",
											"    cityName=[\"bangalore\",\"bangalore\",\"bangalore\",\"bangalore\",\"bangalore\",\"bangalore\",\"\",null,\"bangalore\"];",
											"    pin=[546654,546654,546654,546654,546654,546654,\"\",null,546654];",
											"    contactPerson=[\"Niv\",\"Niv\",\"Niv\",\"Niv\",\"Niv\",\"Niv\",\"\",null,\"Niv\"];",
											"    contactEmail=[\"dd@dd.com\",\"dd@dd.com\",\"dd@dd.com\",\"dd@dd.com\",\"dd@dd.com\",\"dd@dd.com\",\"\",null,\"dd@dd.com\"];",
											"    contactNumber=[1234567895,1234567895,1234567895,1234567895,1234567895,1234567895,\"\",null,1234567895];",
											"}",
											"",
											"currentBillTo=billTo.shift();",
											"currentGSTIN=gstinNum.shift();",
											"currentCountry=cntry.shift();",
											"currentAddress=addrs.shift();",
											"currentState=stateName.shift();",
											"currentCity=cityName.shift();",
											"currentPincode=pin.shift();",
											"currentContactPerson=contactPerson.shift();",
											"currentContactEmail=contactEmail.shift();",
											"currentContactNumber=contactNumber.shift();",
											"currentID= ids.shift();",
											"currentAddressId= addressId.shift();",
											"",
											"",
											"pm.environment.set(\"bill_to\",currentBillTo)",
											"pm.environment.set(\"billTo\",billTo)",
											"",
											"pm.environment.set(\"gstin\",currentGSTIN)",
											"pm.environment.set(\"gstinNum\",gstinNum)",
											"",
											"pm.environment.set(\"country\",currentCountry)",
											"pm.environment.set(\"cntry\",cntry)",
											"",
											"pm.environment.set(\"address\",currentAddress)",
											"pm.environment.set(\"addrs\",addrs)",
											"",
											"pm.environment.set(\"state\",currentState)",
											"pm.environment.set(\"stateName\",stateName)",
											"    ",
											"pm.environment.set(\"city\",currentCity)",
											"pm.environment.set(\"cityName\",cityName)",
											"",
											"pm.environment.set(\"pincode\",currentPincode)",
											"pm.environment.set(\"pin\",pin)",
											"",
											"pm.environment.set(\"contact_person\",currentContactPerson)",
											"pm.environment.set(\"contactPerson\",contactPerson)",
											"",
											"pm.environment.set(\"contact_email\",currentContactEmail)",
											"pm.environment.set(\"contactEmail\",contactEmail)",
											"",
											"pm.environment.set(\"contact_number\",currentContactNumber)",
											"pm.environment.set(\"contactNumber\",contactNumber)",
											"",
											"pm.environment.set(\"id\",currentID)",
											"pm.environment.set(\"ids\",ids)",
											"",
											"pm.environment.set(\"address_id\",currentAddressId)",
											"pm.environment.set(\"addressId\",addressId)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e2ba6e2-b1a7-400b-a573-84348559804b",
										"exec": [
											"var id= pm.environment.get(\"id\");",
											"var address_id= pm.environment.get(\"address_id\");",
											"var addressId= pm.environment.get(\"addressId\");",
											"",
											"if(addressId.length>0){",
											"   tests[\"Validating the response for negative scenario of Id : \" + id + \" and address id \" + address_id ]=",
											"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"             ((pm.response.json().error ==\"Unprocessable Entity\") ||(pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"             ((pm.response.json().message==\"Unprocessable Entity\") || (pm.response.json().message==\"Not Found\") || (pm.response.json().message==\"Bad Request\"))",
											"    postman.setNextRequest(\"updateCustomer\")",
											"}",
											"else{",
											"    pm.environment.set(\"ids\",null)",
											"    pm.environment.set(\"addressId\",null)",
											"    pm.environment.set(\"billTo\",null);",
											"    pm.environment.set(\"gstinNum\",null);",
											"    pm.environment.set(\"cntry\",null);",
											"    pm.environment.set(\"addrs\",null);",
											"    pm.environment.set(\"stateName\",null);",
											"    pm.environment.set(\"cityName\",null);",
											"    pm.environment.set(\"pin\",null);",
											"    pm.environment.set(\"contactPerson\",null);",
											"    pm.environment.set(\"contactEmail\",null);",
											"    pm.environment.set(\"contactNumber\",null)",
											"    ",
											"",
											"    // 1. JSON schema validation",
											"        var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"company_customer\"",
											"      ],",
											"      \"properties\": {",
											"        \"company_customer\": {",
											"          \"$id\": \"#/properties/company_customer\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Company_customer Schema\",",
											"          \"required\": [",
											"            \"id\",",
											"            \"address_id\",",
											"            \"customer_name\",",
											"            \"status\"",
											"          ],",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"$id\": \"#/properties/company_customer/properties/id\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Id Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                400",
											"              ]",
											"            },",
											"            \"address_id\": {",
											"              \"$id\": \"#/properties/company_customer/properties/address_id\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Address_id Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                500",
											"              ]",
											"            },",
											"            \"customer_name\": {",
											"              \"$id\": \"#/properties/company_customer/properties/customer_name\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Customer_name Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"Language\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"status\": {",
											"              \"$id\": \"#/properties/company_customer/properties/status\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Status Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"success\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    // 3. Verify Status code is 200",
											"        pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"            pm.response.to.have.status(200);",
											"            pm.response.to.be.ok;",
											"        });",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"    ",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains company_customer: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"company_customer\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains address_id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"address_id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains customer_name: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"customer_name\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains status: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"status\");",
											"        });",
											"        ",
											"    //6. Validation of response data ",
											"    ",
											"         var company_customer=pm.response.json().company_customer",
											"         ",
											"             tests[\"Validate id is not null, blank or 0. Value of id is : \" + company_customer.id]=",
											"                 company_customer.id!==\"\" &&",
											"                 company_customer.id!==null &&",
											"                 company_customer.id>0;",
											"                 ",
											"            tests[\"Validate address_id is not null, blank or 0. Value of address_id is : \" + company_customer.address_id]=",
											"                 company_customer.address_id!==\"\" &&",
											"                 company_customer.address_id!==null &&",
											"                 company_customer.address_id>0;",
											"                 ",
											"             tests[\"Validate customer_name is not null or blank. Value of customer_name is : \" + company_customer.customer_name]=",
											"                 company_customer.customer_name!==\"\" &&",
											"                 company_customer.customer_name!==null &&",
											"                 company_customer.customer_name.length>0;",
											"                 ",
											"             tests[\"Validate status is success for valid values. Value of status is : \" + company_customer.status]=",
											"                 company_customer.status==\"success\";",
											"         ",
											"    //7. Verification of content type",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"} ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n  \"bill_to\": \"{{bill_to}}\",\n  \"gstin\": \"{{gstin}}\",\n  \"country\": \"{{country}}\",\n  \"address\": \"{{address}}\",\n  \"state\": \"{{state}}\",\n  \"city\": \"{{city}}\",\n  \"pincode\": \"{{pincode}}\",\n  \"contact_person\": \"{{contact_person}}\",\n  \"contact_email\": \"{{contact_email}}\",\n  \"contact_number\": \"{{contact_number}}\",\n  \"id\": \"{{id}}\",\n  \"address_id\": \"{{address_id}}\"\n}\n"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/company/1/customers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"company",
										"1",
										"customers"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "addCustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "585f5542-dbc3-40b1-aac3-5dd706d5eadf",
										"exec": [
											"// REQUEST BODY",
											"    /*{\"bill_to\": \"NBB\",\"gstin\": \"23AAKCA2311H1Z8\",\"country\": \"India\", \"address\": \"Design capital , bangalore\",\"state\": \"Karnataka\",\"city\": \"bangalore\",\"pincode\": 546654,\"contact_person\": \"Niv\",\"contact_email\": \"dd@dd.com\",\"contact_number\": 1234567895}*/",
											"//Setting Request Body Parameters",
											"",
											"var billTo=pm.environment.get(\"billTo\");",
											"var bill_to=pm.environment.get(\"bill_to\");",
											"",
											"var gstinNum=pm.environment.get(\"gstinNum\");",
											"var gstin=pm.environment.get(\"gstin\");",
											"",
											"var cntry=pm.environment.get(\"cntry\");",
											"var country=pm.environment.get(\"country\");",
											"",
											"var addrs=pm.environment.get(\"addrs\");",
											"var address=pm.environment.get(\"address\");",
											"",
											"var state=pm.environment.get(\"state\");",
											"var stateName=pm.environment.get(\"stateName\");",
											"",
											"var city=pm.environment.get(\"city\");",
											"var cityName=pm.environment.get(\"cityName\");",
											"",
											"var pincode=pm.environment.get(\"pincode\");",
											"var pin=pm.environment.get(\"pin\");",
											"",
											"var contactPerson=pm.environment.get(\"contactPerson\");",
											"var contact_person=pm.environment.get(\"contact_person\");",
											"",
											"var contactEmail=pm.environment.get(\"contactEmail\");",
											"var contact_email=pm.environment.get(\"contact_email\");",
											"",
											"var contactNumber=pm.environment.get(\"contactNumber\");",
											"var contact_number=pm.environment.get(\"contact_number\");",
											"",
											"var companyId=pm.environment.get(\"companyId\")",
											"var company_id= pm.environment.get(\"company_id\")",
											"",
											"if(!billTo || !gstinNum || !cntry || !addrs || !stateName || !cityName || !pin || !contactPerson || !contactEmail || !contactNumber || !companyId)    ",
											"{",
											"    billTo=[\"NBB\",\"NBB\",\"NBB\",\"\",null,\"NBB\"];",
											"    gstinNum=[\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"23AAKCA2311H1Z8\",\"\",\"67\",\"23AAKCA2311H1Z8\"];",
											"    cntry=[\"India\",\"India\",\"India\",\"\",null,\"India\"];",
											"    addrs=[\"Design\",\"Design\",\"Design\",\"\",null,\"Design capital , bangalore\"];",
											"    stateName=[\"Karnataka\",\"Karnataka\",\"Karnataka\",\"\",null,\"Karnataka\"];",
											"    cityName=[\"bangalore\",\"bangalore\",\"bangalore\",\"\",null,\"bangalore\"];",
											"    pin=[546654,546654,546654,\"\",null,546654];",
											"    contactPerson=[\"Niv\",\"Niv\",\"Niv\",\"\",null,\"Niv\"];",
											"    contactEmail=[\"dd@dd.com\",\"dd@dd.com\",\"dd@dd.com\",\"\",null,\"dd@dd.com\"];",
											"    contactNumber=[1234567895,1234567895,1234567895,\"\",null,1234567895]",
											"    companyId=[\"\",null,\"a\",1,1,1]",
											"}",
											"",
											"currentBillTo=billTo.shift();",
											"currentGSTIN=gstinNum.shift();",
											"currentCountry=cntry.shift();",
											"currentAddress=addrs.shift();",
											"currentState=stateName.shift();",
											"currentCity=cityName.shift();",
											"currentPincode=pin.shift();",
											"currentContactPerson=contactPerson.shift();",
											"currentContactEmail=contactEmail.shift();",
											"currentContactNumber=contactNumber.shift();",
											"currentCompanyId= companyId.shift();",
											"",
											"pm.environment.set(\"bill_to\",currentBillTo)",
											"pm.environment.set(\"billTo\",billTo)",
											"",
											"pm.environment.set(\"gstin\",currentGSTIN)",
											"pm.environment.set(\"gstinNum\",gstinNum)",
											"",
											"pm.environment.set(\"country\",currentCountry)",
											"pm.environment.set(\"cntry\",cntry)",
											"",
											"pm.environment.set(\"address\",currentAddress)",
											"pm.environment.set(\"addrs\",addrs)",
											"",
											"pm.environment.set(\"state\",currentState)",
											"pm.environment.set(\"stateName\",stateName)",
											"    ",
											"pm.environment.set(\"city\",currentCity)",
											"pm.environment.set(\"cityName\",cityName)",
											"",
											"pm.environment.set(\"pincode\",currentPincode)",
											"pm.environment.set(\"pin\",pin)",
											"",
											"pm.environment.set(\"contact_person\",currentContactPerson)",
											"pm.environment.set(\"contactPerson\",contactPerson)",
											"",
											"pm.environment.set(\"contact_email\",currentContactEmail)",
											"pm.environment.set(\"contactEmail\",contactEmail)",
											"",
											"pm.environment.set(\"contact_number\",currentContactNumber)",
											"pm.environment.set(\"contactNumber\",contactNumber)",
											"",
											"pm.environment.set(\"company_id\",currentCompanyId)",
											"pm.environment.set(\"companyId\",companyId)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d5992bc-b4aa-4b30-b1eb-d39fd9bf970a",
										"exec": [
											"var companyId= pm.environment.get(\"companyId\")",
											"var company_id= pm.environment.get(\"company_id\")",
											"",
											"if(companyId.length>0){",
											"   tests[\"Validating the response for negative scenario of company Id : \" + company_id ]=",
											"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"             ((pm.response.json().error ==\"Unprocessable Entity\") ||(pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"             ((pm.response.json().message==\"Unprocessable Entity\") || (pm.response.json().message==\"Not Found\") || (pm.response.json().message==\"Bad Request\"))",
											"    postman.setNextRequest(\"addCustomer\")",
											"}",
											"else{",
											"    ",
											"    pm.environment.set(\"companyId\",null)",
											"    pm.environment.set(\"billTo\",null);",
											"    pm.environment.set(\"gstinNum\",null);",
											"    pm.environment.set(\"cntry\",null);",
											"    pm.environment.set(\"addrs\",null);",
											"    pm.environment.set(\"stateName\",null);",
											"    pm.environment.set(\"cityName\",null);",
											"    pm.environment.set(\"pin\",null);",
											"    pm.environment.set(\"contactPerson\",null);",
											"    pm.environment.set(\"contactEmail\",null);",
											"    pm.environment.set(\"contactNumber\",null)",
											"    ",
											"",
											"    // 1. JSON schema validation",
											"    var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"company_customer\"",
											"  ],",
											"  \"properties\": {",
											"    \"company_customer\": {",
											"      \"$id\": \"#/properties/company_customer\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Company_customer Schema\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"address_id\",",
											"        \"customer_name\",",
											"        \"status\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"$id\": \"#/properties/company_customer/properties/id\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Id Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            25",
											"          ]",
											"        },",
											"        \"address_id\": {",
											"          \"$id\": \"#/properties/company_customer/properties/address_id\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Address_id Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            4",
											"          ]",
											"        },",
											"        \"customer_name\": {",
											"          \"$id\": \"#/properties/company_customer/properties/customer_name\",",
											"          \"type\": \"string\",",
											"          \"title\": \"The Customer_name Schema\",",
											"          \"default\": \"\",",
											"          \"examples\": [",
											"            \"NBB\"",
											"          ],",
											"          \"pattern\": \"^(.*)$\"",
											"        },",
											"        \"status\": {",
											"          \"$id\": \"#/properties/company_customer/properties/status\",",
											"          \"type\": \"string\",",
											"          \"title\": \"The Status Schema\",",
											"          \"default\": \"\",",
											"          \"examples\": [",
											"            \"success\"",
											"          ],",
											"          \"pattern\": \"^(.*)$\"",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" Created : Verified\", function () {",
											"        pm.response.to.have.status(201);",
											"        pm.response.to.be.success;",
											"    });",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"    ",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains company: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"company\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains customer_name: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"customer_name\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains status: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"status\");",
											"        });",
											"        ",
											"    //6. Validation of response data ",
											"    ",
											"         var company_customer=pm.response.json().company_customer",
											"         ",
											"             tests[\"Validate id is not null, blank or 0. Value of id is : \" + company_customer.id]=",
											"                 company_customer.id!==\"\" &&",
											"                 company_customer.id!==null &&",
											"                 company_customer.id>0;",
											"                 ",
											"             tests[\"Validate customer_name is not null or blank. Value of customer_name is : \" + company_customer.customer_name]=",
											"                 company_customer.customer_name!==\"\" &&",
											"                 company_customer.customer_name!==null &&",
											"                 company_customer.customer_name.length>0;",
											"                 ",
											"             tests[\"Validate status is success for valid values. Value of status is : \" + company_customer.status]=",
											"                 company_customer.status==\"success\";",
											"         ",
											"    //7. Verification of content type",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"} ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bill_to\": \"{{bill_to}}\",\n  \"gstin\": \"{{gstin}}\",\n  \"country\": \"{{country}}\",\n  \"address\": \"{{address}}\",\n  \"state\": \"{{state}}\",\n  \"city\": \"{{city}}\",\n  \"pincode\": \"{{pincode}}\",\n  \"contact_person\": \"{{contact_person}}\",\n  \"contact_email\": \"{{contact_email}}\",\n  \"contact_number\": \"{{contact_number}}\"\n}"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/company/{{company_id}}/customers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"company",
										"{{company_id}}",
										"customers"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "getCustomerDetails",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "784830c8-a619-44c6-89b7-467f4500575a",
										"exec": [
											"var compId = pm.variables.get('compId'); ",
											"var custName = pm.variables.get('custName'); ",
											"",
											"if(!compId || compId==null || (!custName) || custName==null)",
											"{",
											"    compId=[\"\",null,\"Str\",1,1,1,1];",
											"    custName=[\"NBB\", \"NBB\", \"NBB\", \"\", null, \"Non Existing Customer\", \"National Bank of Bahrain\"];",
											"",
											"}",
											"",
											"currentcompId=compId.shift()",
											"currentcustName=custName.shift()",
											"pm.environment.set('CompanyId',currentcompId )",
											"pm.environment.set('compId',compId )",
											"pm.environment.set('Customer_name', currentcustName); ",
											"pm.environment.set('custName',custName )",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d3eff217-0850-4c94-b542-43825a23530b",
										"exec": [
											"var compId=pm.environment.get(\"compId\")",
											"var CompanyId=pm.environment.get(\"CompanyId\")",
											"var custName=pm.environment.get(\"custName\")",
											"var Customer_name=pm.environment.get(\"Customer_name\")",
											"",
											"if(compId.length>0 && (Customer_name!==\"\" && Customer_name!==null && Customer_name!==\"Non Existing Customer\") ){",
											"    console.log(\"inside 1\")",
											"    tests[\"Validating the response for negative scenario of companyId : \" + CompanyId +\" Customer name: \" + Customer_name ]=",
											"        (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"        ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"    postman.setNextRequest(\"getCustomerDetails\")",
											"    ",
											"}",
											"else{",
											"    ",
											"    // 1. JSON schema validation",
											"    ",
											"    var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"customer_details\"",
											"  ],",
											"  \"properties\": {",
											"    \"customer_details\": {",
											"      \"$id\": \"#/properties/customer_details\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Customer_details Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/customer_details/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"customer_name\",",
											"          \"customer_legal_name\",",
											"          \"contact_person\",",
											"          \"email_id\",",
											"          \"company_customer_addresses\"",
											"        ],",
											"        \"properties\": {",
											"          \"customer_name\": {",
											"            \"$id\": \"#/properties/customer_details/items/properties/customer_name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Customer_name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"Language\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"customer_legal_name\": {",
											"            \"$id\": \"#/properties/customer_details/items/properties/customer_legal_name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Customer_legal_name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"Language\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"contact_person\": {",
											"            \"$id\": \"#/properties/customer_details/items/properties/contact_person\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Contact_person Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"Zeeshan\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"email_id\": {",
											"            \"$id\": \"#/properties/customer_details/items/properties/email_id\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Email_id Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"zeeshan@languageindia.com\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"company_customer_addresses\": {",
											"            \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses\",",
											"            \"type\": \"array\",",
											"            \"title\": \"The Company_customer_addresses Schema\",",
											"            \"items\": {",
											"              \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items\",",
											"              \"type\": \"object\",",
											"              \"title\": \"The Items Schema\",",
											"              \"required\": [",
											"                \"gstin\",",
											"                \"state\",",
											"                \"address_line_1\",",
											"                \"city\",",
											"                \"zip_code\",",
											"                \"country\"",
											"              ],",
											"              \"properties\": {",
											"                \"gstin\": {",
											"                  \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items/properties/gstin\",",
											"                  \"type\": \"string\",",
											"                  \"title\": \"The Gstin Schema\",",
											"                  \"default\": \"\",",
											"                  \"examples\": [",
											"                    \"27DMSPS0123QAZ9\"",
											"                  ],",
											"                  \"pattern\": \"^(.*)$\"",
											"                },",
											"                \"state\": {",
											"                  \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items/properties/state\",",
											"                  \"type\": \"string\",",
											"                  \"title\": \"The State Schema\",",
											"                  \"default\": \"\",",
											"                  \"examples\": [",
											"                    \"Maharashtra\"",
											"                  ],",
											"                  \"pattern\": \"^(.*)$\"",
											"                },",
											"                \"address_line_1\": {",
											"                  \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items/properties/address_line_1\",",
											"                  \"type\": \"string\",",
											"                  \"title\": \"The Address_line_1 Schema\",",
											"                  \"default\": \"\",",
											"                  \"examples\": [",
											"                    \"5/7 A-8 Grant Building\"",
											"                  ],",
											"                  \"pattern\": \"^(.*)$\"",
											"                },",
											"                \"city\": {",
											"                  \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items/properties/city\",",
											"                  \"type\": \"string\",",
											"                  \"title\": \"The City Schema\",",
											"                  \"default\": \"\",",
											"                  \"examples\": [",
											"                    \"Mumbai\"",
											"                  ],",
											"                  \"pattern\": \"^(.*)$\"",
											"                },",
											"                \"zip_code\": {",
											"                  \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items/properties/zip_code\",",
											"                  \"type\": \"string\",",
											"                  \"title\": \"The Zip_code Schema\",",
											"                  \"default\": \"\",",
											"                  \"examples\": [",
											"                    \"400005\"",
											"                  ],",
											"                  \"pattern\": \"^(.*)$\"",
											"                },",
											"                \"country\": {",
											"                  \"$id\": \"#/properties/customer_details/items/properties/company_customer_addresses/items/properties/country\",",
											"                  \"type\": \"string\",",
											"                  \"title\": \"The Country Schema\",",
											"                  \"default\": \"\",",
											"                  \"examples\": [",
											"                    \"India\"",
											"                  ],",
											"                  \"pattern\": \"^(.*)$\"",
											"                }",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"",
											"",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"    ",
											"    if(tv4.validate(pm.response.json(), schema)){",
											"",
											"        //5. Verify response body contain string - mandatory keys in reponse",
											"    ",
											"        pm.test(\"JSON response Body contains customer_details: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"customer_details\");",
											"        });",
											"        ",
											"    ",
											"        if(Customer_name==\"Non Existing Customer\"){",
											"            postman.setNextRequest(\"getCustomerDetails\")",
											"            ",
											"        }",
											"        else{",
											"            if(Customer_name==\"\" || Customer_name==null)",
											"            {",
											"                postman.setNextRequest(\"getCustomerDetails\")",
											"            }",
											"            else",
											"            {",
											"                pm.environment.clear();",
											"            }",
											"        ",
											"            pm.test(\"JSON response Body contains customer_name: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"customer_name\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains customer_legal_name: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"customer_legal_name\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains contact_person: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"contact_person\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains email_id: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"email_id\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains pan: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"pan\");",
											"            });",
											"            ",
											"            ",
											"            ",
											"            var size= pm.response.json().customer_details.length",
											"            console.log(\"Size is : \" + size)",
											"            ",
											"            for (i=0;i<size;i++){",
											"                company_customer_addresses_size=pm.response.json().customer_details[i].company_customer_addresses.length;",
											"                 console.log(\"company_customer_addresses_size : \" + company_customer_addresses_size)",
											"            ",
											"                if(company_customer_addresses_size>0){    ",
											"                    pm.test(\"JSON response Body contains company_customer_addresses: Verified\", function () {",
											"                        pm.expect(pm.response.text()).to.include(\"company_customer_addresses\");",
											"                    });",
											"                    ",
											"                     pm.test(\"JSON response Body contains gstin: Verified\", function () {",
											"                        pm.expect(pm.response.text()).to.include(\"gstin\");",
											"                    });",
											"                    ",
											"                    pm.test(\"JSON response Body contains state: Verified\", function () {",
											"                        pm.expect(pm.response.text()).to.include(\"state\");",
											"                    });",
											"                    ",
											"                    ",
											"                    pm.test(\"JSON response Body contains address: Verified\", function () {",
											"                        pm.expect(pm.response.text()).to.include(\"address_line_1\");",
											"                    });",
											"                    ",
											"                    pm.test(\"JSON response Body contains city: Verified\", function () {",
											"                    pm.expect(pm.response.text()).to.include(\"city\");",
											"                    });",
											"                    ",
											"                    pm.test(\"JSON response Body contains zip_code: Verified\", function () {",
											"                        pm.expect(pm.response.text()).to.include(\"zip_code\");",
											"                    });",
											"            ",
											"                     pm.test(\"JSON response Body contains country: Verified\", function () {",
											"                        pm.expect(pm.response.text()).to.include(\"country\");",
											"                    });",
											"                }",
											"            }",
											"            ",
											"            //6. JSON value check in reponse body",
											"           ",
											"            for (i=0;i<size;i++){",
											"                ",
											"                company_customer_addresses_size=pm.response.json().customer_details[i].company_customer_addresses.length;",
											"                 console.log(\"company_customer_addresses_size : \" + company_customer_addresses_size)",
											"                 ",
											"                var jsonData = pm.response.json().customer_details[i]",
											"                console.log(\"jsonData is \" + jsonData)",
											"                ",
											"                tests[\"Validate customer_name is not null. For i equals to : \" + i +\"  Value of customer_name is: \" +jsonData.customer_name ] = ",
											"                jsonData.customer_name !== null && ",
											"                jsonData.customer_name !== ' ' ;",
											"                ",
											"                tests[\"Validate customer_legal_name is not null. For i equals to : \" + i +\"  Value of customer_legal_name is \" + jsonData.customer_legal_name] = ",
											"                jsonData.customer_legal_name !== null && ",
											"                jsonData.customer_legal_name !== ' ' ;",
											"                ",
											"                tests[\"Validate contact_person is not null. For i equals to : \" + i +\"  Value of contact_person is \" + jsonData.contact_person] = ",
											"                jsonData.contact_person !== null && ",
											"                jsonData.contact_person !== ' ' ;",
											"                ",
											"                pm.test(\"Validate email_id is not null. For i equals to : \" + i +\"  Value of email_id is: \" + jsonData.email_id, function()",
											"                            {",
											"                                pm.expect(jsonData.email_id).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);",
											"                            });",
											"                            ",
											"                pm.test(\"Validate pan is not null. For i equals to : \" + i +\"  Value of pan is: \" + jsonData.pan, function()",
											"                            {",
											"                                pm.expect(jsonData.pan).to.match(/[A-Z]{5}[0-9]{4}[A-Z]{1}/);",
											"                            });",
											"                ",
											"                if(company_customer_addresses_size>0){",
											"                    //for(i=0;i<company_customer_addresses_size; i++)",
											"                    //{",
											"                        pm.test(\"Validate gstin is not null. For i equals to : \" + i +\"  Value of gstin is: \" + jsonData.company_customer_addresses[0].gstin, function()",
											"                            {",
											"                                pm.expect(jsonData.company_customer_addresses[0].gstin).to.match(/\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/);",
											"                            }); ",
											"                            ",
											"                            tests[\"Validate state is not null. For i equals to : \" + i +\"  Value of state is \" + jsonData.company_customer_addresses[0].state]=",
											"                                jsonData.company_customer_addresses[0].state!==null &&",
											"                                jsonData.company_customer_addresses[0].state!==\"\" &&",
											"                                jsonData.company_customer_addresses[0].state.length>3;",
											"                            ",
											"                            tests[\"Validate address_line_1 is not null. For i equals to : \" + i +\"  Value of address_line_1 is \" + jsonData.company_customer_addresses[0].address_line_1]=",
											"                                jsonData.company_customer_addresses[0].address_line_1!==null &&",
											"                                jsonData.company_customer_addresses[0].address_line_1!==\"\" &&",
											"                                jsonData.company_customer_addresses[0].address_line_1.length>3;",
											"                                ",
											"                            tests[\"Validate city is not null. For i equals to : \" + i +\"  Value of city is \" + jsonData.company_customer_addresses[0].city]=",
											"                                jsonData.company_customer_addresses[0].city!==null &&",
											"                                jsonData.company_customer_addresses[0].city!==\"\" &&",
											"                                jsonData.company_customer_addresses[0].city.length>3;",
											"    ",
											"                            tests[\"Validate zipcode is not null. For i equals to : \" + i +\"  Value of zipcode is \" + jsonData.company_customer_addresses[0].zip_code]=",
											"                                jsonData.company_customer_addresses[0].zip_code!==null &&",
											"                                jsonData.company_customer_addresses[0].zip_code!==\"\" &&",
											"                                jsonData.company_customer_addresses[0].zip_code.length>=5;",
											"                                ",
											"                            tests[\"Validate country is not null. For i equals to : \" + i +\"  Value of country is \" + jsonData.company_customer_addresses[0].country]=",
											"                                jsonData.company_customer_addresses[0].country!==null &&",
											"                                jsonData.company_customer_addresses[0].country!==\"\" &&",
											"                                jsonData.company_customer_addresses[0].country.length>3;",
											"                    //}",
											"                }",
											"            }",
											"            }",
											"    }    ",
											"    //7. Verification of content type",
											"    ",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"   ",
											"}",
											"    ",
											"      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/customers?customer_name={{Customer_name}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"company",
										"{{CompanyId}}",
										"customers"
									],
									"query": [
										{
											"key": "customer_name",
											"value": "{{Customer_name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getListOfCustomers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5360d49-041b-4ef1-9b45-12da59d4172d",
										"exec": [
											"var company_id= pm.environment.get(\"company_id\")",
											"var compId= pm.environment.get(\"compId\")",
											"",
											"// negative scenario",
											"",
											"if(compId.length>0)",
											"{",
											"    tests[\"Validating the response for negative scenario for company id : \" + company_id ]=",
											"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"     ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
											"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
											"    postman.setNextRequest(\"getCompanyDetails\")",
											"}",
											"else{",
											"        ",
											"    pm.environment.clear();",
											"    ",
											"    // 1. JSON schema validation",
											"    ",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"customers\"",
											"      ],",
											"      \"properties\": {",
											"        \"customers\": {",
											"          \"$id\": \"#/properties/customers\",",
											"          \"type\": \"array\",",
											"          \"title\": \"The Customers Schema\",",
											"          \"items\": {",
											"            \"$id\": \"#/properties/customers/items\",",
											"            \"type\": \"object\",",
											"            \"title\": \"The Items Schema\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"customer_name\",",
											"              \"logo_url\",",
											"              \"receivable_amount\"",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"$id\": \"#/properties/customers/items/properties/id\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Id Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  0",
											"                ]",
											"              },",
											"              \"customer_name\": {",
											"                \"$id\": \"#/properties/customers/items/properties/customer_name\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Customer_name Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"string\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"logo_url\": {",
											"                \"$id\": \"#/properties/customers/items/properties/logo_url\",",
											"                \"type\": \"string\",",
											"                \"title\": \"The Logo_url Schema\",",
											"                \"default\": \"\",",
											"                \"examples\": [",
											"                  \"string\"",
											"                ],",
											"                \"pattern\": \"^(.*)$\"",
											"              },",
											"              \"receivable_amount\": {",
											"                \"$id\": \"#/properties/customers/items/properties/receivable_amount\",",
											"                \"type\": \"integer\",",
											"                \"title\": \"The Receivable_amount Schema\",",
											"                \"default\": 0,",
											"                \"examples\": [",
											"                  0",
											"                ]",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"    ",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in response",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
											"        pm.response.to.have.status(200);",
											"        pm.response.to.be.ok;",
											"    });",
											"    ",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"    ",
											"    if(tv4.validate(pm.response.json(), schema)){",
											"        // 5. Verify response body contain string",
											"        var jsonData = pm.response.json().customers;",
											"        noOfCustomers=jsonData.length",
											"        ",
											"        pm.test(\"JSON response Body contains customers: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"customers\");",
											"            });",
											"            ",
											"        if(noOfCustomers>0) ",
											"        {",
											"            pm.test(\"JSON response Body contains id: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"id\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains customer name: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"customer_name\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains logo_url: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"logo_url\");",
											"            });",
											"            ",
											"            pm.test(\"JSON response Body contains receivable_amount: Verified\", function () {",
											"                pm.expect(pm.response.text()).to.include(\"receivable_amount\");",
											"            });",
											"            ",
											"        // 6. JSON value check in reponse body",
											"        ",
											"        tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
											"            jsonData.id !== null && ",
											"            jsonData.id !== ' ' && ",
											"            jsonData.id !== 0;",
											"            ",
											"        tests[\"Validate customer_name is not null. Value of customer_name is \" + jsonData.customer_name] = ",
											"            jsonData.customer_name !== null && ",
											"            jsonData.customer_name !== ' ' && ",
											"            jsonData.customer_name.length>=3;",
											"        ",
											"        tests[\"Validate logo_url is not null. Value of logo_url is \" + jsonData.logo_url] = ",
											"            jsonData.logo_url !== null && ",
											"            (jsonData.logo_url==\"\" || jsonData.logo_url.includes(\"http://\"));",
											"            ",
											"        tests[\"Validate receivable_amount is not null. Value of receivable_amount is \" + jsonData.receivable_amount] = ",
											"            jsonData.receivable_amount !== null && ",
											"            jsonData.receivable_amount !== ' ' &&",
											"            jsonData.receivable_amount>=0; ",
											"            ",
											"        }",
											"    }    ",
											"     //7. To print Application content type as JSON",
											"    ",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"    function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69a45845-3054-41e3-b42e-502cb5031b97",
										"exec": [
											"var compId = pm.environment.get(\"compId\");",
											"",
											"if(!compId || compId==null)",
											"{",
											"    compId=[\"\",null,\"Str\", 1]",
											"}",
											"",
											"currentcompId = compId.shift();",
											"pm.environment.set(\"company_id\",currentcompId);",
											"pm.environment.set(\"compId\",compId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/companies/{{company_id}}/customers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"{{company_id}}",
										"customers"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Companies",
			"item": [
				{
					"name": "getCompanyList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "09563291-4e08-4372-bc82-3e892fd8b3de",
								"exec": [
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dec50e10-0ae4-4e0f-8acc-8994885f0027",
								"exec": [
									"// 1. JSON schema validation",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"companies\"",
									"  ],",
									"  \"properties\": {",
									"    \"companies\": {",
									"      \"$id\": \"#/properties/companies\",",
									"      \"type\": \"array\",",
									"      \"title\": \"The Companies Schema\",",
									"      \"items\": {",
									"        \"$id\": \"#/properties/companies/items\",",
									"        \"type\": \"object\",",
									"        \"title\": \"The Items Schema\",",
									"        \"required\": [",
									"          \"company_name\",",
									"          \"account_id\",",
									"          \"pan\",",
									"          \"company_legal_name\",",
									"          \"website\",",
									"          \"logo_url\"",
									"        ],",
									"        \"properties\": {",
									"          \"company_name\": {",
									"            \"$id\": \"#/properties/companies/items/properties/company_name\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Company_name Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"string\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"account_id\": {",
									"            \"$id\": \"#/properties/companies/items/properties/account_id\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The Account_id Schema\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"              0",
									"            ]",
									"          },",
									"          \"pan\": {",
									"            \"$id\": \"#/properties/companies/items/properties/pan\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Pan Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"string\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"company_legal_name\": {",
									"            \"$id\": \"#/properties/companies/items/properties/company_legal_name\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Company_legal_name Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"string\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"website\": {",
									"            \"$id\": \"#/properties/companies/items/properties/website\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Website Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"string\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"logo_url\": {",
									"            \"$id\": \"#/properties/companies/items/properties/logo_url\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Logo_url Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"string\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          }",
									"        }",
									"      }",
									"    }",
									"  }",
									"};",
									"",
									"",
									"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"}",
									");",
									"",
									"// 2. Validation of data type of keys in reponse",
									"",
									"if (!tv4.validate(pm.response.json(), schema))",
									"{",
									"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"        if (errors.length==1){",
									"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                function() {",
									"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                }",
									"                    );",
									"        }",
									"       ",
									"       if(errors.length>1){",
									"        for(i=0;i<errors.length;i++)   {",
									"                   console.log(errors[i].message)",
									"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                })  ",
									"        } ",
									"       }",
									"    ",
									"}",
									"",
									"// 3. Verify Status code is 200",
									"pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"",
									"// 4. Verify response time is less than 1700ms",
									"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"});",
									"",
									"    ",
									"if(tv4.validate(pm.response.json(),schema))",
									"{",
									"    var jsonData = pm.response.json().companies;",
									"    noOfcompanies=pm.response.json().companies.length",
									"",
									"    // 5. Verify the response body",
									"    pm.test(\"JSON response Body contains companies: Verified\", function ()",
									"    {",
									"        pm.expect(pm.response.text()).to.include(\"companies\");",
									"    });",
									"    ",
									"    if(noOfcompanies>0)",
									"    {",
									"        pm.test(\"JSON response Body contains company_name: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"company_name\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains account_id: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"account_id\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains pan: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"pan\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains company_legal_name: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"company_legal_name\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains website: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"website\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains logo_url: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"logo_url\");",
									"        });",
									"    }",
									"    ",
									"    //6. Verify the values in the response body",
									"    ",
									"    if(noOfcompanies>0){",
									"        tests[\"Validate account_id is not null. Value of account_id is \" + jsonData[0].account_id] = ",
									"            jsonData[0].account_id !== null && ",
									"            jsonData[0].account_id !== ' ' && ",
									"            jsonData[0].account_id > 0;",
									"            ",
									"        tests[\"Validate company_name is not null. Value of company_name is \" + jsonData[0].company_name] = ",
									"            jsonData[0].company_name !== null && ",
									"            jsonData[0].company_name !== ' ' && ",
									"            jsonData[0].company_name.length>2;",
									"    }",
									"    ",
									"}",
									"    //7. To print Application content type as JSON",
									"",
									"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
									"function(){",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/companies",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCompanyDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28fe28b5-66ae-420c-900e-1fa71a9091ae",
								"exec": [
									"var company_id= pm.environment.get(\"company_id\")",
									"var compId= pm.environment.get(\"compId\")",
									"",
									"// negative scenario",
									"",
									"if(compId.length>0)",
									"{",
									"    tests[\"Validating the response for negative scenario for company id : \" + company_id ]=",
									"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
									"     ((pm.response.json().error ==\"Unprocessable Entity\") || (pm.response.json().error==\"Bad Request\")  || (pm.response.json().error==\"Not Found\")) &&",
									"        (pm.response.json().message ==\"Not Found\" || pm.response.json().message ==\"Unprocessable Entity\" || pm.response.json().message ==\"Bad Request\");",
									"    postman.setNextRequest(\"getCompanyDetails\")",
									"}",
									"else{",
									"        ",
									"    pm.environment.clear();",
									"    pm.environment.set(\"respTime\",1700);",
									"    pm.environment.set(\"statusCode\",200);",
									"    pm.environment.set(\"BaseURL\",\"http://13.235.96.224:3000\");",
									"    pm.environment.set(\"BaseURLLocalHost\",\"http://localhost:3000\");",
									"    ",
									"    // 1. JSON schema validation",
									"    ",
									"    var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"company\"",
									"  ],",
									"  \"properties\": {",
									"    \"company\": {",
									"      \"$id\": \"#/properties/company\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Company Schema\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"company_legal_name\",",
									"        \"pan\",",
									"        \"addresses\",",
									"        \"bank_accounts\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"$id\": \"#/properties/company/properties/id\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Id Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            1",
									"          ]",
									"        },",
									"        \"company_legal_name\": {",
									"          \"$id\": \"#/properties/company/properties/company_legal_name\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Company_legal_name Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"M/s. Language\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"pan\": {",
									"          \"$id\": \"#/properties/company/properties/pan\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Pan Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"DMSPS0123Q\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"addresses\": {",
									"          \"$id\": \"#/properties/company/properties/addresses\",",
									"          \"type\": \"array\",",
									"          \"title\": \"The Addresses Schema\",",
									"          \"items\": {",
									"            \"$id\": \"#/properties/company/properties/addresses/items\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The Items Schema\",",
									"            \"required\": [",
									"              \"id\",",
									"              \"state\",",
									"              \"gstin\",",
									"              \"address_line_1\",",
									"              \"address_line_2\",",
									"              \"city\",",
									"              \"zip_code\",",
									"              \"country\",",
									"              \"contact_person\",",
									"              \"email_id\",",
									"              \"phone_1\"",
									"            ],",
									"            \"properties\": {",
									"              \"id\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/id\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Id Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  1",
									"                ]",
									"              },",
									"              \"state\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/state\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The State Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Maharashtra\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"gstin\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/gstin\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Gstin Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"address_line_1\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/address_line_1\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Address_line_1 Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"1 5/7 A-8, Grant Building\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"address_line_2\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/address_line_2\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Address_line_2 Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Arthur Bumder Road, Colaba\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"city\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/city\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The City Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Mumbai\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"zip_code\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/zip_code\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Zip_code Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  400005",
									"                ]",
									"              },",
									"              \"country\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/country\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Country Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"India\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"contact_person\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/contact_person\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Contact_person Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Zeeshan Keval\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"email_id\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/email_id\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Email_id Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"zeeshan@langaugeindia.com\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"phone_1\": {",
									"                \"$id\": \"#/properties/company/properties/addresses/items/properties/phone_1\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Phone_1 Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"9820090105\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              }",
									"            }",
									"          }",
									"        },",
									"        \"bank_accounts\": {",
									"          \"$id\": \"#/properties/company/properties/bank_accounts\",",
									"          \"type\": \"array\",",
									"          \"title\": \"The Bank_accounts Schema\",",
									"          \"items\": {",
									"            \"$id\": \"#/properties/company/properties/bank_accounts/items\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The Items Schema\",",
									"            \"required\": [",
									"              \"account_name\",",
									"              \"account_nbr\",",
									"              \"bank\",",
									"              \"ifsc\",",
									"              \"branch\"",
									"            ],",
									"            \"properties\": {",
									"              \"account_name\": {",
									"                \"$id\": \"#/properties/company/properties/bank_accounts/items/properties/account_name\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Account_name Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Citi Bank - Fort\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"account_nbr\": {",
									"                \"$id\": \"#/properties/company/properties/bank_accounts/items/properties/account_nbr\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Account_nbr Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"22292029002\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"bank\": {",
									"                \"$id\": \"#/properties/company/properties/bank_accounts/items/properties/bank\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Bank Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Citi Bank\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"ifsc\": {",
									"                \"$id\": \"#/properties/company/properties/bank_accounts/items/properties/ifsc\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Ifsc Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"CITI0123455\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"branch\": {",
									"                \"$id\": \"#/properties/company/properties/bank_accounts/items/properties/branch\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Branch Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"Fort, Mumbai\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              }",
									"            }",
									"          }",
									"        }",
									"      }",
									"    }",
									"  }",
									"};",
									"    ",
									"    ",
									"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"    function() {",
									"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    }",
									"    );",
									"    ",
									"    // 2. Validation of data type of keys in response",
									"    ",
									"    if (!tv4.validate(pm.response.json(), schema))",
									"    {",
									"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"            if (errors.length==1){",
									"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                    function() {",
									"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                    }",
									"                        );",
									"            }",
									"           ",
									"           if(errors.length>1){",
									"            for(i=0;i<errors.length;i++)   {",
									"                       console.log(errors[i].message)",
									"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                    })  ",
									"            } ",
									"           }",
									"        ",
									"    }",
									"    ",
									"    // 3. Verify Status code is 200",
									"    pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
									"        pm.response.to.have.status(200);",
									"        pm.response.to.be.ok;",
									"    });",
									"    ",
									"    ",
									"    // 4. Verify response time is less than 1700ms",
									"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"    });",
									"    ",
									"    if(tv4.validate(pm.response.json(), schema)){",
									"        // 5. Verify response body contain string",
									"        ",
									"        pm.test(\"JSON response Body contains id: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"id\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains company legal name: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"company_legal_name\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains pan: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"pan\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains company_addresses: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"addresses\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains id: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"id\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains state: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"state\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains gstin: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"gstin\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains address_line_1: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"address_line_1\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains address_line_2: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"address_line_2\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains city: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"city\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains zip_code: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"zip_code\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains country: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"country\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains contact_person: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"contact_person\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains email_id: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"email_id\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains phone_1: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"phone_1\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains company_bank_accounts: Verified\", function () {",
									"            pm.expect(pm.response.text()).to.include(\"bank_accounts\");",
									"            ",
									"        });",
									"        ",
									"        bank_details=pm.response.json().company.bank_accounts  ",
									"        noOfAccounts=bank_details.length",
									"        ",
									"        if(noOfAccounts>0)",
									"        {",
									"            pm.test(\"JSON response Body contains account_name: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"account_name\");",
									"            });",
									"            pm.test(\"JSON response Body contains bank: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"bank\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains ifsc: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"ifsc\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains branch: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"branch\");",
									"            });",
									"        }",
									"        ",
									"        // 6. JSON value check in reponse body",
									"        ",
									"       var jsonData = pm.response.json().company;",
									"        ",
									"        ",
									"        tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
									"            jsonData.id !== null && ",
									"            jsonData.id !== ' ' && ",
									"            jsonData.id !== 0;",
									"            ",
									"        tests[\"Validate Company legal name is not null. Value of Company legal name is \" + jsonData.company_legal_name] = ",
									"            jsonData.company_legal_name !== null && ",
									"            jsonData.company_legal_name !== ' ' && ",
									"            jsonData.company_legal_name !== 0;",
									"        ",
									"           // PAN no validation",
									"        pm.test(\"PAN is equal to \" + jsonData.pan, function () ",
									"        {",
									"            pm.expect(jsonData.pan).to.match(/[A-Z]{5}\\d{4}[A-Z]{1}/);",
									"            pm.expect(jsonData.pan.length).to.eql(10);",
									"        });",
									"            ",
									"        addresses=pm.response.json().company.addresses",
									"        noOfAddresses=addresses.length",
									"         ",
									"             if(noOfAddresses>0){",
									"                 for(i=0;i<noOfAddresses;i++)",
									"                 {",
									"                    tests[\"Validate id is not null. Value of id is \" + addresses[i].id] = ",
									"                        addresses[i].id !== null && ",
									"                        addresses[i].id !== ' ' && ",
									"                        addresses[i].id > 0;",
									"                        ",
									"                    tests[\"Validate state is not null. Value of state is \" + addresses[i].state] = ",
									"                        addresses[i].state !== null && ",
									"                        addresses[i].state !== ' ' && ",
									"                        addresses[i].state.length>=3;",
									"                    ",
									"                    if(addresses[i].gstin!=null && addresses[i].gstin!=\"\")   ",
									"                    {",
									"                        pm.test(\"gstin is equal to \" + addresses[i].gstin + \" length is: \" + addresses[i].gstin.length, function () ",
									"                                {",
									"                                    pm.expect(addresses[i].gstin).to.match(/\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/);",
									"                                    pm.expect(addresses[i].gstin.length).to.eql(15);",
									"                                ",
									"                                }); ",
									"                    }",
									"                    ",
									"                    tests[\"Validate address_line_1 is not null. Value of address_line_1 is \" + addresses[i].address_line_1 ] = ",
									"                        addresses[i].address_line_1 !== null && ",
									"                        addresses[i].address_line_1 !== ' ' && ",
									"                        addresses[i].address_line_1.length> 3;",
									"                    ",
									"                    tests[\"Validate city is not null. Value of city is \" + addresses[i].city] = ",
									"                        addresses[i].city !== null && ",
									"                        addresses[i].city !== ' ' && ",
									"                        addresses[i].city.length>=3;",
									"                    ",
									"                    tests[\"Validate zip_code is not null. Value of zip_code is \" + addresses[i].zip_code] = ",
									"                        addresses[i].zip_code !== null && ",
									"                        addresses[i].zip_code !== ' ' && ",
									"                        100000<addresses[i].zip_code<1000000;",
									"                        ",
									"                    tests[\"Validate country is not null. Value of country is \" + addresses[i].country] = ",
									"                        addresses[i].country !== null && ",
									"                        addresses[i].country !== ' ' && ",
									"                        addresses[i].country !== 0;",
									"                    ",
									"                    tests[\"Validate contact_person is not null. Value of contact_person is \" + addresses[i].contact_person] = ",
									"                        addresses[i].contact_person !== null && ",
									"                        addresses[i].contact_person !== ' ' && ",
									"                        addresses[i].contact_person.length>=3;",
									"                    ",
									"                    pm.test(\"email_id is equal to \" + addresses[i].email_id , function () ",
									"                            {",
									"                                pm.expect(addresses[i].email_id).to.match(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/);",
									"",
									"                            });",
									"                    ",
									"                    tests[\"Validate phone_1 is not null. Value of phone_1 is \" + addresses[i].phone_1] = ",
									"                        addresses[i].phone_1 !== null && ",
									"                        addresses[i].phone_1 !== ' ' && ",
									"                        addresses[i].phone_1.length>=10;",
									"                 }  ",
									"             }",
									"                 ",
									"",
									"        if(noOfAccounts>0){",
									"            for(i=0;i<noOfAccounts;i++){",
									"                tests[\"Validate account name is not null. Value of account name is \" + bank_details[i].account_name] = ",
									"                    bank_details[i].account_name !== null && ",
									"                    bank_details[i].account_name !== ' ' && ",
									"                    bank_details[i].account_name.length>= 3;",
									"                    ",
									"                tests[\"Validate account nbr is not null. Value of account nbr is \" + bank_details[i].account_nbr] = ",
									"                    bank_details[i].account_nbr !== null && ",
									"                    bank_details[i].account_nbr !== ' ' && ",
									"                    bank_details[i].account_nbr.length>= 9;",
									"                    ",
									"                tests[\"Validate bank is not null. Value of bank is \" + bank_details[i].bank] = ",
									"                    bank_details[i].bank !== null && ",
									"                    bank_details[i].bank !== ' ' && ",
									"                    bank_details[i].bank.length >3;",
									"                    ",
									"                tests[\"Validate ifsc is not null. Value of Address is \" + bank_details[i].ifsc] = ",
									"                    bank_details[i].ifsc !== null && ",
									"                    bank_details[i].ifsc !== ' ' && ",
									"                    bank_details[i].ifsc.length>=6;",
									"                    ",
									"                tests[\"Validate branch is not null. Value of branch is \" + bank_details[i].branch] = ",
									"                    bank_details[i].branch !== null && ",
									"                    bank_details[i].branch !== ' ' && ",
									"                    bank_details[i].branch.length > 3;",
									"                ",
									"            }",
									"        }",
									"    }    ",
									"     //7. To print Application content type as JSON",
									"    ",
									"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
									"    function(){",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"    })",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dfe66445-87a7-42a1-ae62-18e4162eebc6",
								"exec": [
									"var compId = pm.environment.get(\"compId\");",
									"",
									"if(!compId || compId==null)",
									"{",
									"    compId=[\"\",null,\"Str\", 1]",
									"}",
									"",
									"currentcompId = compId.shift();",
									"pm.environment.set(\"company_id\",currentcompId);",
									"pm.environment.set(\"compId\",compId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "queryParams",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseURL}}/api/v1/company/{{company_id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"company",
								"{{company_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "getUserDetails",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d302e766-a415-44fe-810a-6852f48ccfb9",
								"exec": [
									"// 1. JSON schema validation",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"user\"",
									"  ],",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"$id\": \"#/properties/user\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The User Schema\",",
									"      \"required\": [",
									"        \"email\"",
									"      ],",
									"      \"properties\": {",
									"        \"email\": {",
									"          \"$id\": \"#/properties/user/properties/email\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Email Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"nivedita.hbti@gmail.com\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"};",
									"",
									"",
									"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"}",
									");",
									"",
									"// 2. Validation of data type of keys in reponse",
									"",
									"if (!tv4.validate(pm.response.json(), schema))",
									"{",
									"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"        if (errors.length==1){",
									"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                function() {",
									"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                }",
									"                    );",
									"        }",
									"       ",
									"       if(errors.length>1){",
									"        for(i=0;i<errors.length;i++)   {",
									"                   console.log(errors[i].message)",
									"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                })  ",
									"        } ",
									"       }",
									"    ",
									"}",
									"",
									"// 3. Verify Status code is 200",
									"pm.test(\"Status code is \" +  pm.response.code +\" OK : Verified\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"",
									"// 4. Verify response time is less than 1700ms",
									"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"});",
									"",
									"    ",
									"if(tv4.validate(pm.response.json(),schema))",
									"{",
									"    // 5. Verify the response body",
									"    pm.test(\"JSON response Body contains user: Verified\", function ()",
									"    {",
									"        pm.expect(pm.response.text()).to.include(\"user\");",
									"    });",
									"    ",
									"    pm.test(\"JSON response Body contains email: Verified\", function ()",
									"    {",
									"        pm.expect(pm.response.text()).to.include(\"email\");",
									"    });",
									"",
									"    //6. Verify the values in the response body",
									"           ",
									"    tests[\"Validate email is not null. Value of email is \" + pm.response.json().user.email] = ",
									"        pm.response.json().user.email !== null && ",
									"        pm.response.json().user.email !== ' ' && ",
									"        pm.expect(pm.response.json().user.email).to.match(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/)",
									"}",
									"",
									"//7. To print Application content type as JSON",
									"",
									"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
									"function(){",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/user/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "04c8803a-793d-44ed-bd60-5fff67d876ed",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"respTime\",1700);",
					"pm.environment.set(\"statusCode\",200);",
					"pm.environment.set(\"BaseURL\",\"http://api.lemoney.in:3000\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d92cd045-9e70-4162-ad15-fa26f03163bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}