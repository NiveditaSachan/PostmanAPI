{
	"info": {
		"_postman_id": "2e7b4656-8b4e-4f68-a891-e7b2933e326d",
		"name": "Lemoney2019",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setCollection",
			"item": [
				{
					"name": "setEnvVarInCollection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a8a45bba-4588-45ac-9c4f-69ab31037c1c",
								"exec": [
									"postman.clearEnvironmentVariable(\"countryId\")",
									"postman.clearEnvironmentVariable(\"sacCode\")",
									"postman.clearEnvironmentVariable(\"compId\")",
									"postman.clearEnvironmentVariable(\"custName\")",
									"postman.clearEnvironmentVariable(\"statuses\")",
									"postman.clearEnvironmentVariable(\"yr\")",
									"postman.clearEnvironmentVariable(\"mnth\")",
									"postman.clearEnvironmentVariable(\"sortBy\")",
									"postman.clearEnvironmentVariable(\"srch\")",
									"postman.clearEnvironmentVariable(\"custId\")",
									"postman.clearEnvironmentVariable(\"itmName\")",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ae034ef-2822-48d6-b5ac-88bcb15f41bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/country",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"country"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Common",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "getInvoiceDueOptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30aede8c-adf9-4d88-a9d7-ff72989f2f73",
										"exec": [
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"due_options\"",
											"  ],",
											"  \"properties\": {",
											"    \"due_options\": {",
											"      \"$id\": \"#/properties/due_options\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Due_options Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/due_options/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"nbr_of_days\",",
											"          \"label\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"nbr_of_days\": {",
											"            \"$id\": \"#/properties/due_options/items/properties/nbr_of_days\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Nbr_of_days Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              7",
											"            ]",
											"          },",
											"          \"label\": {",
											"            \"$id\": \"#/properties/due_options/items/properties/label\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Label Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"1 week\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"id\": {",
											"            \"$id\": \"#/properties/due_options/items/properties/id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              1",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                });",
											"        }",
											"       ",
											"       if(errors.length>1){",
											"        for(i=0;i<errors.length;i++)   {",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                }) ",
											"        }",
											"       }",
											"}",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"",
											"//5. Verify response body contain string - mandatory keys in reponse",
											"pm.test(\"JSON response Body contains due options: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"due_options\");",
											"});",
											"",
											"pm.test(\"JSON response Body contains nbr of days: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"nbr_of_days\");",
											"});",
											"",
											"pm.test(\"JSON response Body contains label\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"label\");",
											"});",
											"",
											"pm.test(\"JSON response Body contains id: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"//6. JSON value check in reponse body",
											"   ",
											"var size= pm.response.json().due_options.length",
											"for (i=0;i<size;i++){",
											"    ",
											"    var jsonData = pm.response.json().due_options[i]",
											"",
											"tests[\"Validate nbr_of_days is not null. For i equals to : \" + i +\"  Value of nbr_of_days is \" + jsonData.nbr_of_days] = ",
											"    jsonData.nbr_of_days == 7 ||jsonData.nbr_of_days == 15 || jsonData.nbr_of_days == 21 || jsonData.nbr_of_days == 30 || jsonData.nbr_of_days == 60;",
											"",
											"tests[\"Validate label is not null.  For i equals to : \" + i +\" Value of label is: \" +jsonData.label ] = ",
											"    jsonData.label == \"1 week\" ||jsonData.label == \"15 days\"||jsonData.label == \"3 weeks\"||jsonData.label == \"1 month\"||jsonData.label == \"2 months\"",
											"",
											"tests[\"Validate Id is not null.  For i equals to : \" + i +\" Value of Id is: \" +jsonData.id ] = ",
											"    jsonData.id !== null && ",
											"    jsonData.id !== ' ' && ",
											"    jsonData.id > 0;",
											"}",
											"",
											"// 7. To print Application content type as JSON",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/invoices/due_options",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"invoices",
										"due_options"
									],
									"query": [
										{
											"key": "",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listAllCountries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8af6d9d7-4561-414a-ab5a-773ad7e91632",
										"exec": [
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"countries\"",
											"  ],",
											"  \"properties\": {",
											"    \"countries\": {",
											"      \"$id\": \"#/properties/countries\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Countries Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/countries/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"country_name\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"country_name\": {",
											"            \"$id\": \"#/properties/countries/items/properties/country_name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Country_name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"Afghanistan\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"id\": {",
											"            \"$id\": \"#/properties/countries/items/properties/id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              1",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"}",
											");",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                }",
											"                    );",
											"        }",
											"       ",
											"       if(errors.length>1){",
											"        for(i=0;i<errors.length;i++)   {",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                })  ",
											"        } ",
											"       }",
											"    ",
											"}",
											"",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"    pm.response.to.have.status(parseInt(environment.statusCode));",
											"});",
											"",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"",
											"",
											"//5. Verify response body contain string - mandatory keys in reponse",
											"pm.test(\"JSON response Body contains country: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"countries\");",
											"});",
											"",
											"",
											"pm.test(\"JSON response Body contains country name: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"country_name\");",
											"});",
											"",
											"",
											"pm.test(\"JSON response Body contains id: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"//6. JSON value check in reponse body",
											"    try{",
											"        var size= pm.response.json().countries.length",
											"    }",
											"    catch(err){",
											"        console.log(\" Error in countries.length. Actual error is : \" + err)   ",
											"    }",
											"for (i=0;i<size;i++){",
											"    ",
											"    var jsonData = pm.response.json().countries[i]",
											"",
											"tests[\"Validate Id is not null.  For i equals to : \" + i +\" Value of Id is: \" +jsonData.id ] = ",
											"    jsonData.id !== null && ",
											"    jsonData.id !== ' ' && ",
											"    jsonData.id !== 0;",
											"    ",
											"tests[\"Validate country name is not null. For i equals to : \" + i +\"  Value of country name is \" + jsonData.country_name] = ",
											"    jsonData.country_name !== null && ",
											"    jsonData.country_name !== ' ' && ",
											"    jsonData.country_name !== 0;",
											"}",
											"",
											"// 7. To print Application content type as JSON",
											"",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/country",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllStates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79db1218-0577-4c2f-b8d7-dfa2b75b8b7a",
										"exec": [
											"var  country_id= pm.environment.get(\"country_id\")",
											"var  countryId= pm.environment.get(\"countryId\")",
											"console.log(\"country_id : \"+country_id)",
											"",
											"if(countryId.length>0 && country_id!==\"888888888888888888\")",
											"{",
											"    tests[\"Validating the response for negative scenario of country Id : \" + countryId ]=",
											"        (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"        ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"        (pm.response.json().message ==\"querystring.country_id should be number\")",
											"    postman.setNextRequest(\"getAllStates\");",
											"}",
											"else{",
											"    ",
											"    if(country_id==\"888888888888888888\"){",
											"       tests[\"Validating the response for Non existing country Id in DB. Value of country Id: \" + country_id ]=",
											"        pm.response.to.have.status(200) &&",
											"        pm.response.json().states.length==0;",
											"        ",
											"        postman.setNextRequest(\"getAllStates\"); ",
											"    }",
											"    else{",
											"    ",
											"        pm.environment.set(\"countryId\",null)   ",
											"        ",
											"        // 1. JSON schema validation",
											"        ",
											"        var schema = {",
											"          \"definitions\": {},",
											"          \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"          \"$id\": \"http://example.com/root.json\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Root Schema\",",
											"          \"required\": [",
											"            \"states\"",
											"          ],",
											"          \"properties\": {",
											"            \"states\": {",
											"              \"$id\": \"#/properties/states\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The States Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/states/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"state_name\",",
											"                  \"state_code\",",
											"                  \"id\"",
											"                ],",
											"                \"properties\": {",
											"                  \"state_name\": {",
											"                    \"$id\": \"#/properties/states/items/properties/state_name\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The State_name Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"Andhra Pradesh\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"state_code\": {",
											"                    \"$id\": \"#/properties/states/items/properties/state_code\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The State_code Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"AP\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"id\": {",
											"                    \"$id\": \"#/properties/states/items/properties/id\",",
											"                    \"type\": \"integer\",",
											"                    \"title\": \"The Id Schema\",",
											"                    \"default\": 0,",
											"                    \"examples\": [",
											"                      1",
											"                    ]",
											"                  }",
											"                }",
											"              }",
											"            }",
											"          }",
											"        };",
											"        ",
											"        ",
											"        pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"        function() {",
											"          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"        }",
											"        );",
											"        ",
											"        // 2. Validation of data type of keys in reponse",
											"        ",
											"        if (!tv4.validate(pm.response.json(), schema))",
											"        {",
											"            var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"                if (errors.length==1){",
											"                    pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                        function() {",
											"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                        }",
											"                            );",
											"                }",
											"               ",
											"               if(errors.length>1){",
											"                for(i=0;i<errors.length;i++)   {",
											"                           console.log(errors[i].message)",
											"                           pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                        })  ",
											"                } ",
											"               }",
											"            ",
											"        }",
											"        ",
											"        // 3. Verify Status code is 200",
											"        pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"            pm.response.to.have.status(parseInt(environment.statusCode));",
											"        });",
											"        ",
											"        ",
											"        // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"        ",
											"        // 5. Verify response body contain string",
											"        pm.test(\"JSON response Body contains state: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"state\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains id: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"id\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains state name: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"state_name\");",
											"        });",
											"        ",
											"        pm.test(\"JSON response Body contains state code: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"state_code\");",
											"        });",
											"        ",
											"        ",
											"        //6. JSON value check in reponse body",
											"         ",
											"        var size= pm.response.json().states.length",
											"        ",
											"        // Verify Keys are Not Null",
											"        console.log(pm.request.url.query[0])",
											"        ",
											"        for(i=0;i<5; i++)",
											"        {",
											"            var jsonData = pm.response.json().states[i]",
											"        tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
											"            jsonData.id !== null && ",
											"            jsonData.id !== ' ' && ",
											"            jsonData.id !== 0;",
											"            ",
											"        tests[\"Validate state_name is not null. Value of state_name is \" + jsonData.state_name] = ",
											"            jsonData.state_name !== null && ",
											"            jsonData.state_name !== ' ' && ",
											"            jsonData.state_name !== 0;",
											"        ",
											"        tests[\"Validate state code is not null. Value of state code is: \" +jsonData.state_code ] = ",
											"            jsonData.state_code !== null && ",
											"            jsonData.state_code !== ' ' && ",
											"            jsonData.state_code !== 0 &&",
											"            jsonData.state_code.length == 2;",
											"            ",
											"        }",
											"        ",
											"        // 7.To print Application content type as JSON",
											"        ",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa980971-e3e9-4a60-898e-28797c1fe341",
										"exec": [
											"var countryId = pm.environment.get(\"countryId\")",
											"",
											"if(!countryId || countryId==null)",
											"{",
											"    countryId=[\"\",null,\"Str\",\"888888888888888888\",95]",
											"}",
											"currentCountryId=countryId.shift()",
											"pm.environment.set(\"countryId\",countryId)",
											"pm.environment.set(\"country_id\",currentCountryId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/state?country_id={{country_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"state"
									],
									"query": [
										{
											"key": "country_id",
											"value": "{{country_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getCurrencyList",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80bffad0-5622-436b-b397-d8a26673aa2b",
										"exec": [
											"// 1. JSON schema validation",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"title\": \"The Root Schema\",",
											"  \"required\": [",
											"    \"currencies\"",
											"  ],",
											"  \"properties\": {",
											"    \"currencies\": {",
											"      \"$id\": \"#/properties/currencies\",",
											"      \"type\": \"array\",",
											"      \"title\": \"The Currencies Schema\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/currencies/items\",",
											"        \"type\": \"object\",",
											"        \"title\": \"The Items Schema\",",
											"        \"required\": [",
											"          \"currency_name\",",
											"          \"alpha_code\",",
											"          \"symbol\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"currency_name\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/currency_name\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Currency_name Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"Indian Rupee\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"alpha_code\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/alpha_code\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Alpha_code Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"INR\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"symbol\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/symbol\",",
											"            \"type\": \"string\",",
											"            \"title\": \"The Symbol Schema\",",
											"            \"default\": \"\",",
											"            \"examples\": [",
											"              \"₹\"",
											"            ],",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"id\": {",
											"            \"$id\": \"#/properties/currencies/items/properties/id\",",
											"            \"type\": \"integer\",",
											"            \"title\": \"The Id Schema\",",
											"            \"default\": 0,",
											"            \"examples\": [",
											"              3",
											"            ]",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"function() {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"}",
											");",
											"",
											"// 2. Validation of data type of keys in reponse",
											"",
											"if (!tv4.validate(pm.response.json(), schema))",
											"{",
											"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"        if (errors.length==1){",
											"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                }",
											"                    );",
											"        }",
											"       ",
											"       if(errors.length>1){",
											"        for(i=0;i<errors.length;i++)   {",
											"                   console.log(errors[i].message)",
											"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                })  ",
											"        } ",
											"       }",
											"    ",
											"}",
											"",
											"",
											"// 3. Verify Status code is 200",
											"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"    pm.response.to.have.status(parseInt(environment.statusCode));",
											"});",
											"",
											"",
											"// 4. Verify response time is less than 1700ms",
											"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"});",
											"",
											"",
											"//5. Verify response body contain string - mandatory keys in reponse",
											"pm.test(\"JSON response Body contains id: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"JSON response Body contains currency_name: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"currency_name\");",
											"});",
											"",
											"pm.test(\"JSON response Body contains alpha code: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"alpha_code\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"JSON response Body contains symbol: Verified\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"symbol\");",
											"});",
											"",
											"//6. JSON value check in reponse body",
											"",
											"var size= pm.response.json().currencies.length",
											"for (i=0;i<size;i++){",
											"    ",
											"    var jsonData = pm.response.json().currencies[i]",
											"",
											"",
											"tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
											"    jsonData.id !== null && ",
											"    jsonData.id !== ' ' && ",
											"    jsonData.id !== 0;",
											"    ",
											"tests[\"Validate country name is not null. Value of country name is \" + jsonData.country_name] = ",
											"    jsonData.country_name !== null && ",
											"    jsonData.country_name !== ' ' && ",
											"    jsonData.country_name !== 0;",
											"",
											"tests[\"Validate alpha_code is not null. Value of alpha_code is: \" +jsonData.alpha_code ] = ",
											"    jsonData.alpha_code == \"INR\" || jsonData.alpha_code == \"USD\" || jsonData.alpha_code == \"AUD\" ",
											"    ",
											"    ",
											"",
											"tests[\"Validate symbol is not null. Value of symbol is: \" +jsonData.symbol ] = ",
											"    jsonData.symbol !== null && ",
											"    jsonData.symbol !== ' ' && ",
											"    jsonData.symbol == \"₹\"  || jsonData.symbol == \"$\" || jsonData.symbol == \"A$\" ;",
											"}",
											"",
											"// 7. To print Application content type as JSON",
											"",
											"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"function(){",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/currency",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "getGSTRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "accf9f30-11f4-45d4-ab20-5cc15da54c2e",
										"exec": [
											"var sacCode=pm.environment.get(\"sacCode\");",
											"",
											"if(!sacCode || sacCode==null){",
											"    sacCode=[\"\", null,\"Str\", 992123 ]",
											"}",
											"",
											"currentSacCode=sacCode.shift();",
											"pm.environment.set(\"sac_code\", currentSacCode)",
											"pm.environment.set(\"sacCode\", sacCode)",
											"",
											"//pm.variables.set('sac_code',\"992123\")",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ecdcaed8-7bc1-41bd-81a6-42d694522af5",
										"exec": [
											"var sacCode= pm.environment.get(\"sacCode\")",
											"var sac_code= pm.environment.get(\"sac_code\")",
											"",
											"if(sacCode.length>0){",
											"   tests[\"Validating the response for negative scenario of sac code : \" + sac_code ]=",
											"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"             ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"             (pm.response.json().message ==\"Resource does not exists\" || pm.response.json().message ==\"querystring.sac_code should be number\") ",
											"    postman.setNextRequest(\"getGSTRate\")",
											"}",
											"else{",
											"    //postman.setNextRequest(null)",
											"    pm.environment.set(\"sacCode\",null)",
											"    ",
											"    // 1. JSON schema validation",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"rate\"",
											"      ],",
											"      \"properties\": {",
											"        \"rate\": {",
											"          \"$id\": \"#/properties/rate\",",
											"          \"type\": \"integer\",",
											"          \"title\": \"The Rate Schema\",",
											"          \"default\": 0,",
											"          \"examples\": [",
											"            18",
											"          ]",
											"        }",
											"      }",
											"    };",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"        pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"            pm.response.to.have.status(parseInt(environment.statusCode));",
											"        });",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"        });",
											"    ",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"        pm.test(\"JSON response Body contains rate: Verified\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"rate\");",
											"        });",
											"        ",
											"    //6. Validation of response data ",
											"    ",
											"         var rate=pm.response.json().rate",
											"             tests[\"Validate rate is not null, blank or 0. For sac_code: \"+sac_code+ \" GST rate equals to : \" + rate]=",
											"                 rate!==\"\" &&",
											"                 rate!==null &&",
											"                 rate!==0;",
											"         ",
											"    //7. Verification of content type",
											"    ",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"} ",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/gst_rate?sac_code={{sac_code}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"gst_rate"
									],
									"query": [
										{
											"key": "sac_code",
											"value": "{{sac_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getCustomerDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d00309ae-1e25-4bed-8cf2-0961ff177fe6",
										"exec": [
											"var compId=pm.environment.get(\"compId\")",
											"var CompanyId=pm.environment.get(\"CompanyId\")",
											"var custName=pm.environment.get(\"custName\")",
											"var Customer_name=pm.environment.get(\"Customer_name\")",
											"",
											"console.log(\"Customer_name \"+ Customer_name + \"compId.length: \"+ compId.length)",
											"if(compId.length>0 && (Customer_name!==\"Non Existing Customer\" && Customer_name!==\"\" && Customer_name!==null)){",
											"    tests[\"Validating the response for negative scenario of companyId : \" + CompanyId +\" Customer name: \" + Customer_name ]=",
											"        (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"        ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"        (pm.response.json().message ==\"Resource does not exists\" || pm.response.json().message ==\"params.company_id should be number\" || pm.response.json().message ==\"querystring.customer_name should NOT be shorter than 1 characters\") ",
											"    postman.setNextRequest(\"getCustomerDetails\")",
											"}",
											"else{",
											"    ",
											"    // 1. JSON schema validation",
											"    ",
											"    var schema = {",
											"        \"customer_details\": [",
											"            {",
											"                \"customer_name\": \"National Bank of Bahrain\",",
											"                \"customer_legal_name\": \"National Bank\",",
											"                \"contact_person\": \"Amitava\",",
											"                \"email_id\": \"amitava@gmail.com\",",
											"                \"gstin\": \"27DMSPS0123RAZ9\",",
											"                \"phone_1\": \"\",",
											"                \"state\": \"State 1\",",
											"                \"address_line_1\": \"Address Line 1\",",
											"                \"city\": \"BCity\",",
											"                \"zip_code\": \"4937454\",",
											"                \"country\": \"Bahrain\"",
											"            },",
											"            {",
											"                \"customer_name\": \"National Bank of Bahrain\",",
											"                \"customer_legal_name\": \"National Bank\",",
											"                \"contact_person\": \"Amitava\",",
											"                \"email_id\": \"amitava@gmail.com\",",
											"                \"gstin\": \"37DMSPS0123SAZ9\",",
											"                \"phone_1\": \"\",",
											"                \"state\": \"State 2\",",
											"                \"address_line_1\": \"Address Line 1\",",
											"                \"city\": \"SCity\",",
											"                \"zip_code\": \"4937456\",",
											"                \"country\": \"Bahrain\"",
											"            }",
											"        ]",
											"    };",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"        pm.response.to.have.status(parseInt(environment.statusCode));",
											"    });",
											"",
											"",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"",
											"    //5. Verify response body contain string - mandatory keys in reponse",
											"",
											"    pm.test(\"JSON response Body contains customer_details: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"customer_details\");",
											"    });",
											"    ",
											"    if(Customer_name==\"Non Existing Customer\"){",
											"    postman.setNextRequest(\"getCustomerDetails\")",
											"        ",
											"    }",
											"    else{",
											"        if(Customer_name==\"\" || Customer_name==null)",
											"        {",
											"            postman.setNextRequest(\"getCustomerDetails\")",
											"        }",
											"        else{",
											"        pm.environment.set(\"compId\",null)",
											"        pm.environment.set(\"custName\",null)",
											"        }",
											"    ",
											"    pm.test(\"JSON response Body contains customer_name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"customer_name\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains customer_legal_name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"customer_legal_name\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains contact_person: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"contact_person\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains email_id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"email_id\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains gstin: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"gstin\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains phone_1: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"phone_1\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains state: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"state\");",
											"    });",
											"    ",
											"     pm.test(\"JSON response Body contains address_line_1: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"address_line_1\");",
											"    });",
											"    ",
											"     pm.test(\"JSON response Body contains city: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"city\");",
											"    });",
											"    ",
											"     pm.test(\"JSON response Body contains zip_code: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"zip_code\");",
											"    });",
											"    ",
											"     pm.test(\"JSON response Body contains country: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"country\");",
											"    });",
											"    ",
											"    //6. JSON value check in reponse body",
											"   ",
											"     var size= pm.response.json().customer_details.length",
											"    console.log(\"Size is : \" + size)",
											"    ",
											"    for (i=0;i<size;i++){",
											"        ",
											"        var jsonData = pm.response.json().customer_details[i]",
											"        console.log(\"jsonData is \" + jsonData)",
											"        ",
											"        tests[\"Validate customer_name is not null. For i equals to : \" + i +\"  Value of customer_name is: \" +jsonData.customer_name ] = ",
											"        jsonData.customer_name !== null && ",
											"        jsonData.customer_name !== ' ' ;",
											"        ",
											"        tests[\"Validate customer_legal_name is not null. For i equals to : \" + i +\"  Value of customer_legal_name is \" + jsonData.customer_legal_name] = ",
											"        jsonData.customer_legal_name !== null && ",
											"        jsonData.customer_legal_name !== ' ' ;",
											"        ",
											"        tests[\"Validate contact_person is not null. For i equals to : \" + i +\"  Value of contact_person is \" + jsonData.contact_person] = ",
											"        jsonData.contact_person !== null && ",
											"        jsonData.contact_person !== ' ' ;",
											"        ",
											"        pm.test(\"Validate email_id is not null. For i equals to : \" + i +\"  Value of email_id is: \" + jsonData.email_id, function()",
											"                    {",
											"                        pm.expect(jsonData.email_id).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);",
											"                    });",
											"        ",
											"        pm.test(\"Validate gstin is not null. For i equals to : \" + i +\"  Value of gstin is: \" + jsonData.gstin, function()",
											"                    {",
											"                        pm.expect(jsonData.gstin).to.match(/\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/);",
											"                    }); ",
											"        ",
											"        tests[\"Validate phone_1 is not null. For i equals to : \" + i +\"  Value of phone_1 is \" + jsonData.phone_1] = ",
											"        jsonData.phone_1 !== null && ",
											"        jsonData.phone_1 !== ' ' ||",
											"        jsonData.phone_1.length==10 ;",
											"        ",
											"        tests[\"Validate state is not null. For i equals to : \" + i +\"  Value of state is \" + jsonData.state] = ",
											"        jsonData.state !== null && ",
											"        jsonData.state !== ' ' ;",
											"        ",
											"        tests[\"Validate address_line_1 is not null. For i equals to : \" + i +\"  Value of address_line_1 is \" + jsonData.address_line_1] = ",
											"        jsonData.address_line_1 !== null && ",
											"        jsonData.address_line_1 !== ' ' ;",
											"        ",
											"        tests[\"Validate city is not null. For i equals to : \" + i +\"  Value of city is \" + jsonData.city] = ",
											"        jsonData.city !== null && ",
											"        jsonData.city !== ' ' ;",
											"        ",
											"        tests[\"Validate zip_code is not null. For i equals to : \" + i +\"  Value of zip_code is \" + jsonData.zip_code] = ",
											"        jsonData.zip_code !== null && ",
											"        jsonData.zip_code !== ' ' && ",
											"        jsonData.zip_code.length >= 6 ;",
											"        ",
											"        tests[\"Validate country is not null. For i equals to : \" + i +\"  Value of country is \" + jsonData.country] = ",
											"        jsonData.country !== null && ",
											"        jsonData.country !== ' ' ;",
											"        ",
											"        ",
											"    }",
											"    }",
											"    //7. Verification of content type",
											"    ",
											"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"        function(){",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"        })",
											"   ",
											"}",
											"    ",
											"      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0c0849a-d091-4375-9f7e-84721593b41b",
										"exec": [
											"var compId = pm.variables.get('compId'); ",
											"var custName = pm.variables.get('custName'); ",
											"",
											"if(!compId || compId==null || (!custName) || custName==null)",
											"{",
											"    compId=[\"\",null,\"Str\",1,1,1,1];",
											"    custName=[\"NBB\", \"NBB\", \"NBB\", \"\", null, \"Non Existing Customer\", \"NBB\"];",
											"",
											"}",
											"",
											"currentcompId=compId.shift()",
											"currentcustName=custName.shift()",
											"pm.environment.set('CompanyId',currentcompId )",
											"pm.environment.set('compId',compId )",
											"pm.environment.set('Customer_name', currentcustName); ",
											"pm.environment.set('custName',custName )",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/customers?customer_name={{Customer_name}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"company",
										"{{CompanyId}}",
										"customers"
									],
									"query": [
										{
											"key": "customer_name",
											"value": "{{Customer_name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getBusinessDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28fe28b5-66ae-420c-900e-1fa71a9091ae",
										"exec": [
											"var company_id= pm.environment.get(\"company_id\")",
											"var compId= pm.environment.get(\"compId\")",
											"",
											"// negative scenario",
											"",
											"if(compId.length>0)",
											"{",
											"     tests[\"Validating the response for negative scenario for company id : \" + company_id ]=",
											"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
											"             ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
											"             (pm.response.json().message ==\"params.company_id should be number\") ",
											"    postman.setNextRequest(\"getBusinessDetails\")",
											"}",
											"else{",
											"        ",
											"    pm.environment.set(\"compId\",null)",
											"    // 1. JSON schema validation",
											"    ",
											"    var schema = {",
											"      \"definitions\": {},",
											"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"      \"$id\": \"http://example.com/root.json\",",
											"      \"type\": \"object\",",
											"      \"title\": \"The Root Schema\",",
											"      \"required\": [",
											"        \"company\"",
											"      ],",
											"      \"properties\": {",
											"        \"company\": {",
											"          \"$id\": \"#/properties/company\",",
											"          \"type\": \"object\",",
											"          \"title\": \"The Company Schema\",",
											"          \"required\": [",
											"            \"id\",",
											"            \"company_legal_name\",",
											"            \"pan\",",
											"            \"locations\",",
											"            \"bank_details\",",
											"            \"signatories\"",
											"          ],",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"$id\": \"#/properties/company/properties/id\",",
											"              \"type\": \"integer\",",
											"              \"title\": \"The Id Schema\",",
											"              \"default\": 0,",
											"              \"examples\": [",
											"                1",
											"              ]",
											"            },",
											"            \"company_legal_name\": {",
											"              \"$id\": \"#/properties/company/properties/company_legal_name\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Company_legal_name Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"M/s. Language\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"pan\": {",
											"              \"$id\": \"#/properties/company/properties/pan\",",
											"              \"type\": \"string\",",
											"              \"title\": \"The Pan Schema\",",
											"              \"default\": \"\",",
											"              \"examples\": [",
											"                \"DMSPS0123Q\"",
											"              ],",
											"              \"pattern\": \"^(.*)$\"",
											"            },",
											"            \"locations\": {",
											"              \"$id\": \"#/properties/company/properties/locations\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Locations Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/company/properties/locations/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"billing_from\",",
											"                  \"gstin\",",
											"                  \"address\"",
											"                ],",
											"                \"properties\": {",
											"                  \"billing_from\": {",
											"                    \"$id\": \"#/properties/company/properties/locations/items/properties/billing_from\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Billing_from Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"Maharashtra\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"gstin\": {",
											"                    \"$id\": \"#/properties/company/properties/locations/items/properties/gstin\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Gstin Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"27DMSPS0123QZ9\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"address\": {",
											"                    \"$id\": \"#/properties/company/properties/locations/items/properties/address\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Address Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"5/7 A-8, Grant Building, Arthur Bumder Road, Colaba, Mumbai, Maharashtra, India 400005\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            },",
											"            \"bank_details\": {",
											"              \"$id\": \"#/properties/company/properties/bank_details\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Bank_details Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/company/properties/bank_details/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"account_name\",",
											"                  \"account_number\",",
											"                  \"bank\",",
											"                  \"ifsc\",",
											"                  \"branch\"",
											"                ],",
											"                \"properties\": {",
											"                  \"account_name\": {",
											"                    \"$id\": \"#/properties/company/properties/bank_details/items/properties/account_name\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Account_name Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"M/s. Language\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"account_number\": {",
											"                    \"$id\": \"#/properties/company/properties/bank_details/items/properties/account_number\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Account_number Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"10292029002\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"bank\": {",
											"                    \"$id\": \"#/properties/company/properties/bank_details/items/properties/bank\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Bank Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"HDFC Bank\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"ifsc\": {",
											"                    \"$id\": \"#/properties/company/properties/bank_details/items/properties/ifsc\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Ifsc Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"HDFC0123455\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"branch\": {",
											"                    \"$id\": \"#/properties/company/properties/bank_details/items/properties/branch\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Branch Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"Colaba, Mumbai\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            },",
											"            \"signatories\": {",
											"              \"$id\": \"#/properties/company/properties/signatories\",",
											"              \"type\": \"array\",",
											"              \"title\": \"The Signatories Schema\",",
											"              \"items\": {",
											"                \"$id\": \"#/properties/company/properties/signatories/items\",",
											"                \"type\": \"object\",",
											"                \"title\": \"The Items Schema\",",
											"                \"required\": [",
											"                  \"user_name\",",
											"                  \"designation\",",
											"                  \"image_url\"",
											"                ],",
											"                \"properties\": {",
											"                  \"user_name\": {",
											"                    \"$id\": \"#/properties/company/properties/signatories/items/properties/user_name\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The User_name Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"Zeeshan Keval\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"designation\": {",
											"                    \"$id\": \"#/properties/company/properties/signatories/items/properties/designation\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Designation Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"PA\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  },",
											"                  \"image_url\": {",
											"                    \"$id\": \"#/properties/company/properties/signatories/items/properties/image_url\",",
											"                    \"type\": \"string\",",
											"                    \"title\": \"The Image_url Schema\",",
											"                    \"default\": \"\",",
											"                    \"examples\": [",
											"                      \"http://some_signature.com/eeeee.jpg\"",
											"                    ],",
											"                    \"pattern\": \"^(.*)$\"",
											"                  }",
											"                }",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    };",
											"    ",
											"    ",
											"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
											"    function() {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"    }",
											"    );",
											"    ",
											"    // 2. Validation of data type of keys in reponse",
											"    ",
											"    if (!tv4.validate(pm.response.json(), schema))",
											"    {",
											"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
											"            if (errors.length==1){",
											"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
											"                    function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"                    }",
											"                        );",
											"            }",
											"           ",
											"           if(errors.length>1){",
											"            for(i=0;i<errors.length;i++)   {",
											"                       console.log(errors[i].message)",
											"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
											"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
											"                    })  ",
											"            } ",
											"           }",
											"        ",
											"    }",
											"    ",
											"    // 3. Verify Status code is 200",
											"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
											"        pm.response.to.have.status(parseInt(environment.statusCode));",
											"    });",
											"    ",
											"    ",
											"    // 4. Verify response time is less than 1700ms",
											"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
											"    });",
											"    ",
											"    // 5. Verify response body contain string",
											"    ",
											"    pm.test(\"JSON response Body contains id: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"id\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains company legal name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"company_legal_name\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains pan: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"pan\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains locations: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"locations\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains billing_from: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"billing_from\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains gstin: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"gstin\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains address: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"address\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains bank details: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"bank_details\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains account name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"account_name\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains account number: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"account_number\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains bank: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"bank\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains ifsc: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"ifsc\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains branch: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"branch\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains signatories: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"signatories\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains user name: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"user_name\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains designation: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"designation\");",
											"    });",
											"    ",
											"    pm.test(\"JSON response Body contains image_url: Verified\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"image_url\");",
											"    });",
											"    ",
											"    // 6. JSON value check in reponse body",
											"    ",
											"   var jsonData = pm.response.json().company;",
											"    ",
											"    ",
											"    tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
											"        jsonData.id !== null && ",
											"        jsonData.id !== ' ' && ",
											"        jsonData.id !== 0;",
											"        ",
											"    tests[\"Validate Company legal name is not null. Value of Company legal name is \" + jsonData.company_legal_name] = ",
											"        jsonData.company_legal_name !== null && ",
											"        jsonData.company_legal_name !== ' ' && ",
											"        jsonData.company_legal_name !== 0;",
											"    ",
											"       // PAN no validation",
											"    pm.test(\"PAN is equal to \" + jsonData.pan, function () ",
											"    {",
											"        pm.expect(jsonData.pan).to.match(/[A-Z]{5}\\d{4}[A-Z]{1}/);",
											"        pm.expect(jsonData.pan.length).to.eql(10);",
											"    });",
											"        ",
											"    locations=pm.response.json().company.locations",
											"    noOfLocations=locations.length",
											"     ",
											"         for(i=0;i<noOfLocations;i++)",
											"             {",
											"                tests[\"Validate billing from is not null. Value of billing from is \" + locations[i].billing_from] = ",
											"                    locations[i].billing_from !== null && ",
											"                    locations[i].billing_from !== ' ' && ",
											"                    locations[i].billing_from !== 0;",
											"",
											"                ",
											"                pm.test(\"gstin is equal to \" + locations[i].gstin + \" length is: \" + locations[i].gstin.length, function () ",
											"                        {",
											"                            pm.expect(locations[i].gstin).to.match(/\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/);",
											"                            pm.expect(locations[i].gstin.length).to.eql(15);",
											"                        ",
											"                        }); ",
											"                        ",
											"                tests[\"Validate Address is not null. Value of Address is \" + locations[i].address] = ",
											"                    locations[i].address !== null && ",
											"                    locations[i].address !== ' ' && ",
											"                    locations[i].address !== 0;",
											"             }",
											"             ",
											"    bank_details=pm.response.json().company.bank_details   ",
											"    ",
											"    tests[\"Validate account name is not null. Value of account name is \" + bank_details[0].account_name] = ",
											"        bank_details[0].account_name !== null && ",
											"        bank_details[0].account_name !== ' ' && ",
											"        bank_details[0].account_name.length>= 3;",
											"        ",
											"    tests[\"Validate account_number is not null. Value of account_number is \" + bank_details[0].account_number] = ",
											"        bank_details[0].account_number !== null && ",
											"        bank_details[0].account_number !== ' ' && ",
											"        bank_details[0].account_number>100000;",
											"        ",
											"    tests[\"Validate bank is not null. Value of bank is \" + bank_details[0].bank] = ",
											"        bank_details[0].bank !== null && ",
											"        bank_details[0].bank !== ' ' && ",
											"        bank_details[0].bank.length >3;",
											"        ",
											"    tests[\"Validate ifsc is not null. Value of Address is \" + bank_details[0].ifsc] = ",
											"        bank_details[0].ifsc !== null && ",
											"        bank_details[0].ifsc !== ' ' && ",
											"        bank_details[0].ifsc.length>=6;",
											"        ",
											"    tests[\"Validate branch is not null. Value of branch is \" + bank_details[0].branch] = ",
											"        bank_details[0].branch !== null && ",
											"        bank_details[0].branch !== ' ' && ",
											"        bank_details[0].branch.length > 3;",
											"    ",
											"    signatories=pm.response.json().company.signatories",
											"                ",
											"    tests[\"Validate user_name is not null. Value of user_name is \" + signatories[0].user_name] = ",
											"        signatories[0].user_name !== null && ",
											"        signatories[0].user_name !== ' ' && ",
											"        signatories[0].user_name.length >= 3;",
											"        ",
											"    tests[\"Validate designation is not null. Value of designation is \" + signatories[0].designation] = ",
											"        signatories[0].designation !== null && ",
											"        signatories[0].designation !== ' ' && ",
											"        signatories[0].designation.length >= 2;",
											"        ",
											"    pm.test(\"image_url is equal to \" + signatories[0].image_url, function () {",
											"        pm.expect(signatories[0].image_url).to.include(\"http://\")||",
											"        pm.expect(signatories[0].image_url).to.include(\"https://\");",
											"                        }); ",
											"    ",
											"     //7. To print Application content type as JSON",
											"    ",
											"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
											"    function(){",
											"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
											"    })",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfe66445-87a7-42a1-ae62-18e4162eebc6",
										"exec": [
											"var compId = pm.environment.get(\"compId\");",
											"",
											"if(!compId || compId==null)",
											"{",
											"    compId=[\"\",null,\"Str\", 1]",
											"}",
											"",
											"currentcompId = compId.shift();",
											"pm.environment.set(\"company_id\",currentcompId);",
											"pm.environment.set(\"compId\",compId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/v1/company/{{company_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"company",
										"{{company_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "addCustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "585f5542-dbc3-40b1-aac3-5dd706d5eadf",
										"exec": [
											"// REQUEST BODY",
											"/*{",
											"  \"bill_to\": \"NBB\",",
											"  \"gstin\": \"23AAKCA2311H1Z8\",",
											"  \"country\": \"India\",",
											"  \"address\": \"Design capital , bangalore\",",
											"  \"state\": \"Karnataka\",",
											"  \"city\": \"bangalore\",",
											"  \"pincode\": 546654,",
											"  \"contact_person\": \"Niv\",",
											"  \"contact_email\": \"dd@dd.com\",",
											"  \"contact_number\": 1234567895",
											"}*/",
											"",
											"var billTo=pm.environment.get(\"billTo\");",
											"var bill_to=pm.environment.get(\"bill_to\");",
											"",
											"if(!billTo || !gstin || !country || !address || !state || !city || !pincode || !contact_person || !contact_email || !contact_number)    ",
											"{",
											"    billTo=[\"\",null,\"NBB\"];",
											"    gstin=[\"\",null,\"23AAKCA2311H1Z8\"];",
											"    country=[\"\",null,\"India\"];",
											"    address=[\"\",null,\"Design capital , bangalore\"];",
											"    state=[\"\",null,\"Karnataka\"];",
											"    city=[\"\",null,\"bangalore\"];",
											"    pincode=[\"\",null,546654];",
											"    contact_person=[\"\",null,\"Niv\"];",
											"    contact_email=[\"\",null,\"dd@dd.com\"];",
											"    contact_number=[\"\",null,1234567895]",
											"}",
											"currentBillTo=billTo.shift();",
											"pm.environment.set(\"bill_to\",currentBillTo)",
											"pm.environment.set(\"billTo\",billTo)",
											"console.log(\"billTo  in Pre-request: \" +currentBillTo)",
											"console.log(\"bill_to  in Pre-request: \" +bill_to)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d5992bc-b4aa-4b30-b1eb-d39fd9bf970a",
										"exec": [
											"",
											"postman.setNextRequest(\"addCustomer\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bill_to\": \"{{bill_to}}\",\n  \"gstin\": \"{{gstin}}\",\n  \"country\": \"{{country}}\",\n  \"address\": \"{{address}}\",\n  \"state\": \"{{state}}\",\n  \"city\": \"{{city}}\",\n  \"pincode\": \"{{pincode}}\",\n  \"contact_person\": \"{{contact_person}}\",\n  \"contact_email\": \"{{contact_email}}\",\n  \"contact_number\": \"{{contact_number}}\"\n}"
								},
								"url": {
									"raw": "{{BaseURL}}/api/v1/company/1/customers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"v1",
										"company",
										"1",
										"customers"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Invoices",
			"item": [
				{
					"name": "getInvoiceDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da354fa7-8c20-4195-867e-ec9a13a01ff0",
								"exec": [
									"// Get the value of CompanyId and array compId from pre-request script.",
									"",
									"var CompanyId=pm.environment.get(\"CompanyId\");",
									"var compId=pm.environment.get(\"compId\")",
									"",
									"",
									"// Get the value of Invoice_Number and array InvNum from pre-request script.",
									"",
									"      var Invoice_Number = pm.environment.get(\"Invoice_Number\")",
									"      var InvNum= pm.environment.get(\"InvNum\")",
									"",
									"// Validate Negative scenarios for all posible combination of CompanyId and Invoice_Number",
									"",
									"    if(InvNum.length>0 )",
									"    {",
									"        tests[\"Validating the response for negative scenario for Invoice number : \" + Invoice_Number + \"Company Id \"+ CompanyId]=",
									"             (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
									"             ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
									"             (pm.response.json().message ==\"Resource does not exists\" || pm.response.json().message ==\"params.company_id should be number\") ",
									"                 ",
									"         postman.setNextRequest(\"getInvoiceDetails\");",
									"",
									"    }",
									"    else",
									"        {",
									"        ",
									"           // set InvNum array and compId array as \"\"",
									"           ",
									"            pm.environment.set(\"InvNum\",null);",
									"            pm.environment.set(\"compId\",null);",
									"",
									"        // 1. JSON schema validation",
									"        ",
									"        var schema = {",
									"          \"definitions\": {},",
									"          \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"          \"$id\": \"http://example.com/root.json\",",
									"          \"type\": \"object\",",
									"          \"title\": \"The Root Schema\",",
									"          \"required\": [",
									"            \"invoice\"",
									"          ],",
									"          \"properties\": {",
									"            \"invoice\": {",
									"              \"$id\": \"#/properties/invoice\",",
									"              \"type\": \"object\",",
									"              \"title\": \"The Invoice Schema\",",
									"              \"required\": [",
									"                \"id\",",
									"                \"status\",",
									"                \"bill_to\",",
									"                \"invoice_nbr\",",
									"                \"total_cost\",",
									"                \"payment_due_date\",",
									"                \"created_at\",",
									"                \"invoice_sent_at\",",
									"                \"signatory_name\",",
									"                \"creator_name\",",
									"                \"sent_by\",",
									"                \"items\",",
									"                \"reminders\",",
									"                \"history\",",
									"                \"attachments\"",
									"              ],",
									"              \"properties\": {",
									"                \"id\": {",
									"                  \"$id\": \"#/properties/invoice/properties/id\",",
									"                  \"type\": \"integer\",",
									"                  \"title\": \"The Id Schema\",",
									"                  \"default\": 0,",
									"                  \"examples\": [",
									"                    125",
									"                  ]",
									"                },",
									"                \"status\": {",
									"                  \"$id\": \"#/properties/invoice/properties/status\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Status Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"due\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"bill_to\": {",
									"                  \"$id\": \"#/properties/invoice/properties/bill_to\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Bill_to Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"NBB\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"invoice_nbr\": {",
									"                  \"$id\": \"#/properties/invoice/properties/invoice_nbr\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Invoice_nbr Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"INV_NBR_10\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"total_cost\": {",
									"                  \"$id\": \"#/properties/invoice/properties/total_cost\",",
									"                  \"type\": \"integer\",",
									"                  \"title\": \"The Total_cost Schema\",",
									"                  \"default\": 0,",
									"                  \"examples\": [",
									"                    400",
									"                  ]",
									"                },",
									"                \"payment_due_date\": {",
									"                  \"$id\": \"#/properties/invoice/properties/payment_due_date\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Payment_due_date Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"2019-08-29T20:17:41.000Z\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"created_at\": {",
									"                  \"$id\": \"#/properties/invoice/properties/created_at\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Created_at Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"2018-06-09T20:51:22.000Z\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"invoice_sent_at\": {",
									"                  \"$id\": \"#/properties/invoice/properties/invoice_sent_at\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Invoice_sent_at Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"2018-06-10T20:51:22.000Z\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"signatory_name\": {",
									"                  \"$id\": \"#/properties/invoice/properties/signatory_name\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Signatory_name Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"ZEE\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"creator_name\": {",
									"                  \"$id\": \"#/properties/invoice/properties/creator_name\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Creator_name Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"Zeeshan Keval\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"sent_by\": {",
									"                  \"$id\": \"#/properties/invoice/properties/sent_by\",",
									"                  \"type\": \"string\",",
									"                  \"title\": \"The Sent_by Schema\",",
									"                  \"default\": \"\",",
									"                  \"examples\": [",
									"                    \"Amitraj\"",
									"                  ],",
									"                  \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"items\": {",
									"                  \"$id\": \"#/properties/invoice/properties/items\",",
									"                  \"type\": \"array\",",
									"                  \"title\": \"The Items Schema\",",
									"                  \"items\": {",
									"                    \"$id\": \"#/properties/invoice/properties/items/items\",",
									"                    \"type\": \"object\",",
									"                    \"title\": \"The Items Schema\",",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"invoice_id\",",
									"                      \"item\",",
									"                      \"price\"",
									"                    ],",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          2",
									"                        ]",
									"                      },",
									"                      \"invoice_id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/invoice_id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Invoice_id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          125",
									"                        ]",
									"                      },",
									"                      \"item\": {",
									"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/item\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The Item Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"SWX Renewal\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      },",
									"                      \"price\": {",
									"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/price\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Price Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          10000",
									"                        ]",
									"                      }",
									"                    }",
									"                  }",
									"                },",
									"                \"reminders\": {",
									"                  \"$id\": \"#/properties/invoice/properties/reminders\",",
									"                  \"type\": \"array\",",
									"                  \"title\": \"The Reminders Schema\",",
									"                  \"items\": {",
									"                    \"$id\": \"#/properties/invoice/properties/reminders/items\",",
									"                    \"type\": \"object\",",
									"                    \"title\": \"The Items Schema\",",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"invoice_id\",",
									"                      \"reminded_at\"",
									"                    ],",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/reminders/items/properties/id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          1",
									"                        ]",
									"                      },",
									"                      \"invoice_id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/reminders/items/properties/invoice_id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Invoice_id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          125",
									"                        ]",
									"                      },",
									"                      \"reminded_at\": {",
									"                        \"$id\": \"#/properties/invoice/properties/reminders/items/properties/reminded_at\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The Reminded_at Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"2018-04-20T20:51:22.000Z\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      }",
									"                    }",
									"                  }",
									"                },",
									"                \"history\": {",
									"                  \"$id\": \"#/properties/invoice/properties/history\",",
									"                  \"type\": \"array\",",
									"                  \"title\": \"The History Schema\",",
									"                  \"items\": {",
									"                    \"$id\": \"#/properties/invoice/properties/history/items\",",
									"                    \"type\": \"object\",",
									"                    \"title\": \"The Items Schema\",",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"invoice_id\",",
									"                      \"company_user_id\",",
									"                      \"created_at\",",
									"                      \"notes\"",
									"                    ],",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          1",
									"                        ]",
									"                      },",
									"                      \"invoice_id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/invoice_id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Invoice_id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          125",
									"                        ]",
									"                      },",
									"                      \"company_user_id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/company_user_id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Company_user_id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          1",
									"                        ]",
									"                      },",
									"                      \"created_at\": {",
									"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/created_at\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The Created_at Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"2019-05-27T07:34:18.216Z\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      },",
									"                      \"notes\": {",
									"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/notes\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The Notes Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"brochure uploaded\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      }",
									"                    }",
									"                  }",
									"                },",
									"                \"attachments\": {",
									"                  \"$id\": \"#/properties/invoice/properties/attachments\",",
									"                  \"type\": \"array\",",
									"                  \"title\": \"The Attachments Schema\",",
									"                  \"items\": {",
									"                    \"$id\": \"#/properties/invoice/properties/attachments/items\",",
									"                    \"type\": \"object\",",
									"                    \"title\": \"The Items Schema\",",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"invoice_id\",",
									"                      \"file_name\",",
									"                      \"file_url\"",
									"                    ],",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          1",
									"                        ]",
									"                      },",
									"                      \"invoice_id\": {",
									"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/invoice_id\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The Invoice_id Schema\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                          125",
									"                        ]",
									"                      },",
									"                      \"file_name\": {",
									"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/file_name\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The File_name Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"brochure\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      },",
									"                      \"file_url\": {",
									"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/file_url\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The File_url Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"http://brochure.pdf\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      }",
									"                    }",
									"                  }",
									"                }",
									"              }",
									"            }",
									"          }",
									"        };",
									"        ",
									"        pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"        function() {",
									"          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"        }",
									"        );",
									"        ",
									"        // 2. Validation of data type of keys in reponse",
									"        ",
									"        if (!tv4.validate(pm.response.json(), schema))",
									"        {",
									"            var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"                if (errors.length==1){",
									"                    pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                        function() {",
									"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                        }",
									"                            );",
									"                }",
									"               ",
									"               if(errors.length>1){",
									"                for(i=0;i<errors.length;i++)   {",
									"                           console.log(errors[i].message)",
									"                           pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                        })  ",
									"                } ",
									"               }",
									"        }",
									"        ",
									"        ",
									"        // 3. Verify Status code is 200",
									"            pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
									"                pm.response.to.have.status(parseInt(environment.statusCode));",
									"            });",
									"        ",
									"        // 4. Verify response time is less than 1700ms",
									"            pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
									"                pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"            });",
									"        ",
									"        //5. Verify response body contain string - mandatory keys in reponse",
									"            pm.test(\"JSON response Body contains id: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"id\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains status: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"status\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains bill_to: Verified\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"bill_to\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains invoice_nbr\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains total_cost\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"total_cost\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains payment_due_date\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"payment_due_date\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains created_at\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"created_at\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains invoice_sent_at\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"invoice_sent_at\");",
									"            });",
									"            ",
									"            pm.test(\"JSON response Body contains items\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"items\");",
									"            });",
									"            ",
									"            ",
									"            try{",
									"                    var noOfItems = pm.response.json().invoice.items.length   ",
									"            }",
									"            catch(err){",
									"                console.log(\"error in items.length. Actual error is : \" + err)",
									"            }",
									"            ",
									"            if (noOfItems>0)",
									"            ",
									"                {",
									"                    pm.test(\"JSON response Body contains invoice_id\", function () ",
									"                        {",
									"                            pm.expect(pm.response.text()).to.include(\"invoice_id\");",
									"                        });",
									"                    ",
									"                    pm.test(\"JSON response Body contains item\", function () ",
									"                        {",
									"                            pm.expect(pm.response.text()).to.include(\"item\");",
									"                        });",
									"                    ",
									"                    pm.test(\"JSON response Body contains price\", function ()",
									"                        {",
									"                            pm.expect(pm.response.text()).to.include(\"price\");",
									"                        });",
									"                }",
									"        ",
									"           pm.test(\"JSON response Body contains reminders\", function () {",
									"                pm.expect(pm.response.text()).to.include(\"reminders\");",
									"            });",
									"            ",
									"         try{",
									"                var noOfReminders = pm.response.json().invoice.reminders.length",
									"            }",
									"            catch(err){",
									"                console.log(\"Error in try block in noOfReminders \"+ err)",
									"            }",
									"            ",
									"            if(noOfReminders>0)",
									"                {",
									"                  pm.test(\"JSON response Body contains reminded_at\", function () {",
									"                    pm.expect(pm.response.text()).to.include(\"reminded_at\");",
									"                });",
									"            }",
									"        ",
									"            pm.test(\"JSON response Body contains history\", function () ",
									"                {",
									"                    pm.expect(pm.response.text()).to.include(\"history\");",
									"                });",
									"        ",
									"            try{",
									"                var history = pm.response.json().invoice.history.length",
									"            }",
									"            catch(err){",
									"                console.log(\"Error in try block in History : \" + err)",
									"            }",
									"        ",
									"            if(history>0)",
									"                {",
									"                    pm.test(\"JSON response Body contains company_user_id\", function () ",
									"                        {",
									"                            pm.expect(pm.response.text()).to.include(\"company_user_id\");",
									"                        });",
									"                        ",
									"                    pm.test(\"JSON response Body contains notes\", function () ",
									"                        {",
									"                            pm.expect(pm.response.text()).to.include(\"notes\");",
									"                        });",
									"                 }",
									"        ",
									"            pm.test(\"JSON response Body contains attachments\", function () ",
									"                {",
									"                    pm.expect(pm.response.text()).to.include(\"attachments\");",
									"                });",
									"        ",
									"            try{",
									"                var attachments = pm.response.json().invoice.attachments.length",
									"            }",
									"            catch(err){",
									"                console.log(\"Error in try block in attachments: \" +err)",
									"            }",
									"        ",
									"            if(attachments>0)",
									"                {",
									"                    pm.test(\"JSON response Body contains file_name\", function () {",
									"                        pm.expect(pm.response.text()).to.include(\"file_name\");",
									"                    });",
									"                    ",
									"                    pm.test(\"JSON response Body contains file_url\", function () {",
									"                        pm.expect(pm.response.text()).to.include(\"file_url\");",
									"                    });",
									"                }",
									"                ",
									"        //6. JSON value check in reponse body",
									"         ",
									"          try",
									"          {",
									"            var jsonData = pm.response.json().invoice",
									"            console.log(\"jsonData.status : \" + jsonData.status)",
									"            if (jsonData.status !=\"draft\") // Invoice should not be Draft ",
									"                {",
									"                    tests[\"Validate id is not null. Value of id is: \" +jsonData.id ] = ",
									"                        jsonData.id !== null && ",
									"                        jsonData.id !== ' ' &&",
									"                        jsonData.id >=0;",
									"                    ",
									"                    tests[\"Validate status is in Invoice Details screen. Value of status is: \" +jsonData.status]= ",
									"                        (jsonData.status ==\"overdue\" ||",
									"                        jsonData.status ==\"paid\" ||",
									"                        jsonData.status ==\"due\") ;",
									"                        ",
									"                    tests[\"Validate bill_to is not null. Value of bill_to is: \" +jsonData.bill_to ] = ",
									"                        jsonData.bill_to !== null && ",
									"                        jsonData.bill_to !== ' ';",
									"                ",
									"                    pm.test(\"invoice_nbr is equal to \" + jsonData.invoice_nbr, function () ",
									"                        {",
									"                            pm.expect(jsonData.invoice_nbr).to.match(/[INV_NBR_]\\d{1}/);",
									"                        ",
									"                        });",
									"                   ",
									"                   ",
									"                    tests[\"Validate total_cost is not null. Value of total_cost is: \" + jsonData.total_cost]=",
									"                        jsonData.total_cost !==null &&",
									"                        jsonData.total_cost !==' ' &&",
									"                        jsonData.total_cost >0;",
									"                ",
									"                    pm.test(\"Validate payment_due_date is not null. Value of payment_due_date is: \" + jsonData.payment_due_date, function()",
									"                        {",
									"                            pm.expect(jsonData.payment_due_date).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                        });",
									"                    ",
									"                    pm.test(\"Validate created_at is not null. Value of created_at is: \" + jsonData.created_at, function()",
									"                        {",
									"                            pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                        });",
									"                ",
									"                    pm.test(\"Validate invoice_sent_at is not null. Value of invoice_sent_at is: \" + jsonData.invoice_sent_at, function()",
									"                        {",
									"                            pm.expect(jsonData.invoice_sent_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                        });",
									"                 ",
									"                 tests[\"Validate signatory_name is not null. Value of signatory_name is: \" + jsonData.signatory_name]=",
									"                        jsonData.signatory_name !==null &&",
									"                        jsonData.signatory_name !==' '&&",
									"                        jsonData.signatory_name.length>=2;",
									"                        ",
									"                 tests[\"Validate creator_name is not null. Value of creator_name is: \" + jsonData.creator_name]=",
									"                        jsonData.creator_name !==null &&",
									"                        jsonData.creator_name !==' ' &&",
									"                        jsonData.creator_name.length >=3;",
									"                        ",
									"                 tests[\"Validate sent_by is not null. Value of sent_by is: \" + jsonData.sent_by]=",
									"                        jsonData.sent_by !==null &&",
									"                        jsonData.sent_by !==' ' &&",
									"                        jsonData.sent_by.length >=3;",
									"                ",
									"                var items = pm.response.json().invoice.items",
									"                    if(noOfItems>0)",
									"                        {",
									"                            for(i=0;i<noOfItems; i++)",
									"                                {  ",
									"                                    tests[\"Validate id is not null. Value of id is: \" + items[i].id]=",
									"                                    items[i].id !== null &&",
									"                                    items[i].id !==' ' &&",
									"                                    items[i].id >0;",
									"                                    ",
									"                                    tests[\"Validate invoice_id is not null. Value of invoice_id is: \" + items[i].invoice_id]=",
									"                                    items[i].invoice_id !== null &&",
									"                                    items[i].invoice_id !==' ' &&",
									"                                    items[i].invoice_id >0 && ",
									"                                    items[i].invoice_id==pm.response.json().invoice.id;",
									"                                    ",
									"                                    tests[\"Validate item is not null. Value of item is: \" + items[i].item]=",
									"                                    items[i].item !== null &&",
									"                                    items[i].item !==' ' &&",
									"                                    items[i].item.length >=3;",
									"                                    ",
									"                                    tests[\"Validate price is not null. Value of price is: \" + items[i].price]=",
									"                                    items[i].price !== null &&",
									"                                    items[i].price !==' ' &&",
									"                                    items[i].price >0;",
									"                            }",
									"                    }",
									"                ",
									"                try{",
									"                    var reminders = pm.response.json().invoice.reminders",
									"                }",
									"                catch(err){",
									"                    console.log(\"Error in invoice.reminders. Actual error is : \" + err)",
									"                }",
									"                    if (noOfReminders>0){",
									"                       for(i=0;i<noOfReminders; i++)",
									"                            {",
									"                                tests[\"Validate id is not null.  For i equals to : \" + i +\" Value of id is: \" + reminders[i].id]=",
									"                                    reminders[i].id !== null &&",
									"                                    reminders[i].id !==' ' &&",
									"                                    reminders[i].id >0;",
									"                                ",
									"                                tests[\"Validate invoice_id is not null. For i equals to : \" + i +\"  Value of invoice_id is: \" + reminders[i].invoice_id]=",
									"                                    reminders[i].invoice_id !== null &&",
									"                                    reminders[i].invoice_id !==' ' &&",
									"                                    reminders[i].invoice_id >0  && ",
									"                                    reminders[i].invoice_id==pm.response.json().invoice.id;",
									"                                    ",
									"                                pm.test(\"Validate reminded_at is not null. For i equals to : \" + i +\"  Value of reminded_at is: \" + reminders[i].reminded_at, function()",
									"                                    {",
									"                                        pm.expect(reminders[i].reminded_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                                    });",
									"                            }",
									"                    }",
									"            ",
									"                var history = pm.response.json().invoice.history",
									"                    if (history>0){",
									"                       for(i=0;i<history; i++)",
									"                            {",
									"                                tests[\"Validate id is not null. For i equals to : \" + i +\"  Value of id is: \" + history[i].id]=",
									"                                    history[i].id !== null &&",
									"                                    history[i].id !==' ' &&",
									"                                    history[i].id >0;",
									"                                ",
									"                                tests[\"Validate invoice_id is not null.  For i equals to : \" + i +\" Value of invoice_id is: \" + history[i].invoice_id]=",
									"                                    history[i].invoice_id !== null &&",
									"                                    history[i].invoice_id !==' ' &&",
									"                                    history[i].invoice_id >0 && ",
									"                                    history[i].invoice_id==pm.response.json().invoice.id;",
									"                                    ",
									"                                tests[\"Validate company_user_id is not null. For i equals to : \" + i +\"  Value of company_user_id is: \" + history[i].company_user_id ]=",
									"                                    history[i].company_user_id !== null &&",
									"                                    history[i].company_user_id !==' ' &&",
									"                                    history[i].company_user_id >0;",
									"                                    ",
									"                                pm.test(\"Validate created_at is not null. For i equals to : \" + i +\"  Value of created_at is: \" + reminders[i].created_at, function()",
									"                                    {",
									"                                        pm.expect(reminders[i].created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                                    });",
									"                            }",
									"                    ",
									"                    }",
									"                    ",
									"                var attachments=pm.response.json().invoice.attachments;",
									"                    if (attachments>0){",
									"                       for(i=0;i<attachments; i++)",
									"                            {",
									"                                tests[\"Validate id is not null. For i equals to : \" + i +\"  Value of id is: \" + attachments[i].id]=",
									"                                    attachments[i].id !== null &&",
									"                                    attachments[i].id !==' ' &&",
									"                                    attachments[i].id >0;",
									"                                ",
									"                                tests[\"Validate invoice_id is not null. For i equals to : \" + i +\"  Value of invoice_id is: \" + attachments[i].invoice_id]=",
									"                                    attachments[i].invoice_id !== null &&",
									"                                    attachments[i].invoice_id !==' ' &&",
									"                                    attachments[i].invoice_id >0;",
									"                                    ",
									"                                tests[\"Validate file_name is not null. For i equals to : \" + i +\"  Value of file_name is: \" + attachments[i].file_name ]=",
									"                                    attachments[i].file_name !== null &&",
									"                                    attachments[i].file_name !==' ' &&",
									"                                    attachments[i].file_name !==0;",
									"                                    ",
									"                                tests[\"Validate file_url is not null. For i equals to : \" + i +\"  Value of file_url is: \" + attachments[i].file_url ]=",
									"                                    attachments[i].file_url !== null &&",
									"                                    attachments[i].file_url !==' ' &&",
									"                                    attachments[i].file_url !==0;",
									"                            }",
									"                    }",
									"            }",
									"            else{",
									"                    tests[\"Validate id is not null. Value of id is: \" +jsonData.id ] = ",
									"                        jsonData.id !== null ;",
									"                    ",
									"                    tests[\"Validate status is Draft. Value of status is: \" +jsonData.status]= ",
									"                        jsonData.status ==\"draft\" ;",
									"                        ",
									"                    tests[\"Validate bill_to is not null. Value of bill_to is: \" +jsonData.bill_to ] = ",
									"                        jsonData.bill_to !== null && ",
									"                        jsonData.bill_to !== ' ' ;",
									"            }",
									"          }",
									"          catch(err)",
									"          {",
									"              console.log(\"Error is jsonData.status. Actual error is : \")",
									"          }",
									"            ",
									"        // 7. To print Application content type as JSON",
									"        ",
									"            pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
									"            function(){",
									"                pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"            })",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29eca797-6840-4251-89af-426873b540ad",
								"exec": [
									"// Running the test 4 times ",
									"// 3 negative scenarios for the combination of companyId and Invoice_Number",
									"// 1 positive scenario for correct companyId and Invoice_Number",
									"",
									"var compId=pm.environment.get(\"compId\");",
									"var InvNum=pm.environment.get(\"InvNum\");",
									"",
									"if(!compId || (!InvNum) || compId==null || InvNum==null)",
									"{",
									"    compId=[\"\" ,null, \"a\" , 1,1,1,1]",
									"    InvNum=[\"INV_NBR_22\",\"INV_NBR_22\",\"INV_NBR_22\",\"\",null,  \"a\", \"INV_NBR_22\"];",
									"",
									"}",
									"",
									"",
									"currentcomId=compId.shift()",
									"pm.environment.set(\"CompanyId\",currentcomId)",
									"pm.environment.set(\"compId\",compId)",
									"console.log(\"compId in pre-request script \" + compId)",
									"console.log(\"currentcomId : \" + currentcomId)",
									"",
									"// validating the response for Negative scenarios of Invoice Id \"\" , null, INV_198",
									"//  and 1 Positive scenario of Invoice Id as : INV_BLR_XX  --- Check if INV_BLR_XX exists in DB",
									"",
									"currentInvNum=InvNum.shift()",
									"pm.environment.set(\"Invoice_Number\",currentInvNum);",
									"pm.environment.set(\"InvNum\",InvNum)",
									"console.log(\"InvNum in pre-request script \" + InvNum)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoice/{{Invoice_Number}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"company",
								"{{CompanyId}}",
								"invoice",
								"{{Invoice_Number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getInvoiceTotals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b23cba-c2cb-4e1d-bbd2-073bfda3d2ed",
								"exec": [
									"// Get the value of CompanyId and array compId from pre-request script.",
									"",
									"var compId = pm.environment.get(\"compId\");",
									"var CompanyId = pm.environment.get(\"CompanyId\");",
									"",
									"if(compId.length>0)",
									"{",
									"    tests[\"Validating the response for negative scenario for company Id : \" + CompanyId]=",
									"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
									"     ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
									"     (pm.response.json().message ==\"Resource does not exists\" || pm.response.json().message ==\"params.company_id should be number\");",
									"     ",
									"postman.setNextRequest(\"getInvoiceTotals\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"compId\",null);",
									"    ",
									"    // 1. JSON schema validation",
									"    var schema = {",
									"      \"definitions\": {},",
									"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"      \"$id\": \"http://example.com/root.json\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Root Schema\",",
									"      \"required\": [",
									"        \"invoice_amounts\"",
									"      ],",
									"      \"properties\": {",
									"        \"invoice_amounts\": {",
									"          \"$id\": \"#/properties/invoice_amounts\",",
									"          \"type\": \"object\",",
									"          \"title\": \"The Invoice_amounts Schema\",",
									"          \"required\": [",
									"            \"receivable_amount\",",
									"            \"draft_count\",",
									"            \"received_amount\",",
									"            \"invoiced_amount\"",
									"          ],",
									"          \"properties\": {",
									"            \"receivable_amount\": {",
									"              \"$id\": \"#/properties/invoice_amounts/properties/receivable_amount\",",
									"              \"type\": \"number\",",
									"              \"title\": \"The Receivable_amount Schema\",",
									"              \"default\": 0.0,",
									"              \"examples\": [",
									"                200.5",
									"              ]",
									"            },",
									"            \"draft_count\": {",
									"              \"$id\": \"#/properties/invoice_amounts/properties/draft_count\",",
									"              \"type\": \"integer\",",
									"              \"title\": \"The Draft_count Schema\",",
									"              \"default\": 0,",
									"              \"examples\": [",
									"                4",
									"              ]",
									"            },",
									"            \"received_amount\": {",
									"              \"$id\": \"#/properties/invoice_amounts/properties/received_amount\",",
									"              \"type\": \"number\",",
									"              \"title\": \"The Received_amount Schema\",",
									"              \"default\": 0.0,",
									"              \"examples\": [",
									"                199.5",
									"              ]",
									"            },",
									"            \"invoiced_amount\": {",
									"              \"$id\": \"#/properties/invoice_amounts/properties/invoiced_amount\",",
									"              \"type\": \"integer\",",
									"              \"title\": \"The Invoiced_amount Schema\",",
									"              \"default\": 0,",
									"              \"examples\": [",
									"                300",
									"              ]",
									"            }",
									"          }",
									"        }",
									"      }",
									"    };",
									"    ",
									"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"    function() {",
									"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    }",
									"    );",
									"",
									"    // 2. Validation of data type of keys in reponse",
									"    if (!tv4.validate(pm.response.json(), schema)){",
									"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"            if (errors.length==1){",
									"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                    function() {",
									"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                    });",
									"            }",
									"           ",
									"           if(errors.length>1){",
									"            for(i=0;i<errors.length;i++)   {",
									"                       console.log(errors[i].message)",
									"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                    })  } ",
									"           }",
									"    }",
									"",
									"    // 3. Verify Status code is 200",
									"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
									"        pm.response.to.have.status(parseInt(environment.statusCode));",
									"    });",
									"",
									"",
									"    // 4. Verify response time is less than 1700ms",
									"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"    });",
									"",
									"",
									"    //5. Verify response body contain string - mandatory keys in reponse",
									"    pm.test(\"JSON response Body contains invoice_amounts: Verified\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"invoice_amounts\");",
									"    });",
									"    ",
									"    pm.test(\"JSON response Body contains draft_count: Verified\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"draft_count\");",
									"    });",
									"    ",
									"    pm.test(\"JSON response Body contains received_amount: Verified\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"received_amount\");",
									"    });",
									"    ",
									"    pm.test(\"JSON response Body contains invoiced_amount\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"invoiced_amount\");",
									"    });",
									"    ",
									"",
									"    //6. JSON value check in reponse body",
									"    try",
									"    {",
									"         var jsonData = pm.response.json().invoice_amounts",
									"         ",
									"        tests[\"Validate receivable amount is not null. Value of receivable amount is: \" +jsonData.receivable_amount ] = ",
									"            jsonData.receivable_amount !== null && ",
									"            jsonData.receivable_amount !== ' ' &&",
									"            jsonData.receivable_amount >= 0;",
									"        ",
									"        tests[\"Validate draft_count is not null. Value of draft_count is \" + jsonData.draft_count] = ",
									"            jsonData.draft_count !== null && ",
									"            jsonData.draft_count !== ' ' &&",
									"            jsonData.draft_count >=0;",
									"    ",
									"        tests[\"Validate received_amount is not null. Value of received_amount is: \" +jsonData.received_amount ] = ",
									"            jsonData.received_amount !== null && ",
									"            jsonData.received_amount !== ' '  && ",
									"            jsonData.received_amount >= 0 ;",
									"        ",
									"        tests[\"Validate invoiced_amount is not null. Value of invoiced_amount is: \" +jsonData.invoiced_amount ] = ",
									"            jsonData.invoiced_amount !== null && ",
									"            jsonData.invoiced_amount !== ' ' && ",
									"            jsonData.invoiced_amount >= 0 ;",
									"    }",
									"    catch(err){",
									"        console.log(\"Error in json().invoice_amounts. Actual error is : \" + err)",
									"    }",
									"    ",
									"    // 7. To print Application content type as JSON",
									"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),function(){",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"    })",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "016a0f9d-a81b-43a0-8f47-96e902cd506a",
								"exec": [
									"// Running the test 4 times ",
									"// 3 negative scenarios for the companyId ",
									"// 1 positive scenario for correct companyId ",
									"",
									"var compId= pm.environment.get(\"compId\")",
									"if(!compId || compId==null){",
									"   compId=[ \"\",null,\"a\", 1] ;",
									"    ",
									"}",
									"",
									"currentcomId=compId.shift()",
									"pm.environment.set(\"CompanyId\",currentcomId)",
									"pm.environment.set(\"compId\",compId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoice_amounts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"company",
								"{{CompanyId}}",
								"invoice_amounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "getInvoicesLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "314ec82a-1a42-4af1-98f0-08416df94876",
								"exec": [
									"var CompanyId=pm.environment.get(\"CompanyId\")",
									"var ParamStatus = pm.environment.get(\"ParamStatus\")",
									"var statuses = pm.environment.get(\"statuses\");",
									"var year = pm.environment.get(\"year\");",
									"var month = pm.environment.get(\"month\");",
									"var Sort_by = pm.environment.get(\"Sort_by\");",
									"var search = pm.environment.get(\"search\");",
									"",
									"",
									"if(statuses.length>0)",
									"{",
									"    postman.setNextRequest(\"getInvoicesLists\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"statuses\", null);",
									"    pm.environment.set(\"compId\",null);",
									"}",
									"",
									"//   Total 12 Positive scenarios             ",
									"if(statuses.length>11){",
									"    tests[\"Validating the response for negative scenario for company id : \" + CompanyId + \" Status \"+ ParamStatus]=",
									"         (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
									"         ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
									"         (pm.response.json().message ==\"Resource does not exists\" ||",
									"         pm.response.json().message ==\"params.company_id should be number\" ||",
									"         pm.response.json().message ==\"querystring.status should be equal to one of the allowed values\" ||",
									"         pm.response.json().message ==\"querystring.year should NOT be shorter than 4 characters\" ||",
									"         pm.response.json().message ==\"querystring.month should be equal to one of the allowed values\" ||",
									"         pm.response.json().message ==\"querystring.sort_by should be equal to one of the allowed values\" ||",
									"         pm.response.json().message ==\"querystring.status should be equal to one of the allowed values, querystring.year should NOT be shorter than 4 characters, querystring.month should be equal to one of the allowed values, querystring.sort_by should be equal to one of the allowed values\") ;",
									"}",
									"else{",
									"       ",
									"    // 1. JSON schema validation",
									"",
									"    var schema;",
									"    ",
									"    var schemaDraft={",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"count\",",
									"    \"total_amount\",",
									"    \"invoices\"",
									"  ],",
									"  \"properties\": {",
									"    \"count\": {",
									"      \"$id\": \"#/properties/count\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Count Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        4",
									"      ]",
									"    },",
									"    \"total_amount\": {",
									"      \"$id\": \"#/properties/total_amount\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Total_amount Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"invoices\": {",
									"      \"$id\": \"#/properties/invoices\",",
									"      \"type\": \"array\",",
									"      \"title\": \"The Invoices Schema\",",
									"      \"items\": {",
									"        \"$id\": \"#/properties/invoices/items\",",
									"        \"type\": \"object\",",
									"        \"title\": \"The Items Schema\",",
									"        \"required\": [",
									"          \"bill_to\",",
									"          \"total_cost\",",
									"          \"created_at\",",
									"          \"status\",",
									"          \"last_modified_at\",",
									"          \"id\"",
									"        ],",
									"        \"properties\": {",
									"          \"bill_to\": {",
									"            \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Bill_to Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"SRVT\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"total_cost\": {",
									"            \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The Total_cost Schema\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"              200",
									"            ]",
									"          },",
									"          \"created_at\": {",
									"            \"$id\": \"#/properties/invoices/items/properties/created_at\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Created_at Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"2019-04-13T11:36:25.000Z\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"status\": {",
									"            \"$id\": \"#/properties/invoices/items/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Status Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"draft\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"last_modified_at\": {",
									"            \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Last_modified_at Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"2019-04-13T11:36:25.000Z\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"id\": {",
									"            \"$id\": \"#/properties/invoices/items/properties/id\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The Id Schema\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"              115",
									"            ]",
									"          }",
									"        }",
									"      }",
									"    }",
									"  }",
									"};",
									"",
									"    var schemaPaid={",
									"      \"definitions\": {},",
									"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"      \"$id\": \"http://example.com/root.json\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Root Schema\",",
									"      \"required\": [",
									"        \"count\",",
									"        \"total_amount\",",
									"        \"invoices\"",
									"      ],",
									"      \"properties\": {",
									"        \"count\": {",
									"          \"$id\": \"#/properties/count\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Count Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            5",
									"          ]",
									"        },",
									"        \"total_amount\": {",
									"          \"$id\": \"#/properties/total_amount\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Total_amount Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            888.5",
									"          ]",
									"        },",
									"        \"invoices\": {",
									"          \"$id\": \"#/properties/invoices\",",
									"          \"type\": \"array\",",
									"          \"title\": \"The Invoices Schema\",",
									"          \"items\": {",
									"            \"$id\": \"#/properties/invoices/items\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The Items Schema\",",
									"            \"required\": [",
									"              \"bill_to\",",
									"              \"invoice_nbr\",",
									"              \"received_amount\",",
									"              \"total_received_amount\",",
									"              \"total_cost\",",
									"              \"payment_due_date\",",
									"              \"paid_at\",",
									"              \"created_at\",",
									"              \"invoice_sent_at\",",
									"              \"status\",",
									"              \"last_modified_at\"",
									"            ],",
									"            \"properties\": {",
									"              \"bill_to\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Bill_to Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"NBB\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"invoice_nbr\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Invoice_nbr Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"INV_NBR_31\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"received_amount\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/received_amount\",",
									"                \"type\": \"number\",",
									"                \"title\": \"The Received_amount Schema\",",
									"                \"default\": 0.0,",
									"                \"examples\": [",
									"                  199.5",
									"                ]",
									"              },",
									"              \"total_received_amount\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/total_received_amount\",",
									"                \"type\": \"number\",",
									"                \"title\": \"The Total_received_amount Schema\",",
									"                \"default\": 0.0,",
									"                \"examples\": [",
									"                  199.5",
									"                ]",
									"              },",
									"              \"total_cost\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Total_cost Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  300",
									"                ]",
									"              },",
									"              \"payment_due_date\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Payment_due_date Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-06-29T20:17:41.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"paid_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/paid_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Paid_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-06-04T06:00:52.895Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"created_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Created_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-04-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"invoice_sent_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Invoice_sent_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-05-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"status\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/status\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Status Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"paid\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"last_modified_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Last_modified_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-04-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              }",
									"            }",
									"          }",
									"        }",
									"      }",
									"    };",
									"",
									"    var schemaReceivable = {",
									"      \"definitions\": {},",
									"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"      \"$id\": \"http://example.com/root.json\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Root Schema\",",
									"      \"required\": [",
									"        \"count\",",
									"        \"total_amount\",",
									"        \"invoices\"",
									"      ],",
									"      \"properties\": {",
									"        \"count\": {",
									"          \"$id\": \"#/properties/count\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Count Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            3",
									"          ]",
									"        },",
									"        \"total_amount\": {",
									"          \"$id\": \"#/properties/total_amount\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Total_amount Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            311.5",
									"          ]",
									"        },",
									"        \"invoices\": {",
									"          \"$id\": \"#/properties/invoices\",",
									"          \"type\": \"array\",",
									"          \"title\": \"The Invoices Schema\",",
									"          \"items\": {",
									"            \"$id\": \"#/properties/invoices/items\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The Items Schema\",",
									"            \"required\": [",
									"              \"bill_to\",",
									"              \"invoice_nbr\",",
									"              \"balance_amount\",",
									"              \"total_received_amount\",",
									"              \"total_cost\",",
									"              \"payment_due_date\",",
									"              \"created_at\",",
									"              \"invoice_sent_at\",",
									"              \"status\",",
									"              \"last_modified_at\",",
									"              \"id\"",
									"            ],",
									"            \"properties\": {",
									"              \"bill_to\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Bill_to Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"NBB\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"invoice_nbr\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Invoice_nbr Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"INV_NBR_31\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"balance_amount\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/balance_amount\",",
									"                \"type\": \"number\",",
									"                \"title\": \"The Balance_amount Schema\",",
									"                \"default\": 0.0,",
									"                \"examples\": [",
									"                  100.5",
									"                ]",
									"              },",
									"              \"total_received_amount\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/total_received_amount\",",
									"                \"type\": \"number\",",
									"                \"title\": \"The Total_received_amount Schema\",",
									"                \"default\": 0.0,",
									"                \"examples\": [",
									"                  199.5",
									"                ]",
									"              },",
									"              \"total_cost\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Total_cost Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  300",
									"                ]",
									"              },",
									"              \"payment_due_date\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Payment_due_date Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-06-29T20:17:41.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"created_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Created_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-04-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"invoice_sent_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Invoice_sent_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-05-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"status\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/status\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Status Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"overdue\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"last_modified_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Last_modified_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-04-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"id\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/id\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Id Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  134",
									"                ]",
									"              }",
									"            }",
									"          }",
									"        }",
									"      }",
									"    };",
									"",
									"    var schemaSent={",
									"      \"definitions\": {},",
									"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"      \"$id\": \"http://example.com/root.json\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Root Schema\",",
									"      \"required\": [",
									"        \"count\",",
									"        \"total_amount\",",
									"        \"invoices\"",
									"      ],",
									"      \"properties\": {",
									"        \"count\": {",
									"          \"$id\": \"#/properties/count\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Count Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            4",
									"          ]",
									"        },",
									"        \"total_amount\": {",
									"          \"$id\": \"#/properties/total_amount\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Total_amount Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            1000",
									"          ]",
									"        },",
									"        \"invoices\": {",
									"          \"$id\": \"#/properties/invoices\",",
									"          \"type\": \"array\",",
									"          \"title\": \"The Invoices Schema\",",
									"          \"items\": {",
									"            \"$id\": \"#/properties/invoices/items\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The Items Schema\",",
									"            \"required\": [",
									"              \"bill_to\",",
									"              \"invoice_nbr\",",
									"              \"total_cost\",",
									"              \"payment_due_date\",",
									"              \"created_at\",",
									"              \"invoice_sent_at\",",
									"              \"status\",",
									"              \"last_modified_at\",",
									"              \"id\"",
									"            ],",
									"            \"properties\": {",
									"              \"bill_to\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Bill_to Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"NBB\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"invoice_nbr\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Invoice_nbr Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"INV_NBR_31\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"total_cost\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Total_cost Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  300",
									"                ]",
									"              },",
									"              \"payment_due_date\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Payment_due_date Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-06-29T20:17:41.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"created_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/created_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Created_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-04-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"invoice_sent_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Invoice_sent_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-05-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"status\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/status\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Status Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"overdue\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"last_modified_at\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
									"                \"type\": \"string\",",
									"                \"title\": \"The Last_modified_at Schema\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                  \"2019-04-01T20:43:27.000Z\"",
									"                ],",
									"                \"pattern\": \"^(.*)$\"",
									"              },",
									"              \"id\": {",
									"                \"$id\": \"#/properties/invoices/items/properties/id\",",
									"                \"type\": \"integer\",",
									"                \"title\": \"The Id Schema\",",
									"                \"default\": 0,",
									"                \"examples\": [",
									"                  134",
									"                ]",
									"              }",
									"            }",
									"          }",
									"        }",
									"      }",
									"    };",
									"",
									"    if(ParamStatus==\"draft\")",
									"    {",
									"        schema=schemaDraft",
									"       // should be when Issue is fixed      schema=schemaDraft",
									"    }",
									"    ",
									"     if(ParamStatus==\"paid\")",
									"    {",
									"        schema=schemaPaid",
									"    }",
									"    ",
									"     if(ParamStatus==\"receivable\")",
									"    {",
									"        schema=schemaReceivable",
									"    }",
									"    ",
									"     if(ParamStatus==\"sent\")",
									"    {",
									"        schema=schemaSent",
									"    }",
									"    ",
									"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"    function() {",
									"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    }",
									"    );",
									"",
									"    // 2. Validation of data type of keys in reponse",
									"",
									"    if (!tv4.validate(pm.response.json(), schema))",
									"    {",
									"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"            if (errors.length==1){",
									"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                    function() {",
									"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                    }",
									"                        );",
									"            }",
									"           ",
									"           if(errors.length>1){",
									"            for(i=0;i<errors.length;i++)   {",
									"                       console.log(errors[i].message)",
									"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                    })  ",
									"            } ",
									"           }",
									"        ",
									"    }",
									"",
									"",
									"    // 3. Verify Status code is 200",
									"",
									"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () ",
									"    {",
									"        pm.response.to.have.status(parseInt(environment.statusCode));",
									"    });",
									"",
									"    // 4. Verify response time is less than 1700ms",
									"",
									"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () ",
									"    {",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"    });",
									"",
									"",
									"    //5. Verify response body contain string - mandatory keys in reponse",
									"",
									"    pm.test(\"JSON response Body contains count: Verified\", function () ",
									"    {",
									"        pm.expect(pm.response.text()).to.include(\"count\");",
									"    });",
									"    ",
									"    pm.test(\"JSON response Body contains total_amount: Verified\", function () ",
									"    {",
									"        pm.expect(pm.response.text()).to.include(\"total_amount\");",
									"    });",
									"    ",
									"    pm.test(\"JSON response Body contains invoices: Verified\", function ()",
									"    {",
									"        pm.expect(pm.response.text()).to.include(\"invoices\");",
									"    });",
									"    ",
									"     var size= pm.response.json().invoices.length",
									"        console.log(\"size : \" + size);",
									"    ",
									"    if(size!==0 && size==pm.response.json().count)",
									"    {",
									"        pm.test(\"JSON response Body contains bill_to: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"bill_to\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains invoice_nbr: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
									"        });",
									"        ",
									"        if(ParamStatus==\"receivable\")",
									"        {",
									"            pm.test(\"JSON response Body contains balance_amount: Verified\", function ()",
									"            {",
									"                pm.expect(pm.response.text()).to.include(\"balance_amount\");",
									"            });",
									"        }",
									"        ",
									"        pm.test(\"JSON response Body contains total_cost: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"total_cost\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains status: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"status\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains payment_due_date: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"payment_due_date\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains created_at: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"created_at\");",
									"        });",
									"    }",
									"    else{",
									"        tests[\"Either size of invoice array is zero or size and count dont match. Size is: \" + size + \" count is \" + pm.response.json().count]=",
									"        pm.response.json().count==size;",
									"        ",
									"    }",
									"",
									"    // 6. JSON value check in reponse body",
									"",
									"        tests[\"Validate count is not null. Value of count is: \" +pm.response.json().count]=",
									"            pm.response.json().count !== null &&",
									"            pm.response.json().count !== ' '  &&",
									"            pm.response.json().count >= 0 ;",
									"            ",
									"        tests[\"Validate total_amount is not null. Value of total_amount is: \" +pm.response.json().total_amount]=",
									"            pm.response.json().total_amount !==null &&",
									"            pm.response.json().total_amount !==' '  &&",
									"            pm.response.json().total_amount >=0",
									"     ",
									"        if(size>0){",
									"            for (i=0;i<size;i++)",
									"                {",
									"                    var jsonData = pm.response.json().invoices[i]",
									"                    if (ParamStatus !==\"draft\")",
									"                    {",
									"                    ",
									"                        tests[\"Validate bill_to is not null. For i equals to : \" + i +\" Value of bill_to is: \" +jsonData.bill_to ] = ",
									"                            jsonData.bill_to !== null && ",
									"                            jsonData.bill_to !== ' ' && ",
									"                            jsonData.bill_to !== 0;",
									"                            ",
									"                        pm.test(\"Validate invoice_nbr is not null. For i equals to : \" + i +\"  Value of invoice_nbr is \" + jsonData.invoice_nbr, function()",
									"                        {",
									"                            pm.expect(jsonData.invoice_nbr).to.match(/[INV_NBR_]\\d{1}/);",
									"                        });",
									"                        ",
									"                        tests[\"Validate balance_amount is not null. For i equals to : \" + i +\"  Value of balance_amount is: \" +jsonData.balance_amount ] = ",
									"                            jsonData.balance_amount !== null && ",
									"                            jsonData.balance_amount !== ' '",
									"                            jsonData.balance_amount >=0 ;",
									"                            ",
									"                        tests[\"Validate total_cost is not null.  For i equals to : \" + i +\" Value of total_cost is: \" +jsonData.total_cost ] = ",
									"                            jsonData.total_cost !== null && ",
									"                            jsonData.total_cost !== ' ' && ",
									"                            jsonData.total_cost > 0 ;",
									"                            ",
									"                        tests[\"Validate status is not null.  For i equals to : \" + i +\" Value of status is: \" +jsonData.status ] = ",
									"                            jsonData.status == \"due\" || ",
									"                            jsonData.status == \"overdue\"||",
									"                            jsonData.status == \"paid\" ;    ",
									"                            ",
									"                        pm.test(\"Validate payment_due_date is not null. For i equals to : \" + i +\"  Value of payment_due_date is \" + jsonData.payment_due_date, function()",
									"                        {",
									"                            pm.expect(jsonData.payment_due_date).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                        });",
									"                        ",
									"                        pm.test(\"Validate created_at is not null. For i equals to : \" + i +\"  Value of created_at is \" + jsonData.created_at, function()",
									"                        {",
									"                            pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                        });",
									"                        ",
									"                        pm.test(\"Validate invoice_sent_at is not null.  For i equals to : \" + i +\" Value of invoice_sent_at is \" + jsonData.invoice_sent_at, function()",
									"                        {",
									"                            pm.expect(jsonData.invoice_sent_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
									"                        });",
									"                    }",
									"                    else",
									"                    {",
									"                        tests[\"Validate bill_to is not null. For i equals to : \" + i +\"  Value of bill_to is: \" +jsonData.bill_to ] = ",
									"                            jsonData.bill_to !== null ;",
									"                            ",
									"                        tests[\"Validate invoice_nbr is not null. For i equals to : \" + i +\"  Value of invoice_nbr is \" + jsonData.invoice_nbr] = ",
									"                            jsonData.invoice_nbr !== null && ",
									"                            jsonData.invoice_nbr !== 0;",
									"                        ",
									"                        tests[\"Validate balance_amount is not null.  For i equals to : \" + i +\" Value of balance_amount is: \" +jsonData.balance_amount ] = ",
									"                            jsonData.balance_amount !== null && ",
									"                            jsonData.balance_amount !== ' ';",
									"                            ",
									"                        tests[\"Validate total_cost is not null.  For i equals to : \" + i +\" Value of total_cost is: \" +jsonData.total_cost ] = ",
									"                            jsonData.total_cost !== null ;",
									"                            ",
									"                        tests[\"Validate status is not null.  For i equals to : \" + i +\" Value of status is: \" +jsonData.status + \" i is : \" + i ] = ",
									"                            jsonData.status == \"draft\";    ",
									"                            ",
									"                        tests[\"Validate payment_due_date is NULL.  For i equals to : \" + i +\" Value of payment_due_date is: \" +jsonData.payment_due_date ] = ",
									"                            jsonData.payment_due_date == null;",
									"                            ",
									"                         tests[\"Validate created_at is not null.  For i equals to : \" + i +\" Value of created_at is: \" +jsonData.created_at ] = ",
									"                            jsonData.created_at !== null;",
									"                            ",
									"                         tests[\"Validate invoice_sent_at is not null.  For i equals to : \" + i +\" Value of invoice_sent_at is: \" +jsonData.invoice_sent_at ] = ",
									"                            jsonData.invoice_sent_at !== null ;",
									"                    }",
									"            }",
									"        }",
									"",
									"    // 7. To print Application content type as JSON",
									"",
									"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
									"    function(){",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"    })",
									"",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c526b989-c4f9-4e0e-b746-58f55915fdac",
								"exec": [
									"// Total Iterations 18",
									"// 6 Negative",
									"// 12 positive",
									"var compId=pm.environment.get(\"compId\");",
									"var statuses=pm.environment.get(\"statuses\");",
									"var yr=pm.environment.get(\"yr\");",
									"var mnth=pm.environment.get(\"mnth\");",
									"var sortBy=pm.environment.get(\"sortBy\");",
									"var srch=pm.environment.get(\"srch\");",
									"",
									"if(!compId || !statuses || compId==null || statuses==null ){",
									"    compId=[null, \"a\" , \"\" , 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1 ,1, 1, 1, 1, 1]",
									"    statuses=[\"draft\", \"paid\",\"receivable\",null, \"a\" , \"\", \"draft\", \"paid\",\"receivable\",\"sent\",\"draft\", \"paid\",\"receivable\",\"sent\",\"draft\", \"paid\",\"receivable\",\"sent\"];",
									"    yr=[\"2020\",\"2020\",\"2020\", null, \"a\" , \"\", \"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\",\"2020\"];",
									"    mnth=[\"\",\"\",\"\", null, \"a\" , \"\", \"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"];",
									"    sortBy=[ \"\", \"\", \"\", null, \"a\" , \"\", \"last_modified_at.asc\",\"due_date.desc\",\"invoice_date.asc\",\"invoice_date.desc\",\"last_modified_at.desc\",\"paid_at.desc\",\"due_date.asc\",\"paid_at.desc\",\"last_modified_at.asc\",\"invoice_sent_at.desc\",\"due_date.asc\",\"invoice_sent_at.asc\"];",
									"    srch=[\"\",\"\",\"\", null, \"a\" , \"\", \"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\",\"NBB\"];",
									"}",
									"",
									"currentcomId=compId.shift()",
									"currentStatus=statuses.shift();",
									"currentYear=yr.shift();",
									"currentMonth= mnth.shift();",
									"currentSorting=sortBy.shift();",
									"currentsearch= srch.shift();",
									"",
									"pm.environment.set(\"CompanyId\",currentcomId)",
									"pm.environment.set(\"compId\",compId)",
									"",
									"pm.environment.set(\"ParamStatus\", currentStatus)",
									"pm.environment.set(\"statuses\", statuses)",
									"",
									"pm.environment.set(\"yr\", yr)",
									"pm.environment.set(\"year\", currentYear)",
									"",
									"pm.environment.set(\"mnth\", mnth)",
									"pm.environment.set(\"month\", currentMonth)",
									"",
									"pm.environment.set(\"sortBy\", sortBy)",
									"pm.environment.set(\"Sort_by\", currentSorting)",
									"",
									"pm.environment.set(\"srch\", srch)",
									"pm.environment.set(\"search\", currentsearch)",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoices?status={{ParamStatus}}&year={{year}}&month={{month}}&sort_by={{Sort_by}}&search={{search}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"company",
								"{{CompanyId}}",
								"invoices"
							],
							"query": [
								{
									"key": "status",
									"value": "{{ParamStatus}}"
								},
								{
									"key": "year",
									"value": "{{year}}"
								},
								{
									"key": "month",
									"value": "{{month}}"
								},
								{
									"key": "sort_by",
									"value": "{{Sort_by}}"
								},
								{
									"key": "search",
									"value": "{{search}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getInvoiceItemSuggestion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44b8b6a6-6f49-4439-8f61-223f0a1a34c3",
								"exec": [
									"var compId= pm.environment.get(\"compId\")",
									"var custId= pm.environment.get(\"custId\")",
									"var itmName= pm.environment.get(\"itmName\")",
									"",
									"if(!compId || !custId || !itmName || compId==null || custId==null || itmName==null)",
									"{",
									"    compId=[\"\", null, \"aa\" , \"1\" ,\"1\" , \"1\",\"1\"]",
									"    custId=[\"\", null, \"aa\" , \"1\" , \"1\" ,\"1\" ,\"1\"]",
									"    itmName=[\"SWX Renewal\",\"SWX Renewal\",\"SWX Renewal\",\"\", null,\"Non Existing\", \"SWX Renewal\"]",
									"}",
									"",
									"currentCompId=compId.shift()",
									"currentCustId=custId.shift()",
									"currentItemName=itmName.shift()",
									"",
									"pm.environment.set(\"CompanyId\",currentCompId)",
									"pm.environment.set(\"compId\",compId)",
									"",
									"pm.environment.set(\"CustomerId\",currentCustId)",
									"pm.environment.set(\"custId\",custId)",
									"",
									"pm.environment.set(\"ItemName\",currentItemName)",
									"pm.environment.set(\"itmName\",itmName)",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddbc0105-3457-42b1-bcc3-e4d04b1a292e",
								"exec": [
									"var compId = pm.environment.get(\"compId\");",
									"var CompanyId= pm.environment.get(\"CompanyId\");",
									"var custId= pm.environment.get(\"custId\");",
									"var CustomerId=pm.environment.get(\"CustomerId\");",
									"var itmName= pm.environment.get(\"itmName\");",
									"var ItemName= pm.environment.get(\"ItemName\");",
									"",
									" if(compId.length>0 && ItemName!==\"Non Existing\")",
									" {",
									"     tests[\"Validating the response for negative scenario for Company Id : \" + CompanyId + \"Customer Id \"+ CustomerId +\" item name :\" + ItemName]=",
									"     (pm.response.json().statusCode >=400 && pm.response.json().statusCode<500) &&",
									"     ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
									"     (pm.response.json().message ==\"Resource does not exists\" ||",
									"     pm.response.json().message ==\"params.customer_id should be number\" ||",
									"     pm.response.json().message ==\"params.company_id should be number\" ||",
									"     pm.response.json().message ==\"querystring.item should NOT be shorter than 1 characters\" ||",
									"     pm.response.json().message ==\"params.company_id should be number, params.customer_id should be number\") ;",
									"    ",
									"    postman.setNextRequest(\"getInvoiceItemSuggestion\");",
									"     ",
									" }",
									" else",
									" ",
									"{",
									"    if(ItemName==\"Non Existing\")",
									"    {",
									"        ",
									"        tests[\"Validating the response for Non existing item Name. Company Id : \" + CompanyId + \"Customer Id \"+ CustomerId +\" item name :\" + ItemName]=",
									"        pm.response.to.have.status(200) &&",
									"        pm.response.json().item_suggestions.length==0;",
									"        ",
									"    }",
									"    else{",
									"    ",
									"        pm.environment.set(\"compId\", null);",
									"        pm.environment.set(\"custId\",null);",
									"        pm.environment.set(\"itmName\",null);",
									"       ",
									"           // 1. JSON schema validation",
									"        ",
									"        var schema= {",
									"        \"definitions\": {},",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"$id\": \"http://example.com/root.json\",",
									"        \"type\": \"object\",",
									"        \"title\": \"The Root Schema\",",
									"        \"required\": [",
									"            \"item_suggestions\"",
									"        ],",
									"        \"properties\": {",
									"            \"item_suggestions\": {",
									"            \"$id\": \"#/properties/item_suggestions\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The Item_suggestions Schema\",",
									"            \"items\": {",
									"                    \"$id\": \"#/properties/item_suggestions/items\",",
									"                    \"type\": \"object\",",
									"                    \"title\": \"The Items Schema\",",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"item\"",
									"                    ],",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"$id\": \"#/properties/item_suggestions/items/properties/id\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The Id Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"2\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      },",
									"                      \"item\": {",
									"                        \"$id\": \"#/properties/item_suggestions/items/properties/item\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The Item Schema\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                          \"SWX Renewal\"",
									"                        ],",
									"                        \"pattern\": \"^(.*)$\"",
									"                      }",
									"                    }",
									"                  }",
									"                }",
									"              }",
									"            };",
									"            ",
									"            ",
									"        pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
									"        function() {",
									"            pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"        }",
									"        );",
									"        ",
									"        // 2. Validation of data type of keys in reponse",
									"    ",
									"        if (!tv4.validate(pm.response.json(), schema))",
									"        {",
									"            var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
									"                if (errors.length==1){",
									"                    pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
									"                        function() {",
									"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"                        }",
									"                            );",
									"                }",
									"               ",
									"               if(errors.length>1){",
									"                for(i=0;i<errors.length;i++)   {",
									"                           console.log(errors[i].message)",
									"                           pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
									"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
									"                        })  ",
									"                } ",
									"               }",
									"            ",
									"        }",
									"    ",
									"    ",
									"        // 3. Verify Status code is 200",
									"        pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () ",
									"        {",
									"            pm.response.to.have.status(parseInt(environment.statusCode));",
									"        });",
									"    ",
									"        // 4. Verify response time is less than 1700ms",
									"        pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () ",
									"        {",
									"            pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
									"        });",
									"    ",
									"    ",
									"        //5. Verify response body contain string - mandatory keys in reponse",
									"        pm.test(\"JSON response Body contains item suggestions: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"item_suggestions\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains id: Verified\", function () ",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"id\");",
									"        });",
									"        ",
									"        pm.test(\"JSON response Body contains item: Verified\", function ()",
									"        {",
									"            pm.expect(pm.response.text()).to.include(\"item\");",
									"        });",
									"        ",
									"        ",
									"    // 6. JSON value check in reponse body",
									"    ",
									"        var jsonData=pm.response.json().item_suggestions[0]",
									"       ",
									"        tests[\"Validate id is not null. Value of id is: \" +jsonData.id]=",
									"            jsonData.id !== null &&",
									"            jsonData.id !== ' '  &&",
									"            jsonData.id >= 0 ;",
									"            ",
									"        tests[\"Validate item is not null. Value of item is: \" +jsonData.item]=",
									"            jsonData.item !==null &&",
									"            jsonData.item !==' '  &&",
									"            jsonData.item.length >=3 ;",
									"       ",
									"        // 7. To print Application content type as JSON",
									"        pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
									"        function(){",
									"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"        })",
									"    }",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoices/customers/{{CustomerId}}/items?item={{ItemName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"company",
								"{{CompanyId}}",
								"invoices",
								"customers",
								"{{CustomerId}}",
								"items"
							],
							"query": [
								{
									"key": "company_id",
									"value": "1",
									"disabled": true
								},
								{
									"key": "customer_id",
									"value": "1",
									"disabled": true
								},
								{
									"key": "item",
									"value": "{{ItemName}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "04c8803a-793d-44ed-bd60-5fff67d876ed",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d92cd045-9e70-4162-ad15-fa26f03163bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}