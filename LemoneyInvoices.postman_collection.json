{
	"info": {
		"_postman_id": "82d78bb1-1246-466d-acf6-5360e7c43cee",
		"name": "LemoneyInvoices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getInvoiceDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da354fa7-8c20-4195-867e-ec9a13a01ff0",
						"exec": [
							"// Get the value of CompanyId and array compId from pre-request script.",
							"",
							"var CompanyId=pm.environment.get(\"CompanyId\");",
							"var compId=pm.environment.get(\"compId\")",
							"",
							"",
							"// Get the value of Invoice_Number and array InvNum from pre-request script.",
							"",
							"      var Invoice_Number = pm.environment.get(\"Invoice_Number\")",
							"      var InvNum= pm.environment.get(\"InvNum\")",
							"",
							"// Validate Negative scenarios for all posible combination of CompanyId and Invoice_Number",
							"",
							"    if(InvNum.length>0 )",
							"    {",
							"        tests[\"Validating the response for negative scenario for Invoice number : \" + Invoice_Number + \"Company Id \"+ CompanyId]=",
							"             (pm.response.json().statusCode ==404 ||pm.response.json().statusCode==400) &&",
							"             ((pm.response.json().error ==\"Not Found\") || (pm.response.json().error==\"Bad Request\")) &&",
							"             (pm.response.json().message ==\"Resource does not exists\" || pm.response.json().message ==\"params.company_id should be number\") ",
							"                 ",
							"         postman.setNextRequest(\"InvNum\");",
							"",
							"    }",
							"    else",
							"        {",
							"        ",
							"           // set InvNum array and compId array as \"\"",
							"           ",
							"            pm.environment.set(\"InvNum\",\"\");",
							"            pm.environment.set(\"compId\",\"\");",
							"            postman.setNextRequest(null);",
							"            ",
							"",
							"        // 1. JSON schema validation",
							"        ",
							"        var schema = {",
							"          \"definitions\": {},",
							"          \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"          \"$id\": \"http://example.com/root.json\",",
							"          \"type\": \"object\",",
							"          \"title\": \"The Root Schema\",",
							"          \"required\": [",
							"            \"invoice\"",
							"          ],",
							"          \"properties\": {",
							"            \"invoice\": {",
							"              \"$id\": \"#/properties/invoice\",",
							"              \"type\": \"object\",",
							"              \"title\": \"The Invoice Schema\",",
							"              \"required\": [",
							"                \"id\",",
							"                \"status\",",
							"                \"bill_to\",",
							"                \"invoice_nbr\",",
							"                \"total_cost\",",
							"                \"payment_due_date\",",
							"                \"created_at\",",
							"                \"invoice_sent_at\",",
							"                \"signatory_name\",",
							"                \"creator_name\",",
							"                \"sent_by\",",
							"                \"items\",",
							"                \"reminders\",",
							"                \"history\",",
							"                \"attachments\"",
							"              ],",
							"              \"properties\": {",
							"                \"id\": {",
							"                  \"$id\": \"#/properties/invoice/properties/id\",",
							"                  \"type\": \"integer\",",
							"                  \"title\": \"The Id Schema\",",
							"                  \"default\": 0,",
							"                  \"examples\": [",
							"                    125",
							"                  ]",
							"                },",
							"                \"status\": {",
							"                  \"$id\": \"#/properties/invoice/properties/status\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Status Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"due\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"bill_to\": {",
							"                  \"$id\": \"#/properties/invoice/properties/bill_to\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Bill_to Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"NBB\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"invoice_nbr\": {",
							"                  \"$id\": \"#/properties/invoice/properties/invoice_nbr\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Invoice_nbr Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"INV_NBR_10\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"total_cost\": {",
							"                  \"$id\": \"#/properties/invoice/properties/total_cost\",",
							"                  \"type\": \"integer\",",
							"                  \"title\": \"The Total_cost Schema\",",
							"                  \"default\": 0,",
							"                  \"examples\": [",
							"                    400",
							"                  ]",
							"                },",
							"                \"payment_due_date\": {",
							"                  \"$id\": \"#/properties/invoice/properties/payment_due_date\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Payment_due_date Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"2019-08-29T20:17:41.000Z\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"created_at\": {",
							"                  \"$id\": \"#/properties/invoice/properties/created_at\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Created_at Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"2018-06-09T20:51:22.000Z\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"invoice_sent_at\": {",
							"                  \"$id\": \"#/properties/invoice/properties/invoice_sent_at\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Invoice_sent_at Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"2018-06-10T20:51:22.000Z\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"signatory_name\": {",
							"                  \"$id\": \"#/properties/invoice/properties/signatory_name\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Signatory_name Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"ZEE\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"creator_name\": {",
							"                  \"$id\": \"#/properties/invoice/properties/creator_name\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Creator_name Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"Zeeshan Keval\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"sent_by\": {",
							"                  \"$id\": \"#/properties/invoice/properties/sent_by\",",
							"                  \"type\": \"string\",",
							"                  \"title\": \"The Sent_by Schema\",",
							"                  \"default\": \"\",",
							"                  \"examples\": [",
							"                    \"Amitraj\"",
							"                  ],",
							"                  \"pattern\": \"^(.*)$\"",
							"                },",
							"                \"items\": {",
							"                  \"$id\": \"#/properties/invoice/properties/items\",",
							"                  \"type\": \"array\",",
							"                  \"title\": \"The Items Schema\",",
							"                  \"items\": {",
							"                    \"$id\": \"#/properties/invoice/properties/items/items\",",
							"                    \"type\": \"object\",",
							"                    \"title\": \"The Items Schema\",",
							"                    \"required\": [",
							"                      \"id\",",
							"                      \"invoice_id\",",
							"                      \"item\",",
							"                      \"price\"",
							"                    ],",
							"                    \"properties\": {",
							"                      \"id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          2",
							"                        ]",
							"                      },",
							"                      \"invoice_id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/invoice_id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Invoice_id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          125",
							"                        ]",
							"                      },",
							"                      \"item\": {",
							"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/item\",",
							"                        \"type\": \"string\",",
							"                        \"title\": \"The Item Schema\",",
							"                        \"default\": \"\",",
							"                        \"examples\": [",
							"                          \"SWX Renewal\"",
							"                        ],",
							"                        \"pattern\": \"^(.*)$\"",
							"                      },",
							"                      \"price\": {",
							"                        \"$id\": \"#/properties/invoice/properties/items/items/properties/price\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Price Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          10000",
							"                        ]",
							"                      }",
							"                    }",
							"                  }",
							"                },",
							"                \"reminders\": {",
							"                  \"$id\": \"#/properties/invoice/properties/reminders\",",
							"                  \"type\": \"array\",",
							"                  \"title\": \"The Reminders Schema\",",
							"                  \"items\": {",
							"                    \"$id\": \"#/properties/invoice/properties/reminders/items\",",
							"                    \"type\": \"object\",",
							"                    \"title\": \"The Items Schema\",",
							"                    \"required\": [",
							"                      \"id\",",
							"                      \"invoice_id\",",
							"                      \"reminded_at\"",
							"                    ],",
							"                    \"properties\": {",
							"                      \"id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/reminders/items/properties/id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          1",
							"                        ]",
							"                      },",
							"                      \"invoice_id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/reminders/items/properties/invoice_id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Invoice_id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          125",
							"                        ]",
							"                      },",
							"                      \"reminded_at\": {",
							"                        \"$id\": \"#/properties/invoice/properties/reminders/items/properties/reminded_at\",",
							"                        \"type\": \"string\",",
							"                        \"title\": \"The Reminded_at Schema\",",
							"                        \"default\": \"\",",
							"                        \"examples\": [",
							"                          \"2018-04-20T20:51:22.000Z\"",
							"                        ],",
							"                        \"pattern\": \"^(.*)$\"",
							"                      }",
							"                    }",
							"                  }",
							"                },",
							"                \"history\": {",
							"                  \"$id\": \"#/properties/invoice/properties/history\",",
							"                  \"type\": \"array\",",
							"                  \"title\": \"The History Schema\",",
							"                  \"items\": {",
							"                    \"$id\": \"#/properties/invoice/properties/history/items\",",
							"                    \"type\": \"object\",",
							"                    \"title\": \"The Items Schema\",",
							"                    \"required\": [",
							"                      \"id\",",
							"                      \"invoice_id\",",
							"                      \"company_user_id\",",
							"                      \"created_at\",",
							"                      \"notes\"",
							"                    ],",
							"                    \"properties\": {",
							"                      \"id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          1",
							"                        ]",
							"                      },",
							"                      \"invoice_id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/invoice_id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Invoice_id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          125",
							"                        ]",
							"                      },",
							"                      \"company_user_id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/company_user_id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Company_user_id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          1",
							"                        ]",
							"                      },",
							"                      \"created_at\": {",
							"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/created_at\",",
							"                        \"type\": \"string\",",
							"                        \"title\": \"The Created_at Schema\",",
							"                        \"default\": \"\",",
							"                        \"examples\": [",
							"                          \"2019-05-27T07:34:18.216Z\"",
							"                        ],",
							"                        \"pattern\": \"^(.*)$\"",
							"                      },",
							"                      \"notes\": {",
							"                        \"$id\": \"#/properties/invoice/properties/history/items/properties/notes\",",
							"                        \"type\": \"string\",",
							"                        \"title\": \"The Notes Schema\",",
							"                        \"default\": \"\",",
							"                        \"examples\": [",
							"                          \"brochure uploaded\"",
							"                        ],",
							"                        \"pattern\": \"^(.*)$\"",
							"                      }",
							"                    }",
							"                  }",
							"                },",
							"                \"attachments\": {",
							"                  \"$id\": \"#/properties/invoice/properties/attachments\",",
							"                  \"type\": \"array\",",
							"                  \"title\": \"The Attachments Schema\",",
							"                  \"items\": {",
							"                    \"$id\": \"#/properties/invoice/properties/attachments/items\",",
							"                    \"type\": \"object\",",
							"                    \"title\": \"The Items Schema\",",
							"                    \"required\": [",
							"                      \"id\",",
							"                      \"invoice_id\",",
							"                      \"file_name\",",
							"                      \"file_url\"",
							"                    ],",
							"                    \"properties\": {",
							"                      \"id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          1",
							"                        ]",
							"                      },",
							"                      \"invoice_id\": {",
							"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/invoice_id\",",
							"                        \"type\": \"integer\",",
							"                        \"title\": \"The Invoice_id Schema\",",
							"                        \"default\": 0,",
							"                        \"examples\": [",
							"                          125",
							"                        ]",
							"                      },",
							"                      \"file_name\": {",
							"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/file_name\",",
							"                        \"type\": \"string\",",
							"                        \"title\": \"The File_name Schema\",",
							"                        \"default\": \"\",",
							"                        \"examples\": [",
							"                          \"brochure\"",
							"                        ],",
							"                        \"pattern\": \"^(.*)$\"",
							"                      },",
							"                      \"file_url\": {",
							"                        \"$id\": \"#/properties/invoice/properties/attachments/items/properties/file_url\",",
							"                        \"type\": \"string\",",
							"                        \"title\": \"The File_url Schema\",",
							"                        \"default\": \"\",",
							"                        \"examples\": [",
							"                          \"http://brochure.pdf\"",
							"                        ],",
							"                        \"pattern\": \"^(.*)$\"",
							"                      }",
							"                    }",
							"                  }",
							"                }",
							"              }",
							"            }",
							"          }",
							"        };",
							"        ",
							"        pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"        function() {",
							"          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"        }",
							"        );",
							"        ",
							"        // 2. Validation of data type of keys in reponse",
							"        ",
							"        if (!tv4.validate(pm.response.json(), schema))",
							"        {",
							"            var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"                if (errors.length==1){",
							"                    pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                        function() {",
							"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                        }",
							"                            );",
							"                }",
							"               ",
							"               if(errors.length>1){",
							"                for(i=0;i<errors.length;i++)   {",
							"                           console.log(errors[i].message)",
							"                           pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                          pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                        })  ",
							"                } ",
							"               }",
							"        }",
							"        ",
							"        ",
							"        // 3. Verify Status code is 200",
							"            pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"                pm.response.to.have.status(parseInt(environment.statusCode));",
							"            });",
							"        ",
							"        // 4. Verify response time is less than 1700ms",
							"            pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"                pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"            });",
							"        ",
							"        //5. Verify response body contain string - mandatory keys in reponse",
							"            pm.test(\"JSON response Body contains id: Verified\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"id\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains status: Verified\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"status\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains bill_to: Verified\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"bill_to\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains invoice_nbr\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains total_cost\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"total_cost\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains payment_due_date\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"payment_due_date\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains created_at\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"created_at\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains invoice_sent_at\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"invoice_sent_at\");",
							"            });",
							"            ",
							"            pm.test(\"JSON response Body contains items\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"items\");",
							"            });",
							"            ",
							"            ",
							"            try{",
							"                    var noOfItems = pm.response.json().invoice.items.length   ",
							"            }",
							"            catch(err){",
							"                console.log(\"error in items.length. Actual error is : \" + err)",
							"            }",
							"            ",
							"            if (noOfItems>0)",
							"            ",
							"                {",
							"                    pm.test(\"JSON response Body contains invoice_id\", function () ",
							"                        {",
							"                            pm.expect(pm.response.text()).to.include(\"invoice_id\");",
							"                        });",
							"                    ",
							"                    pm.test(\"JSON response Body contains item\", function () ",
							"                        {",
							"                            pm.expect(pm.response.text()).to.include(\"item\");",
							"                        });",
							"                    ",
							"                    pm.test(\"JSON response Body contains price\", function ()",
							"                        {",
							"                            pm.expect(pm.response.text()).to.include(\"price\");",
							"                        });",
							"                }",
							"        ",
							"           pm.test(\"JSON response Body contains reminders\", function () {",
							"                pm.expect(pm.response.text()).to.include(\"reminders\");",
							"            });",
							"            ",
							"         try{",
							"                var noOfReminders = pm.response.json().invoice.reminders.length",
							"            }",
							"            catch(err){",
							"                console.log(\"Error in try block in noOfReminders \"+ err)",
							"            }",
							"            ",
							"            if(noOfReminders>0)",
							"                {",
							"                  pm.test(\"JSON response Body contains reminded_at\", function () {",
							"                    pm.expect(pm.response.text()).to.include(\"reminded_at\");",
							"                });",
							"            }",
							"        ",
							"            pm.test(\"JSON response Body contains history\", function () ",
							"                {",
							"                    pm.expect(pm.response.text()).to.include(\"history\");",
							"                });",
							"        ",
							"            try{",
							"                var history = pm.response.json().invoice.history.length",
							"            }",
							"            catch(err){",
							"                console.log(\"Error in try block in History : \" + err)",
							"            }",
							"        ",
							"            if(history>0)",
							"                {",
							"                    pm.test(\"JSON response Body contains company_user_id\", function () ",
							"                        {",
							"                            pm.expect(pm.response.text()).to.include(\"company_user_id\");",
							"                        });",
							"                        ",
							"                    pm.test(\"JSON response Body contains notes\", function () ",
							"                        {",
							"                            pm.expect(pm.response.text()).to.include(\"notes\");",
							"                        });",
							"                 }",
							"        ",
							"            pm.test(\"JSON response Body contains attachments\", function () ",
							"                {",
							"                    pm.expect(pm.response.text()).to.include(\"attachments\");",
							"                });",
							"        ",
							"            try{",
							"                var attachments = pm.response.json().invoice.attachments.length",
							"            }",
							"            catch(err){",
							"                console.log(\"Error in try block in attachments: \" +err)",
							"            }",
							"        ",
							"            if(attachments>0)",
							"                {",
							"                    pm.test(\"JSON response Body contains file_name\", function () {",
							"                        pm.expect(pm.response.text()).to.include(\"file_name\");",
							"                    });",
							"                    ",
							"                    pm.test(\"JSON response Body contains file_url\", function () {",
							"                        pm.expect(pm.response.text()).to.include(\"file_url\");",
							"                    });",
							"                }",
							"                ",
							"        //6. JSON value check in reponse body",
							"         ",
							"          try",
							"          {",
							"            var jsonData = pm.response.json().invoice",
							"            console.log(\"jsonData.status : \" + jsonData.status)",
							"            if (jsonData.status !=\"draft\") // Invoice should not be Draft ",
							"                {",
							"                    tests[\"Validate id is not null. Value of id is: \" +jsonData.id ] = ",
							"                        jsonData.id !== null && ",
							"                        jsonData.id !== ' ' &&",
							"                        jsonData.id >=0;",
							"                    ",
							"                    tests[\"Validate status is in Invoice Details screen. Value of status is: \" +jsonData.status]= ",
							"                        (jsonData.status ==\"overdue\" ||",
							"                        jsonData.status ==\"paid\" ||",
							"                        jsonData.status ==\"due\") ;",
							"                        ",
							"                    tests[\"Validate bill_to is not null. Value of bill_to is: \" +jsonData.bill_to ] = ",
							"                        jsonData.bill_to !== null && ",
							"                        jsonData.bill_to !== ' ';",
							"                ",
							"                    pm.test(\"invoice_nbr is equal to \" + jsonData.invoice_nbr, function () ",
							"                        {",
							"                            pm.expect(jsonData.invoice_nbr).to.match(/[INV_NBR_]\\d{1}/);",
							"                        ",
							"                        });",
							"                   ",
							"                   ",
							"                    tests[\"Validate total_cost is not null. Value of total_cost is: \" + jsonData.total_cost]=",
							"                        jsonData.total_cost !==null &&",
							"                        jsonData.total_cost !==' ' &&",
							"                        jsonData.total_cost >0;",
							"                ",
							"                    pm.test(\"Validate payment_due_date is not null. Value of payment_due_date is: \" + jsonData.payment_due_date, function()",
							"                        {",
							"                            pm.expect(jsonData.payment_due_date).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                        });",
							"                    ",
							"                    pm.test(\"Validate created_at is not null. Value of created_at is: \" + jsonData.created_at, function()",
							"                        {",
							"                            pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                        });",
							"                ",
							"                    pm.test(\"Validate invoice_sent_at is not null. Value of invoice_sent_at is: \" + jsonData.invoice_sent_at, function()",
							"                        {",
							"                            pm.expect(jsonData.invoice_sent_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                        });",
							"                 ",
							"                 tests[\"Validate signatory_name is not null. Value of signatory_name is: \" + jsonData.signatory_name]=",
							"                        jsonData.signatory_name !==null &&",
							"                        jsonData.signatory_name !==' '&&",
							"                        jsonData.signatory_name.length>=2;",
							"                        ",
							"                 tests[\"Validate creator_name is not null. Value of creator_name is: \" + jsonData.creator_name]=",
							"                        jsonData.creator_name !==null &&",
							"                        jsonData.creator_name !==' ' &&",
							"                        jsonData.creator_name.length >=3;",
							"                        ",
							"                 tests[\"Validate sent_by is not null. Value of sent_by is: \" + jsonData.sent_by]=",
							"                        jsonData.sent_by !==null &&",
							"                        jsonData.sent_by !==' ' &&",
							"                        jsonData.sent_by.length >=3;",
							"                ",
							"                var items = pm.response.json().invoice.items",
							"                    if(noOfItems>0)",
							"                        {",
							"                            for(i=0;i<noOfItems; i++)",
							"                                {  ",
							"                                    tests[\"Validate id is not null. Value of id is: \" + items[i].id]=",
							"                                    items[i].id !== null &&",
							"                                    items[i].id !==' ' &&",
							"                                    items[i].id >0;",
							"                                    ",
							"                                    tests[\"Validate invoice_id is not null. Value of invoice_id is: \" + items[i].invoice_id]=",
							"                                    items[i].invoice_id !== null &&",
							"                                    items[i].invoice_id !==' ' &&",
							"                                    items[i].invoice_id >0 && ",
							"                                    items[i].invoice_id==pm.response.json().invoice.id;",
							"                                    ",
							"                                    tests[\"Validate item is not null. Value of item is: \" + items[i].item]=",
							"                                    items[i].item !== null &&",
							"                                    items[i].item !==' ' &&",
							"                                    items[i].item.length >=3;",
							"                                    ",
							"                                    tests[\"Validate price is not null. Value of price is: \" + items[i].price]=",
							"                                    items[i].price !== null &&",
							"                                    items[i].price !==' ' &&",
							"                                    items[i].price >0;",
							"                            }",
							"                    }",
							"                ",
							"                try{",
							"                    var reminders = pm.response.json().invoice.reminders",
							"                }",
							"                catch(err){",
							"                    console.log(\"Error in invoice.reminders. Actual error is : \" + err)",
							"                }",
							"                    if (noOfReminders>0){",
							"                       for(i=0;i<noOfReminders; i++)",
							"                            {",
							"                                tests[\"Validate id is not null.  For i equals to : \" + i +\" Value of id is: \" + reminders[i].id]=",
							"                                    reminders[i].id !== null &&",
							"                                    reminders[i].id !==' ' &&",
							"                                    reminders[i].id >0;",
							"                                ",
							"                                tests[\"Validate invoice_id is not null. For i equals to : \" + i +\"  Value of invoice_id is: \" + reminders[i].invoice_id]=",
							"                                    reminders[i].invoice_id !== null &&",
							"                                    reminders[i].invoice_id !==' ' &&",
							"                                    reminders[i].invoice_id >0  && ",
							"                                    reminders[i].invoice_id==pm.response.json().invoice.id;",
							"                                    ",
							"                                pm.test(\"Validate reminded_at is not null. For i equals to : \" + i +\"  Value of reminded_at is: \" + reminders[i].reminded_at, function()",
							"                                    {",
							"                                        pm.expect(reminders[i].reminded_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                                    });",
							"                            }",
							"                    }",
							"            ",
							"                var history = pm.response.json().invoice.history",
							"                    if (history>0){",
							"                       for(i=0;i<history; i++)",
							"                            {",
							"                                tests[\"Validate id is not null. For i equals to : \" + i +\"  Value of id is: \" + history[i].id]=",
							"                                    history[i].id !== null &&",
							"                                    history[i].id !==' ' &&",
							"                                    history[i].id >0;",
							"                                ",
							"                                tests[\"Validate invoice_id is not null.  For i equals to : \" + i +\" Value of invoice_id is: \" + history[i].invoice_id]=",
							"                                    history[i].invoice_id !== null &&",
							"                                    history[i].invoice_id !==' ' &&",
							"                                    history[i].invoice_id >0 && ",
							"                                    history[i].invoice_id==pm.response.json().invoice.id;",
							"                                    ",
							"                                tests[\"Validate company_user_id is not null. For i equals to : \" + i +\"  Value of company_user_id is: \" + history[i].company_user_id ]=",
							"                                    history[i].company_user_id !== null &&",
							"                                    history[i].company_user_id !==' ' &&",
							"                                    history[i].company_user_id >0;",
							"                                    ",
							"                                pm.test(\"Validate created_at is not null. For i equals to : \" + i +\"  Value of created_at is: \" + reminders[i].created_at, function()",
							"                                    {",
							"                                        pm.expect(reminders[i].created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                                    });",
							"                            }",
							"                    ",
							"                    }",
							"                    ",
							"                var attachments=pm.response.json().invoice.attachments;",
							"                    if (attachments>0){",
							"                       for(i=0;i<attachments; i++)",
							"                            {",
							"                                tests[\"Validate id is not null. For i equals to : \" + i +\"  Value of id is: \" + attachments[i].id]=",
							"                                    attachments[i].id !== null &&",
							"                                    attachments[i].id !==' ' &&",
							"                                    attachments[i].id >0;",
							"                                ",
							"                                tests[\"Validate invoice_id is not null. For i equals to : \" + i +\"  Value of invoice_id is: \" + attachments[i].invoice_id]=",
							"                                    attachments[i].invoice_id !== null &&",
							"                                    attachments[i].invoice_id !==' ' &&",
							"                                    attachments[i].invoice_id >0;",
							"                                    ",
							"                                tests[\"Validate file_name is not null. For i equals to : \" + i +\"  Value of file_name is: \" + attachments[i].file_name ]=",
							"                                    attachments[i].file_name !== null &&",
							"                                    attachments[i].file_name !==' ' &&",
							"                                    attachments[i].file_name !==0;",
							"                                    ",
							"                                tests[\"Validate file_url is not null. For i equals to : \" + i +\"  Value of file_url is: \" + attachments[i].file_url ]=",
							"                                    attachments[i].file_url !== null &&",
							"                                    attachments[i].file_url !==' ' &&",
							"                                    attachments[i].file_url !==0;",
							"                            }",
							"                    }",
							"            }",
							"            else{",
							"                    tests[\"Validate id is not null. Value of id is: \" +jsonData.id ] = ",
							"                        jsonData.id !== null ;",
							"                    ",
							"                    tests[\"Validate status is Draft. Value of status is: \" +jsonData.status]= ",
							"                        jsonData.status ==\"draft\" ;",
							"                        ",
							"                    tests[\"Validate bill_to is not null. Value of bill_to is: \" +jsonData.bill_to ] = ",
							"                        jsonData.bill_to !== null && ",
							"                        jsonData.bill_to !== ' ' ;",
							"            }",
							"          }",
							"          catch(err)",
							"          {",
							"              console.log(\"Error is jsonData.status. Actual error is : \")",
							"          }",
							"            ",
							"        // 7. To print Application content type as JSON",
							"        ",
							"            pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"            function(){",
							"                pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"            })",
							"        ",
							"        // 8. Access control allowed methods ",
							"            pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"                pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"            })",
							"",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "29eca797-6840-4251-89af-426873b540ad",
						"exec": [
							"// Running the test 7 times ",
							"// 6 negative scenarios for the combination of companyId and Invoice_Number",
							"// 1 positive scenario for correct companyId and Invoice_Number",
							"",
							"var compId=pm.environment.get(\"compId\");",
							"",
							"if(!compId)",
							"{",
							"    compId=[\"1\",\"1\",\"1\",\"\" ,null, \"a\" , 1]",
							"}",
							"",
							"currentcomId=compId.shift()",
							"pm.environment.set(\"CompanyId\",currentcomId)",
							"pm.environment.set(\"compId\",compId)",
							"console.log(\"compId in pre-request script \" + compId)",
							"console.log(\"currentcomId : \" + currentcomId)",
							"",
							"// validating the response for Negative scenarios of Invoice Id \"\" , null, INV_198",
							"//  and 1 Positive scenario of Invoice Id as : INV_BLR_XX  --- Check if INV_BLR_XX exists in DB",
							"",
							"var InvNum=pm.environment.get(\"InvNum\");",
							"",
							"if(!InvNum){",
							"    InvNum=[\"\",null,  \"INV_198\", \"INV_NBR_22\",\"INV_NBR_22\",\"INV_NBR_22\",\"INV_NBR_10\"];",
							"}",
							"",
							"currentInvNum=InvNum.shift()",
							"pm.environment.set(\"Invoice_Number\",currentInvNum);",
							"pm.environment.set(\"InvNum\",InvNum)",
							"console.log(\"InvNum in pre-request script \" + InvNum)",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoice/{{Invoice_Number}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"company",
						"{{CompanyId}}",
						"invoice",
						"{{Invoice_Number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "listAllCountries",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8af6d9d7-4561-414a-ab5a-773ad7e91632",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"countries\"",
							"  ],",
							"  \"properties\": {",
							"    \"countries\": {",
							"      \"$id\": \"#/properties/countries\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Countries Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/countries/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"country_name\",",
							"          \"country_code\",",
							"          \"id\"",
							"        ],",
							"        \"properties\": {",
							"          \"country_name\": {",
							"            \"$id\": \"#/properties/countries/items/properties/country_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Country_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Afghanistan\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"country_code\": {",
							"            \"$id\": \"#/properties/countries/items/properties/country_code\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Country_code Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"AFG\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"id\": {",
							"            \"$id\": \"#/properties/countries/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              1",
							"            ]",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"",
							"// 3. Verify Status code is 200",
							"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"    pm.response.to.have.status(parseInt(environment.statusCode));",
							"});",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"});",
							"",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"pm.test(\"JSON response Body contains country: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"countries\");",
							"});",
							"",
							"",
							"pm.test(\"JSON response Body contains country name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"country_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains country code\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"country_code\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains id: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"//6. JSON value check in reponse body",
							"    try{",
							"        var size= pm.response.json().countries.length",
							"    }",
							"    catch(err){",
							"        console.log(\" Error in countries.length. Actual error is : \" + err)   ",
							"    }",
							"for (i=0;i<size;i++){",
							"    ",
							"    var jsonData = pm.response.json().countries[i]",
							"",
							"tests[\"Validate Id is not null.  For i equals to : \" + i +\" Value of Id is: \" +jsonData.id ] = ",
							"    jsonData.id !== null && ",
							"    jsonData.id !== ' ' && ",
							"    jsonData.id !== 0;",
							"    ",
							"tests[\"Validate country name is not null. For i equals to : \" + i +\"  Value of country name is \" + jsonData.country_name] = ",
							"    jsonData.country_name !== null && ",
							"    jsonData.country_name !== ' ' && ",
							"    jsonData.country_name !== 0;",
							"",
							"tests[\"Validate country_code is not null.  For i equals to : \" + i +\" Value of country_code is: \" +jsonData.country_code ] = ",
							"    jsonData.country_code !== null && ",
							"    jsonData.country_code !== ' ' && ",
							"    jsonData.country_code !== 0 &&",
							"    jsonData.country_code.length==3;",
							"",
							"}",
							"",
							"// 7. To print Application content type as JSON",
							"",
							"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"// 8. Access control allowed methods ",
							"pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BaseURL}}/api/v1/country",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"country"
					]
				}
			},
			"response": []
		},
		{
			"name": "getInvoiceAmounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "58b23cba-c2cb-4e1d-bbd2-073bfda3d2ed",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"    var schema = {",
							"      \"definitions\": {},",
							"      \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"      \"$id\": \"http://example.com/root.json\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Root Schema\",",
							"      \"required\": [",
							"        \"invoice_amounts\"",
							"      ],",
							"      \"properties\": {",
							"        \"invoice_amounts\": {",
							"          \"$id\": \"#/properties/invoice_amounts\",",
							"          \"type\": \"object\",",
							"          \"title\": \"The Invoice_amounts Schema\",",
							"          \"required\": [",
							"            \"receivable_amount\",",
							"            \"draft_count\",",
							"            \"received_amount\",",
							"            \"invoiced_amount\"",
							"          ],",
							"          \"properties\": {",
							"            \"receivable_amount\": {",
							"              \"$id\": \"#/properties/invoice_amounts/properties/receivable_amount\",",
							"              \"type\": \"number\",",
							"              \"title\": \"The Receivable_amount Schema\",",
							"              \"default\": 0.0,",
							"              \"examples\": [",
							"                200.5",
							"              ]",
							"            },",
							"            \"draft_count\": {",
							"              \"$id\": \"#/properties/invoice_amounts/properties/draft_count\",",
							"              \"type\": \"integer\",",
							"              \"title\": \"The Draft_count Schema\",",
							"              \"default\": 0,",
							"              \"examples\": [",
							"                4",
							"              ]",
							"            },",
							"            \"received_amount\": {",
							"              \"$id\": \"#/properties/invoice_amounts/properties/received_amount\",",
							"              \"type\": \"number\",",
							"              \"title\": \"The Received_amount Schema\",",
							"              \"default\": 0.0,",
							"              \"examples\": [",
							"                199.5",
							"              ]",
							"            },",
							"            \"invoiced_amount\": {",
							"              \"$id\": \"#/properties/invoice_amounts/properties/invoiced_amount\",",
							"              \"type\": \"integer\",",
							"              \"title\": \"The Invoiced_amount Schema\",",
							"              \"default\": 0,",
							"              \"examples\": [",
							"                300",
							"              ]",
							"            }",
							"          }",
							"        }",
							"      }",
							"    };",
							"    ",
							"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"    function() {",
							"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"    }",
							"    );",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"    if (!tv4.validate(pm.response.json(), schema))",
							"    {",
							"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"            if (errors.length==1){",
							"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                    function() {",
							"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                    }",
							"                        );",
							"            }",
							"           ",
							"           if(errors.length>1){",
							"            for(i=0;i<errors.length;i++)   {",
							"                       console.log(errors[i].message)",
							"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                    })  ",
							"            } ",
							"           }",
							"        ",
							"    }",
							"",
							"",
							"// 3. Verify Status code is 200",
							"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"        pm.response.to.have.status(parseInt(environment.statusCode));",
							"    });",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"    });",
							"",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"    ",
							"    pm.test(\"JSON response Body contains invoice_amounts: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"invoice_amounts\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains draft_count: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"draft_count\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains received_amount: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"received_amount\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains invoiced_amount\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"invoiced_amount\");",
							"    });",
							"    ",
							"",
							"//6. JSON value check in reponse body",
							"    try",
							"    {",
							"         var jsonData = pm.response.json().invoice_amounts",
							"         ",
							"        tests[\"Validate receivable amount is not null. Value of receivable amount is: \" +jsonData.receivable_amount ] = ",
							"            jsonData.receivable_amount !== null && ",
							"            jsonData.receivable_amount !== ' ' &&",
							"            jsonData.receivable_amount >= 0;",
							"        ",
							"        tests[\"Validate draft_count is not null. Value of draft_count is \" + jsonData.draft_count] = ",
							"            jsonData.draft_count !== null && ",
							"            jsonData.draft_count !== ' ' &&",
							"            jsonData.draft_count >=0;",
							"    ",
							"        tests[\"Validate received_amount is not null. Value of received_amount is: \" +jsonData.received_amount ] = ",
							"            jsonData.received_amount !== null && ",
							"            jsonData.received_amount !== ' '  && ",
							"            jsonData.received_amount >= 0 ;",
							"        ",
							"        tests[\"Validate invoiced_amount is not null. Value of invoiced_amount is: \" +jsonData.invoiced_amount ] = ",
							"            jsonData.invoiced_amount !== null && ",
							"            jsonData.invoiced_amount !== ' ' && ",
							"            jsonData.invoiced_amount >= 0 ;",
							"",
							"}",
							"    catch(err){",
							"        console.log(\"Error in json().invoice_amounts. Actual error is : \" + err)",
							"    }",
							"    ",
							"// 7. To print Application content type as JSON",
							"",
							"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"    function(){",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"    })",
							"",
							"// 8. Access control allowed methods ",
							"    pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"        pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"    })",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoice_amounts",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"company",
						"{{CompanyId}}",
						"invoice_amounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "getCompanyInvoicesLists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "314ec82a-1a42-4af1-98f0-08416df94876",
						"exec": [
							"    var ParamStatus= pm.environment.get(\"ParamStatus\")",
							"    var statuses=pm.environment.get(\"statuses\");",
							"    ",
							"    console.log(\"ParamStatus : \" + ParamStatus);",
							"    console.log(\"statuses : \" + statuses);",
							"    ",
							"    if(statuses && statuses.length>0){",
							"        postman.setNextRequest(\"statuses\");",
							"    ",
							"    }",
							"    else{",
							"        pm.environment.set(\"ParamStatus\", \"\");",
							"        pm.environment.set(\"statuses\", \"\");",
							"        postman.setNextRequest(null);",
							"    }",
							"",
							"// 1. JSON schema validation",
							"",
							"    var schema;",
							"    ",
							"    var schemaPaid={",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"count\",",
							"    \"total_amount\",",
							"    \"invoices\"",
							"  ],",
							"  \"properties\": {",
							"    \"count\": {",
							"      \"$id\": \"#/properties/count\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Count Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        5",
							"      ]",
							"    },",
							"    \"total_amount\": {",
							"      \"$id\": \"#/properties/total_amount\",",
							"      \"type\": \"number\",",
							"      \"title\": \"The Total_amount Schema\",",
							"      \"default\": 0.0,",
							"      \"examples\": [",
							"        888.5",
							"      ]",
							"    },",
							"    \"invoices\": {",
							"      \"$id\": \"#/properties/invoices\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Invoices Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/invoices/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"bill_to\",",
							"          \"invoice_nbr\",",
							"          \"received_amount\",",
							"          \"total_received_amount\",",
							"          \"total_cost\",",
							"          \"payment_due_date\",",
							"          \"paid_at\",",
							"          \"created_at\",",
							"          \"invoice_sent_at\",",
							"          \"status\",",
							"          \"last_modified_at\"",
							"        ],",
							"        \"properties\": {",
							"          \"bill_to\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Bill_to Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"NBB\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"invoice_nbr\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Invoice_nbr Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"INV_NBR_31\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"received_amount\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/received_amount\",",
							"            \"type\": \"number\",",
							"            \"title\": \"The Received_amount Schema\",",
							"            \"default\": 0.0,",
							"            \"examples\": [",
							"              199.5",
							"            ]",
							"          },",
							"          \"total_received_amount\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/total_received_amount\",",
							"            \"type\": \"number\",",
							"            \"title\": \"The Total_received_amount Schema\",",
							"            \"default\": 0.0,",
							"            \"examples\": [",
							"              199.5",
							"            ]",
							"          },",
							"          \"total_cost\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Total_cost Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              300",
							"            ]",
							"          },",
							"          \"payment_due_date\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Payment_due_date Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-06-29T20:17:41.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"paid_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/paid_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Paid_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-06-04T06:00:52.895Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"created_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/created_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Created_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-04-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"invoice_sent_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Invoice_sent_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-05-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"status\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/status\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Status Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"paid\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"last_modified_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Last_modified_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-04-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"    var schemaReceivable = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"count\",",
							"    \"total_amount\",",
							"    \"invoices\"",
							"  ],",
							"  \"properties\": {",
							"    \"count\": {",
							"      \"$id\": \"#/properties/count\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Count Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"total_amount\": {",
							"      \"$id\": \"#/properties/total_amount\",",
							"      \"type\": \"number\",",
							"      \"title\": \"The Total_amount Schema\",",
							"      \"default\": 0.0,",
							"      \"examples\": [",
							"        311.5",
							"      ]",
							"    },",
							"    \"invoices\": {",
							"      \"$id\": \"#/properties/invoices\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Invoices Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/invoices/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"bill_to\",",
							"          \"invoice_nbr\",",
							"          \"balance_amount\",",
							"          \"total_received_amount\",",
							"          \"total_cost\",",
							"          \"payment_due_date\",",
							"          \"created_at\",",
							"          \"invoice_sent_at\",",
							"          \"status\",",
							"          \"last_modified_at\",",
							"          \"id\"",
							"        ],",
							"        \"properties\": {",
							"          \"bill_to\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Bill_to Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"NBB\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"invoice_nbr\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Invoice_nbr Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"INV_NBR_31\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"balance_amount\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/balance_amount\",",
							"            \"type\": \"number\",",
							"            \"title\": \"The Balance_amount Schema\",",
							"            \"default\": 0.0,",
							"            \"examples\": [",
							"              100.5",
							"            ]",
							"          },",
							"          \"total_received_amount\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/total_received_amount\",",
							"            \"type\": \"number\",",
							"            \"title\": \"The Total_received_amount Schema\",",
							"            \"default\": 0.0,",
							"            \"examples\": [",
							"              199.5",
							"            ]",
							"          },",
							"          \"total_cost\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Total_cost Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              300",
							"            ]",
							"          },",
							"          \"payment_due_date\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Payment_due_date Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-06-29T20:17:41.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"created_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/created_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Created_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-04-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"invoice_sent_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Invoice_sent_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-05-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"status\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/status\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Status Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"overdue\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"last_modified_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Last_modified_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-04-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"id\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              134",
							"            ]",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"var schemaSent={",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"count\",",
							"    \"total_amount\",",
							"    \"invoices\"",
							"  ],",
							"  \"properties\": {",
							"    \"count\": {",
							"      \"$id\": \"#/properties/count\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Count Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        4",
							"      ]",
							"    },",
							"    \"total_amount\": {",
							"      \"$id\": \"#/properties/total_amount\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total_amount Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        1000",
							"      ]",
							"    },",
							"    \"invoices\": {",
							"      \"$id\": \"#/properties/invoices\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Invoices Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/invoices/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"bill_to\",",
							"          \"invoice_nbr\",",
							"          \"total_cost\",",
							"          \"payment_due_date\",",
							"          \"created_at\",",
							"          \"invoice_sent_at\",",
							"          \"status\",",
							"          \"last_modified_at\",",
							"          \"id\"",
							"        ],",
							"        \"properties\": {",
							"          \"bill_to\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/bill_to\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Bill_to Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"NBB\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"invoice_nbr\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/invoice_nbr\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Invoice_nbr Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"INV_NBR_31\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"total_cost\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/total_cost\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Total_cost Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              300",
							"            ]",
							"          },",
							"          \"payment_due_date\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/payment_due_date\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Payment_due_date Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-06-29T20:17:41.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"created_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/created_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Created_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-04-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"invoice_sent_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/invoice_sent_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Invoice_sent_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-05-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"status\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/status\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Status Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"overdue\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"last_modified_at\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/last_modified_at\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Last_modified_at Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"2019-04-01T20:43:27.000Z\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"id\": {",
							"            \"$id\": \"#/properties/invoices/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              134",
							"            ]",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"    if(ParamStatus==\"draft\")",
							"    {",
							"        schema=schemaSent",
							"    }",
							"    ",
							"     if(ParamStatus==\"paid\")",
							"    {",
							"        schema=schemaPaid",
							"    }",
							"    ",
							"     if(ParamStatus==\"receivable\")",
							"    {",
							"        schema=schemaReceivable",
							"    }",
							"    ",
							"     if(ParamStatus==\"sent\")",
							"    {",
							"        schema=schemaSent",
							"    }",
							"    ",
							"    pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"    function() {",
							"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"    }",
							"    );",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"    if (!tv4.validate(pm.response.json(), schema))",
							"    {",
							"        var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"            if (errors.length==1){",
							"                pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                    function() {",
							"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                    }",
							"                        );",
							"            }",
							"           ",
							"           if(errors.length>1){",
							"            for(i=0;i<errors.length;i++)   {",
							"                       console.log(errors[i].message)",
							"                       pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                    })  ",
							"            } ",
							"           }",
							"        ",
							"    }",
							"",
							"",
							"// 3. Verify Status code is 200",
							"",
							"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () ",
							"    {",
							"        pm.response.to.have.status(parseInt(environment.statusCode));",
							"    });",
							"",
							"// 4. Verify response time is less than 1700ms",
							"",
							"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () ",
							"    {",
							"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"    });",
							"",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"",
							"    pm.test(\"JSON response Body contains count: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"count\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains total_amount: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"total_amount\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains invoices: Verified\", function ()",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"invoices\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains bill_to: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"bill_to\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains invoice_nbr: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"invoice_nbr\");",
							"    });",
							"    ",
							"    if(ParamStatus==\"receivable\")",
							"    {",
							"    pm.test(\"JSON response Body contains balance_amount: Verified\", function ()",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"balance_amount\");",
							"    });",
							"    }",
							"    ",
							"    pm.test(\"JSON response Body contains total_cost: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"total_cost\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains status: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"status\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains payment_due_date: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"payment_due_date\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains created_at: Verified\", function () ",
							"    {",
							"        pm.expect(pm.response.text()).to.include(\"created_at\");",
							"    });",
							"    ",
							"",
							"// 6. JSON value check in reponse body",
							"console.log(\"status code \" +pm.response.json().statusCode)",
							"  try{",
							"    if(!(pm.response.json().statusCode<200)||(pm.response.json().statusCode>230))",
							"    {",
							"        console.log(\"hello\")",
							"        tests[\"Validate count is not null. Value of count is: \" +pm.response.json().count]=",
							"            pm.response.json().count !== null &&",
							"            pm.response.json().count !== ' '  &&",
							"            pm.response.json().count >= 0 ;",
							"            ",
							"        tests[\"Validate total_amount is not null. Value of total_amount is: \" +pm.response.json().total_amount]=",
							"            pm.response.json().total_amount !==null &&",
							"            pm.response.json().total_amount !==' '  &&",
							"            pm.response.json().total_amount >=0",
							"            ",
							"        var size= pm.response.json().invoices.length",
							"        console.log(\"size : \" + size);",
							"        ",
							"        if(size>0){",
							"            for (i=0;i<size;i++)",
							"                {",
							"                    var jsonData = pm.response.json().invoices[i]",
							"                    if (pm.environment.get(\"ParamStatus\") !=\"draft\")",
							"                    {",
							"                    ",
							"                        tests[\"Validate bill_to is not null. For i equals to : \" + i +\" Value of bill_to is: \" +jsonData.bill_to ] = ",
							"                            jsonData.bill_to !== null && ",
							"                            jsonData.bill_to !== ' ' && ",
							"                            jsonData.bill_to !== 0;",
							"                            ",
							"                        pm.test(\"Validate invoice_nbr is not null. For i equals to : \" + i +\"  Value of invoice_nbr is \" + jsonData.invoice_nbr, function()",
							"                        {",
							"                            pm.expect(jsonData.invoice_nbr).to.match(/[INV_NBR_]\\d{1}/);",
							"                        });",
							"                        ",
							"                        tests[\"Validate balance_amount is not null. For i equals to : \" + i +\"  Value of balance_amount is: \" +jsonData.balance_amount ] = ",
							"                            jsonData.balance_amount !== null && ",
							"                            jsonData.balance_amount !== ' '",
							"                            jsonData.balance_amount >=0 ;",
							"                            ",
							"                        tests[\"Validate total_cost is not null.  For i equals to : \" + i +\" Value of total_cost is: \" +jsonData.total_cost ] = ",
							"                            jsonData.total_cost !== null && ",
							"                            jsonData.total_cost !== ' ' && ",
							"                            jsonData.total_cost > 0 ;",
							"                            ",
							"                        tests[\"Validate status is not null.  For i equals to : \" + i +\" Value of status is: \" +jsonData.status ] = ",
							"                            jsonData.status == \"due\" || ",
							"                            jsonData.status == \"overdue\"||",
							"                            jsonData.status == \"paid\" ;    ",
							"                            ",
							"                        pm.test(\"Validate payment_due_date is not null. For i equals to : \" + i +\"  Value of payment_due_date is \" + jsonData.payment_due_date, function()",
							"                        {",
							"                            pm.expect(jsonData.payment_due_date).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                        });",
							"                        ",
							"                        pm.test(\"Validate created_at is not null. For i equals to : \" + i +\"  Value of created_at is \" + jsonData.created_at, function()",
							"                        {",
							"                            pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                        });",
							"                        ",
							"                        pm.test(\"Validate invoice_sent_at is not null.  For i equals to : \" + i +\" Value of invoice_sent_at is \" + jsonData.invoice_sent_at, function()",
							"                        {",
							"                            pm.expect(jsonData.invoice_sent_at).to.match(/\\d{4}-\\d{2}-\\d{2}[T]\\d{2}:\\d{2}:\\d{2}.\\d{3}[Z]/);",
							"                        });",
							"                    }",
							"                    else",
							"                    {",
							"                        tests[\"Validate bill_to is not null. For i equals to : \" + i +\"  Value of bill_to is: \" +jsonData.bill_to ] = ",
							"                            jsonData.bill_to !== null ;",
							"                            ",
							"                        tests[\"Validate invoice_nbr is not null. For i equals to : \" + i +\"  Value of invoice_nbr is \" + jsonData.invoice_nbr] = ",
							"                            jsonData.invoice_nbr !== null && ",
							"                            jsonData.invoice_nbr !== 0;",
							"                        ",
							"                        tests[\"Validate balance_amount is not null.  For i equals to : \" + i +\" Value of balance_amount is: \" +jsonData.balance_amount ] = ",
							"                            jsonData.balance_amount !== null && ",
							"                            jsonData.balance_amount !== ' ';",
							"                            ",
							"                        tests[\"Validate total_cost is not null.  For i equals to : \" + i +\" Value of total_cost is: \" +jsonData.total_cost ] = ",
							"                            jsonData.total_cost !== null ;",
							"                            ",
							"                        tests[\"Validate status is not null.  For i equals to : \" + i +\" Value of status is: \" +jsonData.status + \" i is : \" + i ] = ",
							"                            jsonData.status == \"draft\";    ",
							"                            ",
							"                        tests[\"Validate payment_due_date is not null.  For i equals to : \" + i +\" Value of payment_due_date is: \" +jsonData.payment_due_date ] = ",
							"                            jsonData.payment_due_date !== null;",
							"                            ",
							"                         tests[\"Validate created_at is not null.  For i equals to : \" + i +\" Value of created_at is: \" +jsonData.created_at ] = ",
							"                            jsonData.created_at !== null;",
							"                            ",
							"                         tests[\"Validate invoice_sent_at is not null.  For i equals to : \" + i +\" Value of invoice_sent_at is: \" +jsonData.invoice_sent_at ] = ",
							"                            jsonData.invoice_sent_at !== null ;",
							"                        ",
							"                    }",
							"            }",
							"        }",
							"    }",
							"  }",
							"catch(err){",
							"    pm.test(\"status code is not 2XX series\" + err, function(){",
							"       pm.expect(1).to.eql(2)",
							"    })",
							"}",
							"// 7. To print Application content type as JSON",
							"",
							"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"    function(){",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"    })",
							"",
							"// 8. Access control allowed methods ",
							"    pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"        pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"OPTIONS,GET,HEAD,POST,PUT,DELETE,TRACE,CONNECT\")",
							"    })",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c526b989-c4f9-4e0e-b746-58f55915fdac",
						"exec": [
							"var statuses=pm.environment.get(\"statuses\");",
							"",
							"if(!statuses){",
							"    statuses=[\"draft\", \"paid\",\"receivable\",\"sent\"];",
							"}",
							"",
							"var currentStatus=statuses.shift();",
							"pm.environment.set(\"ParamStatus\", currentStatus)",
							"pm.environment.set(\"statuses\", statuses)",
							"console.log(\"currentStatus in pre-request : \"+ currentStatus);",
							"console.log(\"statuses in pre-request : \"+ statuses);",
							"//pm.variables.set(\"paramStatus\",\"draft\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/invoices?status={{ParamStatus}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"company",
						"{{CompanyId}}",
						"invoices"
					],
					"query": [
						{
							"key": "status",
							"value": "{{ParamStatus}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getCustomerDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d00309ae-1e25-4bed-8cf2-0961ff177fe6",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"customer_details\"",
							"  ],",
							"  \"properties\": {",
							"    \"customer_details\": {",
							"      \"$id\": \"#/properties/customer_details\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Customer_details Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/customer_details/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"customer_name\",",
							"          \"customer_legal_name\",",
							"          \"contact_person\",",
							"          \"email_id\",",
							"          \"gstin\",",
							"          \"phone_1\",",
							"          \"pan\",",
							"          \"state\",",
							"          \"address_line_1\",",
							"          \"address_line_2\",",
							"          \"city\",",
							"          \"zip_code\",",
							"          \"country\"",
							"        ],",
							"        \"properties\": {",
							"          \"customer_name\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/customer_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Customer_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"NBB\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"customer_legal_name\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/customer_legal_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Customer_legal_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"National Bank\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"contact_person\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/contact_person\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Contact_person Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Amitava\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"email_id\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/email_id\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Email_id Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"amitava@gmail.com\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"gstin\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/gstin\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Gstin Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"37AAAPB9823A1Z9\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"phone_1\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/phone_1\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Phone_1 Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"pan\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/pan\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Pan Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"BMSPS0123Q\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"state\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/state\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The State Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"State 1\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"address_line_1\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/address_line_1\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Address_line_1 Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Address Line 1\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"address_line_2\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/address_line_2\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Address_line_2 Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Address Line 2\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"city\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/city\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The City Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"BCity\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"zip_code\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/zip_code\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Zip_code Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"4937454\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"country\": {",
							"            \"$id\": \"#/properties/customer_details/items/properties/country\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Country Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Bahrain\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"}",
							"",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"",
							"// 3. Verify Status code is 200",
							"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"        pm.response.to.have.status(parseInt(environment.statusCode));",
							"    });",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"    });",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"",
							"    pm.test(\"JSON response Body contains customer_details: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"customer_details\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains customer_name: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"customer_name\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains customer_legal_name: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"customer_legal_name\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains contact_person: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"contact_person\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains email_id: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"email_id\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains gstin: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"gstin\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains phone_1: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"phone_1\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains pan: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"pan\");",
							"    });",
							"    ",
							"    pm.test(\"JSON response Body contains state: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"state\");",
							"    });",
							"    ",
							"     pm.test(\"JSON response Body contains address_line_1: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"address_line_1\");",
							"    });",
							"    ",
							"     pm.test(\"JSON response Body contains address_line_2: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"address_line_2\");",
							"    });",
							"    ",
							"     pm.test(\"JSON response Body contains city: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"city\");",
							"    });",
							"    ",
							"     pm.test(\"JSON response Body contains zip_code: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"zip_code\");",
							"    });",
							"    ",
							"     pm.test(\"JSON response Body contains country: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"country\");",
							"    });",
							"    ",
							"    //6. JSON value check in reponse body",
							"   ",
							"    try",
							"    {",
							"        var size= pm.response.json().customer_details.length",
							"        console.log(\"Size is : \" + size)",
							"        ",
							"        for (i=0;i<size;i++){",
							"            ",
							"            var jsonData = pm.response.json().customer_details[i]",
							"            console.log(\"jsonData is \" + jsonData)",
							"            ",
							"            tests[\"Validate customer_name is not null. For i equals to : \" + i +\"  Value of customer_name is: \" +jsonData.customer_name ] = ",
							"            jsonData.customer_name !== null && ",
							"            jsonData.customer_name !== ' ' ;",
							"            ",
							"            tests[\"Validate customer_legal_name is not null. For i equals to : \" + i +\"  Value of customer_legal_name is \" + jsonData.customer_legal_name] = ",
							"            jsonData.customer_legal_name !== null && ",
							"            jsonData.customer_legal_name !== ' ' ;",
							"            ",
							"            tests[\"Validate contact_person is not null. For i equals to : \" + i +\"  Value of contact_person is \" + jsonData.contact_person] = ",
							"            jsonData.contact_person !== null && ",
							"            jsonData.contact_person !== ' ' ;",
							"            ",
							"            pm.test(\"Validate email_id is not null. For i equals to : \" + i +\"  Value of email_id is: \" + jsonData.email_id, function()",
							"                        {",
							"                            pm.expect(jsonData.email_id).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);",
							"                        });",
							"            ",
							"            pm.test(\"Validate gstin is not null. For i equals to : \" + i +\"  Value of gstin is: \" + jsonData.gstin, function()",
							"                        {",
							"                            pm.expect(jsonData.gstin).to.match(/\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/);",
							"                        }); ",
							"            ",
							"            tests[\"Validate phone_1 is not null. For i equals to : \" + i +\"  Value of phone_1 is \" + jsonData.phone_1] = ",
							"            jsonData.phone_1 !== null && ",
							"            jsonData.phone_1 !== ' ' ||",
							"            jsonData.phone_1.length==10 ;",
							"            ",
							"            pm.test(\"Validate pan is not null. For i equals to : \" + i +\"  Value of pan is: \" + jsonData.pan, function()",
							"                        {",
							"                            pm.expect(jsonData.pan).to.match(/[A-Z]{5}\\d{4}[A-Z]{1}/);",
							"                        });",
							"        ",
							"            tests[\"Validate state is not null. For i equals to : \" + i +\"  Value of state is \" + jsonData.state] = ",
							"            jsonData.state !== null && ",
							"            jsonData.state !== ' ' ;",
							"            ",
							"            tests[\"Validate address_line_1 is not null. For i equals to : \" + i +\"  Value of address_line_1 is \" + jsonData.address_line_1] = ",
							"            jsonData.address_line_1 !== null && ",
							"            jsonData.address_line_1 !== ' ' ;",
							"            ",
							"            tests[\"Validate address_line_2 is not null. For i equals to : \" + i +\"  Value of address_line_2 is \" + jsonData.address_line_2] = ",
							"            jsonData.address_line_2 !== null && ",
							"            jsonData.address_line_2 !== ' ' ;",
							"            ",
							"            tests[\"Validate city is not null. For i equals to : \" + i +\"  Value of city is \" + jsonData.city] = ",
							"            jsonData.city !== null && ",
							"            jsonData.city !== ' ' ;",
							"            ",
							"            tests[\"Validate zip_code is not null. For i equals to : \" + i +\"  Value of zip_code is \" + jsonData.zip_code] = ",
							"            jsonData.zip_code !== null && ",
							"            jsonData.zip_code !== ' ' && ",
							"            jsonData.zip_code.length >= 6 ;",
							"            ",
							"            tests[\"Validate country is not null. For i equals to : \" + i +\"  Value of country is \" + jsonData.country] = ",
							"            jsonData.country !== null && ",
							"            jsonData.country !== ' ' ;",
							"            ",
							"        }",
							"    }",
							"    ",
							"    catch(err){",
							"        pm.test(\"Status code is not in 2XX series. Error is : \" +err ,function()",
							"        {",
							"             pm.expect(1).to.eql(2)",
							"        })",
							"    }",
							"    ",
							"    ",
							"",
							"    // Varification of path parameters and key params ",
							"    ",
							"    var query = {};",
							"    var key,value;",
							"    pm.request.url.query.all().forEach(",
							"        (param) => {",
							"        key= [param.key]",
							"    value= [param.value]",
							"        ",
							"    });",
							"        console.log(\"pm.request.url.query.all():  \" + pm.request.url);",
							"",
							"    console.log(\"pm.request.url.path[3] : \" + pm.request.url.path[3])",
							"    ",
							"    if(value==\"\" || value ==null || typeof(value)!==\"string\")",
							"        {",
							"            tests[\"Validating 'BAD REQUEST' reponse when value of customer_name is blank or null\"]=",
							"            pm.response.json().statusCode==400 &&",
							"            pm.response.json().error==\"Bad Request\" &&",
							"            pm.response.json().message==\"querystring.customer_name should NOT be shorter than 1 characters\";",
							"        }",
							"  ",
							"    ",
							"      "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0c0849a-d091-4375-9f7e-84721593b41b",
						"exec": [
							"//pm.variables.set('gstin', data.gstin); ",
							"",
							"pm.variables.set('Customer_name', ''); ",
							"pm.variables.set('CompanyId', '1')",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/company/{{CompanyId}}/customers?customer_name={{Customer_name}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"company",
						"{{CompanyId}}",
						"customers"
					],
					"query": [
						{
							"key": "customer_name",
							"value": "{{Customer_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getCurrencyList",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80bffad0-5622-436b-b397-d8a26673aa2b",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"currencies\"",
							"  ],",
							"  \"properties\": {",
							"    \"currencies\": {",
							"      \"$id\": \"#/properties/currencies\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Currencies Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/currencies/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"currency_name\",",
							"          \"alpha_code\",",
							"          \"symbol\",",
							"          \"id\"",
							"        ],",
							"        \"properties\": {",
							"          \"currency_name\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/currency_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Currency_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Indian Rupee\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"alpha_code\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/alpha_code\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Alpha_code Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"INR\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"symbol\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/symbol\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Symbol Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"₹\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"id\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              3",
							"            ]",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"",
							"// 3. Verify Status code is 200",
							"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"    pm.response.to.have.status(parseInt(environment.statusCode));",
							"});",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"});",
							"",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"",
							"pm.test(\"JSON response Body contains currencies: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"currencies\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains currency_name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"currency_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains alpha code: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"alpha_code\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains symbol: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"symbol\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains id: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"//6. JSON value check in reponse body",
							"",
							"var size= pm.response.json().currencies.length",
							"for (i=0;i<size;i++){",
							"    ",
							"    var jsonData = pm.response.json().currencies[i]",
							"    ",
							"tests[\"Validate currency name is not null. Value of currency name is \" + jsonData.currency_name] = ",
							"    jsonData.currency_name !== null && ",
							"    jsonData.currency_name !== ' ' && ",
							"    jsonData.currency_name !== 0;",
							"",
							"tests[\"Validate alpha_code is not null. Value of alpha_code is: \" +jsonData.alpha_code ] = ",
							"    jsonData.alpha_code == \"INR\" || jsonData.alpha_code == \"USD\" || jsonData.alpha_code == \"AUD\" ",
							"    ",
							"tests[\"Validate symbol is not null. Value of symbol is: \" +jsonData.symbol ] = ",
							"    jsonData.symbol !== null && ",
							"    jsonData.symbol !== ' ' && ",
							"    jsonData.symbol == \"₹\"  || jsonData.symbol == \"$\" || jsonData.symbol == \"A$\" ;",
							"    ",
							"    tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
							"    jsonData.id !== null && ",
							"    jsonData.id !== ' ' && ",
							"    jsonData.id !== 0;",
							"",
							"}",
							"",
							"// 7. To print Application content type as JSON",
							"",
							"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"// 8. Access control allowed methods ",
							"",
							"pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/currency",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllStates",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79db1218-0577-4c2f-b8d7-dfa2b75b8b7a",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"states\"",
							"  ],",
							"  \"properties\": {",
							"    \"states\": {",
							"      \"$id\": \"#/properties/states\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The States Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/states/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"state_name\",",
							"          \"state_code\",",
							"          \"id\"",
							"        ],",
							"        \"properties\": {",
							"          \"state_name\": {",
							"            \"$id\": \"#/properties/states/items/properties/state_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The State_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Andhra Pradesh\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"state_code\": {",
							"            \"$id\": \"#/properties/states/items/properties/state_code\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The State_code Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"AP\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"id\": {",
							"            \"$id\": \"#/properties/states/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              1",
							"            ]",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"// 3. Verify Status code is 200",
							"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"    pm.response.to.have.status(parseInt(environment.statusCode));",
							"});",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"});",
							"",
							"// 5. Verify response body contain string",
							"pm.test(\"JSON response Body contains state: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"state\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains id: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains state name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"state_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains state code: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"state_code\");",
							"});",
							"",
							"",
							"//6. JSON value check in reponse body",
							" ",
							"var size= pm.response.json().states.length",
							"",
							"// Verify Keys are Not Null",
							"console.log(pm.request.url.query[0])",
							"",
							"for(i=0;i<5; i++)",
							"{",
							"    var jsonData = pm.response.json().states[i]",
							"tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
							"    jsonData.id !== null && ",
							"    jsonData.id !== ' ' && ",
							"    jsonData.id !== 0;",
							"    ",
							"tests[\"Validate state_name is not null. Value of state_name is \" + jsonData.state_name] = ",
							"    jsonData.state_name !== null && ",
							"    jsonData.state_name !== ' ' && ",
							"    jsonData.state_name !== 0;",
							"",
							"tests[\"Validate state code is not null. Value of state code is: \" +jsonData.state_code ] = ",
							"    jsonData.state_code !== null && ",
							"    jsonData.state_code !== ' ' && ",
							"    jsonData.state_code !== 0 &&",
							"    jsonData.state_code.length == 2;",
							"    ",
							"}",
							"",
							"// 7.To print Application content type as JSON",
							"",
							"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"// 8. Access control allowed methods ",
							"",
							"pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "aa980971-e3e9-4a60-898e-28797c1fe341",
						"exec": [
							"// country_id : 95 for India",
							"pm.variables.set(\"country_id\",\"95\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/state?country_id={{country_id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"state"
					],
					"query": [
						{
							"key": "country_id",
							"value": "{{country_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getGSTRate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "accf9f30-11f4-45d4-ab20-5cc15da54c2e",
						"exec": [
							"pm.variables.set('sac_code',992123)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ecdcaed8-7bc1-41bd-81a6-42d694522af5",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"rate\"",
							"  ],",
							"  \"properties\": {",
							"    \"rate\": {",
							"      \"$id\": \"#/properties/rate\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Rate Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        18",
							"      ]",
							"    }",
							"  }",
							"};",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"",
							"// 3. Verify Status code is 200",
							"    pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"        pm.response.to.have.status(parseInt(environment.statusCode));",
							"    });",
							"",
							"// 4. Verify response time is less than 1700ms",
							"    pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"    });",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"    pm.test(\"JSON response Body contains rate: Verified\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"rate\");",
							"    });",
							"    ",
							"//6. Validation of response data ",
							"",
							"     var rate=pm.response.json().rate",
							"         tests[\"Validate rate is not null, blank or 0. For rate equals to : \" + rate]=",
							"             rate!==\"\" &&",
							"             rate!==null &&",
							"             rate!==0;",
							"     ",
							"//7. Verification of content type",
							"",
							"    pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"    function(){",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"    })",
							"",
							"// 8. Access control allowed methods ",
							"    pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"        pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"    })",
							"    ",
							"//9. Verification of Invalid or wrong input in params field",
							"",
							" var query = {};",
							"    var key,value;",
							"",
							"    pm.request.url.query.all().forEach(",
							"        (param) => {",
							"                        key= [param.key]",
							"                        value= [param.value]",
							"                        ",
							"                    });",
							"",
							"    if(value==\"\" || value ==null)",
							"        {",
							"            tests[\"Validating 'BAD REQUEST' reponse when value of sac_code is blank or null\"]=",
							"            pm.response.json().statusCode==400 &&",
							"            pm.response.json().error==\"Bad Request\" &&",
							"            pm.response.json().message==\"querystring.sac_code should be number\";",
							"        }",
							"  ",
							"    ",
							"      ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/gst_rate?sac_code={{sac_code}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"gst_rate"
					],
					"query": [
						{
							"key": "sac_code",
							"value": "{{sac_code}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getCurrencyList",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80bffad0-5622-436b-b397-d8a26673aa2b",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"currencies\"",
							"  ],",
							"  \"properties\": {",
							"    \"currencies\": {",
							"      \"$id\": \"#/properties/currencies\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Currencies Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/currencies/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"currency_name\",",
							"          \"alpha_code\",",
							"          \"symbol\",",
							"          \"id\"",
							"        ],",
							"        \"properties\": {",
							"          \"currency_name\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/currency_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Currency_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Indian Rupee\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"alpha_code\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/alpha_code\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Alpha_code Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"INR\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"symbol\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/symbol\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Symbol Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"₹\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"id\": {",
							"            \"$id\": \"#/properties/currencies/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              3",
							"            ]",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"",
							"// 3. Verify Status code is 200",
							"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"    pm.response.to.have.status(parseInt(environment.statusCode));",
							"});",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"});",
							"",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"pm.test(\"JSON response Body contains id: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains currency_name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"currency_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains alpha code: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"alpha_code\");",
							"});",
							"",
							"",
							"",
							"pm.test(\"JSON response Body contains symbol: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"symbol\");",
							"});",
							"",
							"//6. JSON value check in reponse body",
							"",
							"var size= pm.response.json().currencies.length",
							"for (i=0;i<size;i++){",
							"    ",
							"    var jsonData = pm.response.json().currencies[i]",
							"",
							"",
							"tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
							"    jsonData.id !== null && ",
							"    jsonData.id !== ' ' && ",
							"    jsonData.id !== 0;",
							"    ",
							"tests[\"Validate country name is not null. Value of country name is \" + jsonData.country_name] = ",
							"    jsonData.country_name !== null && ",
							"    jsonData.country_name !== ' ' && ",
							"    jsonData.country_name !== 0;",
							"",
							"tests[\"Validate alpha_code is not null. Value of alpha_code is: \" +jsonData.alpha_code ] = ",
							"    jsonData.alpha_code == \"INR\" || jsonData.alpha_code == \"USD\" || jsonData.alpha_code == \"AUD\" ",
							"    ",
							"    ",
							"",
							"tests[\"Validate symbol is not null. Value of symbol is: \" +jsonData.symbol ] = ",
							"    jsonData.symbol !== null && ",
							"    jsonData.symbol !== ' ' && ",
							"    jsonData.symbol == \"₹\"  || jsonData.symbol == \"$\" || jsonData.symbol == \"A$\" ;",
							"}",
							"",
							"// 7. To print Application content type as JSON",
							"",
							"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"// 8. Access control allowed methods ",
							"",
							"pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/currency",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "getBusinessDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28fe28b5-66ae-420c-900e-1fa71a9091ae",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"company\"",
							"  ],",
							"  \"properties\": {",
							"    \"company\": {",
							"      \"$id\": \"#/properties/company\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Company Schema\",",
							"      \"required\": [",
							"        \"id\",",
							"        \"company_legal_name\",",
							"        \"pan\",",
							"        \"locations\",",
							"        \"bank_details\",",
							"        \"signatories\"",
							"      ],",
							"      \"properties\": {",
							"        \"id\": {",
							"          \"$id\": \"#/properties/company/properties/id\",",
							"          \"type\": \"integer\",",
							"          \"title\": \"The Id Schema\",",
							"          \"default\": 0,",
							"          \"examples\": [",
							"            1",
							"          ]",
							"        },",
							"        \"company_legal_name\": {",
							"          \"$id\": \"#/properties/company/properties/company_legal_name\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Company_legal_name Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"M/s. Language\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        },",
							"        \"pan\": {",
							"          \"$id\": \"#/properties/company/properties/pan\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Pan Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"DMSPS0123Q\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        },",
							"        \"locations\": {",
							"          \"$id\": \"#/properties/company/properties/locations\",",
							"          \"type\": \"array\",",
							"          \"title\": \"The Locations Schema\",",
							"          \"items\": {",
							"            \"$id\": \"#/properties/company/properties/locations/items\",",
							"            \"type\": \"object\",",
							"            \"title\": \"The Items Schema\",",
							"            \"required\": [",
							"              \"billing_from\",",
							"              \"gstin\",",
							"              \"address\"",
							"            ],",
							"            \"properties\": {",
							"              \"billing_from\": {",
							"                \"$id\": \"#/properties/company/properties/locations/items/properties/billing_from\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Billing_from Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"Maharashtra\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"gstin\": {",
							"                \"$id\": \"#/properties/company/properties/locations/items/properties/gstin\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Gstin Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"27DMSPS0123QZ9\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"address\": {",
							"                \"$id\": \"#/properties/company/properties/locations/items/properties/address\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Address Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"5/7 A-8, Grant Building, Arthur Bumder Road, Colaba, Mumbai, Maharashtra, India 400005\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              }",
							"            }",
							"          }",
							"        },",
							"        \"bank_details\": {",
							"          \"$id\": \"#/properties/company/properties/bank_details\",",
							"          \"type\": \"array\",",
							"          \"title\": \"The Bank_details Schema\",",
							"          \"items\": {",
							"            \"$id\": \"#/properties/company/properties/bank_details/items\",",
							"            \"type\": \"object\",",
							"            \"title\": \"The Items Schema\",",
							"            \"required\": [",
							"              \"account_name\",",
							"              \"account_number\",",
							"              \"bank\",",
							"              \"ifsc\",",
							"              \"branch\"",
							"            ],",
							"            \"properties\": {",
							"              \"account_name\": {",
							"                \"$id\": \"#/properties/company/properties/bank_details/items/properties/account_name\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Account_name Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"M/s. Language\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"account_number\": {",
							"                \"$id\": \"#/properties/company/properties/bank_details/items/properties/account_number\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Account_number Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"10292029002\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"bank\": {",
							"                \"$id\": \"#/properties/company/properties/bank_details/items/properties/bank\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Bank Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"HDFC Bank\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"ifsc\": {",
							"                \"$id\": \"#/properties/company/properties/bank_details/items/properties/ifsc\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Ifsc Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"HDFC0123455\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"branch\": {",
							"                \"$id\": \"#/properties/company/properties/bank_details/items/properties/branch\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Branch Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"Colaba, Mumbai\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              }",
							"            }",
							"          }",
							"        },",
							"        \"signatories\": {",
							"          \"$id\": \"#/properties/company/properties/signatories\",",
							"          \"type\": \"array\",",
							"          \"title\": \"The Signatories Schema\",",
							"          \"items\": {",
							"            \"$id\": \"#/properties/company/properties/signatories/items\",",
							"            \"type\": \"object\",",
							"            \"title\": \"The Items Schema\",",
							"            \"required\": [",
							"              \"user_name\",",
							"              \"designation\",",
							"              \"image_url\"",
							"            ],",
							"            \"properties\": {",
							"              \"user_name\": {",
							"                \"$id\": \"#/properties/company/properties/signatories/items/properties/user_name\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The User_name Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"Zeeshan Keval\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"designation\": {",
							"                \"$id\": \"#/properties/company/properties/signatories/items/properties/designation\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Designation Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"PA\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              },",
							"              \"image_url\": {",
							"                \"$id\": \"#/properties/company/properties/signatories/items/properties/image_url\",",
							"                \"type\": \"string\",",
							"                \"title\": \"The Image_url Schema\",",
							"                \"default\": \"\",",
							"                \"examples\": [",
							"                  \"http://some_signature.com/eeeee.jpg\"",
							"                ],",
							"                \"pattern\": \"^(.*)$\"",
							"              }",
							"            }",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"// 3. Verify Status code is 200",
							"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"    pm.response.to.have.status(parseInt(environment.statusCode));",
							"});",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"});",
							"",
							"// 5. Verify response body contain string",
							"",
							"pm.test(\"JSON response Body contains id: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains company legal name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"company_legal_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains pan: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"pan\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains locations: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"locations\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains billing_from: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"billing_from\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains gstin: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"gstin\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains address: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"address\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains bank details: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"bank_details\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains account name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"account_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains account number: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"account_number\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains bank: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"bank\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains ifsc: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ifsc\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains branch: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"branch\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains signatories: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"signatories\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains user name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"user_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains designation: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"designation\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains image_url: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"image_url\");",
							"});",
							"",
							"// 6. JSON value check in reponse body",
							"",
							"//id validation",
							"",
							"tests[\"\"]=",
							"id is not null ,blank and non zero",
							"// (i)GSTIN number validation",
							"",
							" locations=pm.response.json().company.locations",
							" noOfLocations=locations.length",
							" ",
							"     for(i=0;i<noOfLocations;i++)",
							"         {",
							"            pm.test(\"gstin is equal to \" + locations[i].gstin + \" length is: \" + locations[i].gstin.length, function () ",
							"                    {",
							"                        pm.expect(locations[i].gstin).to.match(/\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/);",
							"                        pm.expect(locations[i].gstin.length).to.eql(15);",
							"                    ",
							"                    }); ",
							"         }",
							"",
							"",
							"// PAN no validation",
							"pm.test(\"PAN is equal to \" + pm.response.json().company.pan, function () ",
							"{",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.company.pan).to.match(/[A-Z]{5}\\d{4}[A-Z]{1}/);",
							"    pm.expect(jsonData.company.pan.length).to.eql(10);",
							"});",
							"",
							" //7. To print Application content type as JSON",
							"",
							"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"// 8. Access control allowed methods ",
							"pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"})",
							"",
							"console.log(pm.response.reason())",
							"",
							"// Not Null Validation",
							"/*",
							"",
							"",
							"var jsonData = pm.response.json().company[0];",
							"",
							"tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
							"    jsonData.id !== null && ",
							"    jsonData.id !== ' ' && ",
							"    jsonData.id !== 0;",
							"    ",
							"tests[\"Validate Company legal name is not null. Value of Company legal name is \" + jsonData.company_legal_name] = ",
							"    jsonData.company_legal_name !== null && ",
							"    jsonData.company_legal_name !== ' ' && ",
							"    jsonData.company_legal_name !== 0;",
							"",
							"tests[\"Validate Company name is not null. Value of Company name is \" + jsonData.company_name] = ",
							"    jsonData.company_name !== null && ",
							"    jsonData.company_name !== ' ' && ",
							"    jsonData.company_name !== 0;",
							"",
							"tests[\"Validate Contact person is not null. Value of Contact person is: \" +jsonData.contact_person ] = ",
							"    jsonData.contact_person !== null && ",
							"    jsonData.contact_person !== ' ' && ",
							"    jsonData.contact_person !== 0;",
							"    ",
							"tests[\"Validate Email id is not null. Value of Email id is \" + jsonData.email_id] = ",
							"    jsonData.email_id !== null && ",
							"    jsonData.email_id !== ' ' && ",
							"    jsonData.email_id !== 0;",
							"",
							"tests[\"Validate Phone 1 is not null. Value of Phone 1 is \" + jsonData.phone_1] = ",
							"    jsonData.phone_1 !== null && ",
							"    jsonData.phone_1 !== ' ' && ",
							"    jsonData.phone_1 !== 0;",
							"",
							"tests[\"Validate Phone 2 is not null. Value of Phone 2 is: \" +jsonData.phone_2 ] = ",
							"    jsonData.phone_2 !== null && ",
							"    jsonData.phone_2 !== ' ' && ",
							"    jsonData.phone_2 !== 0;",
							"    ",
							"tests[\"Validate Created at is not null. Value of Created at is \" + jsonData.created_at] = ",
							"    jsonData.created_at !== null && ",
							"    jsonData.created_at !== ' ' && ",
							"    jsonData.created_at !== 0;",
							"",
							"tests[\"Validate Status is not null. Value of Status is \" + jsonData.status] = ",
							"    jsonData.status !== null && ",
							"    jsonData.status !== ' ' && ",
							"    (jsonData.status == 0 ||",
							"    jsonData.status == 1)",
							"",
							"tests[\"Validate Website is not null. Value of Website is: \" +jsonData.website ] = ",
							"    jsonData.website !== null && ",
							"    jsonData.website !== ' ' && ",
							"    jsonData.website !== 0;",
							"    ",
							"tests[\"Validate api consumer id is not null. Value of api consumer id is \" + jsonData.api_consumer_id] = ",
							"    jsonData.api_consumer_id !== null && ",
							"    jsonData.api_consumer_id !== ' ' && ",
							"    jsonData.api_consumer_id !== 0;",
							"",
							"tests[\"Validate Type is not null. Value of Type is \" + jsonData.type] = ",
							"    jsonData.type !== null && ",
							"    jsonData.type !== ' ' && ",
							"    jsonData.type !== 0;",
							"",
							"tests[\"Validate Company id is not null. Value of Company id is: \" +jsonData.company_id ] = ",
							"    jsonData.company_id !== null && ",
							"    jsonData.company_id !== ' ' && ",
							"    jsonData.company_id !== 0;",
							"    ",
							"tests[\"Validate GSTIN is not null. Value of GSTIN is \" + jsonData.gstin] = ",
							"    jsonData.gstin !== null && ",
							"    jsonData.gstin !== ' ' && ",
							"    jsonData.gstin !== 0;",
							"",
							"tests[\"Validate Address type is not null. Value of Address type is \" + jsonData.address_type] = ",
							"    jsonData.address_type !== null && ",
							"    jsonData.address_type !== ' ' && ",
							"    jsonData.address_type !== 0;",
							"",
							"tests[\"Validate PAN is not null. Value of PAN is: \" +jsonData.pan ] = ",
							"    jsonData.pan !== null && ",
							"    jsonData.pan !== ' ' && ",
							"    jsonData.pan !== 0;",
							"    ",
							"tests[\"Validate Currency code is not null. Value of Currency code is: \" +jsonData.currency_code ] = ",
							"    jsonData.currency_code !== null && ",
							"    jsonData.currency_code !== ' ' && ",
							"    jsonData.currency_code !== 0;",
							"    ",
							"tests[\"Validate State is not null. Value of state is: \" +jsonData.state ] = ",
							"    jsonData.state !== null && ",
							"    jsonData.state !== ' ' && ",
							"    jsonData.state !== 0;",
							"",
							"tests[\"Validate address line 1 is not null. Value of Address line 1 is: \" +jsonData.address_line_1 ] = ",
							"    jsonData.address_line_1 !== null && ",
							"    jsonData.address_line_1 !== ' ' && ",
							"    jsonData.address_line_1 !== 0;",
							"    ",
							"tests[\"Validate address line 2 is not null. Value of Address line 1 is: \" +jsonData.address_line_2 ] = ",
							"    jsonData.address_line_2 !== null && ",
							"    jsonData.address_line_2 !== ' ' && ",
							"    jsonData.address_line_2 !== 0;",
							"    ",
							"tests[\"Validate city is not null. Value of city is: \" +jsonData.city ] = ",
							"    jsonData.city !== null && ",
							"    jsonData.city !== ' ' && ",
							"    jsonData.city !== 0;",
							"    ",
							"tests[\"Validate zip_code is not null. Value of zip_code is: \" +jsonData.zip_code ] = ",
							"    jsonData.zip_code !== null && ",
							"    jsonData.zip_code !== ' ' && ",
							"    jsonData.zip_code !== 0;",
							"    ",
							"tests[\"Validate country is not null. Value of country is: \" +jsonData.country ] = ",
							"    jsonData.country !== null && ",
							"    jsonData.country !== ' ' && ",
							"    jsonData.country !== 0;",
							"",
							"",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "dfe66445-87a7-42a1-ae62-18e4162eebc6",
						"exec": [
							"pm.variables.set('company_id',1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/company/{{company_id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"company",
						"{{company_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "addCustomer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "585f5542-dbc3-40b1-aac3-5dd706d5eadf",
						"exec": [
							"pm.variables.set('company_id','1')"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6d5992bc-b4aa-4b30-b1eb-d39fd9bf970a",
						"exec": [
							"// 1. JSON schema validation",
							"",
							"var schema = ;",
							"",
							"pm.test('Validation of json Schema: ' +tv4.validate(pm.response.json(), schema), ",
							"function() {",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"}",
							");",
							"",
							"// 2. Validation of data type of keys in reponse",
							"",
							"if (!tv4.validate(pm.response.json(), schema))",
							"{",
							"    var errors=tv4.validateMultiple(pm.response.json(), schema).errors;",
							"        if (errors.length==1){",
							"            pm.test(\"Error at key : \" +tv4.validateResult(pm.response.json(), schema).error.dataPath + \" , Error is-\\\" \" + tv4.validateResult(pm.response.json(), schema) +\"\\\"\",",
							"                function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"                }",
							"                    );",
							"        }",
							"       ",
							"       if(errors.length>1){",
							"        for(i=0;i<errors.length;i++)   {",
							"                   console.log(errors[i].message)",
							"                   pm.test(\"Error at key : \" + errors[i].dataPath + \" , Error is-\\\" \" +errors[i].message ,function() {",
							"                  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; ",
							"                })  ",
							"        } ",
							"       }",
							"    ",
							"}",
							"",
							"",
							"// 3. Verify Status code is 200",
							"pm.test(\"Status code is \" + environment.statusCode +\" : Verified\", function () {",
							"    pm.response.to.have.status(parseInt(environment.statusCode));",
							"});",
							"",
							"",
							"// 4. Verify response time is less than 1700ms",
							"pm.test(\"Actual Response time: \"+pm.response.responseTime+\"ms is less than max limit: \" + environment.respTime +\"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment.respTime));",
							"});",
							"",
							"",
							"//5. Verify response body contain string - mandatory keys in reponse",
							"pm.test(\"JSON response Body contains id: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains currency_name: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"currency_name\");",
							"});",
							"",
							"pm.test(\"JSON response Body contains alpha code: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"alpha_code\");",
							"});",
							"",
							"",
							"",
							"pm.test(\"JSON response Body contains symbol: Verified\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"symbol\");",
							"});",
							"",
							"//6. JSON value check in reponse body",
							"",
							"var size= pm.response.json().currencies.length",
							"for (i=0;i<size;i++){",
							"    ",
							"    var jsonData = pm.response.json().currencies[i]",
							"",
							"",
							"tests[\"Validate Id is not null. Value of Id is: \" +jsonData.id ] = ",
							"    jsonData.id !== null && ",
							"    jsonData.id !== ' ' && ",
							"    jsonData.id !== 0;",
							"    ",
							"tests[\"Validate country name is not null. Value of country name is \" + jsonData.country_name] = ",
							"    jsonData.country_name !== null && ",
							"    jsonData.country_name !== ' ' && ",
							"    jsonData.country_name !== 0;",
							"",
							"tests[\"Validate alpha_code is not null. Value of alpha_code is: \" +jsonData.alpha_code ] = ",
							"    jsonData.alpha_code == \"INR\" || jsonData.alpha_code == \"USD\" || jsonData.alpha_code == \"AUD\" ",
							"    ",
							"    ",
							"",
							"tests[\"Validate symbol is not null. Value of symbol is: \" +jsonData.symbol ] = ",
							"    jsonData.symbol !== null && ",
							"    jsonData.symbol !== ' ' && ",
							"    jsonData.symbol == \"₹\"  || jsonData.symbol == \"$\" || jsonData.symbol == \"A$\" ;",
							"}",
							"",
							"// 7. To print Application content type as JSON",
							"",
							"pm.test(\"Content Type is: \" + pm.response.headers.get(\"Content-Type\"),",
							"function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"// 8. Access control allowed methods ",
							"",
							"pm.test(\"Access control Allowed methods are: \" +pm.response.headers.get(\"Access-Control-Allow-Methods\"), function (){",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.eql(\"GET\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/v1/company/{company_id}/customers",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"v1",
						"company",
						"{company_id}",
						"customers"
					]
				}
			},
			"response": []
		}
	]
}